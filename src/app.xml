<nesc xmlns="http://www.tinyos.net/nesC">
    <components>
        <component qname="PairingTestC" loc="8:PairingTestC.nc">
            <configuration/>
        </component>
        <component qname="MainC" loc="39:/opt/tinyos-2.1.0/tos/lib/tossim/MainC.nc">
            <configuration/>
        </component>
        <component qname="PlatformC" loc="31:/opt/tinyos-2.1.0/tos/platforms/mica/sim/PlatformC.nc">
            <documentation loc="1:/opt/tinyos-2.1.0/tos/platforms/micaz/sim/platform_hardware.h">
                <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
                <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: platform_hardware.h,v 1.5 2008/06/11 00:46:27 razvanm Exp $&#10;</long>
            </documentation>
            <configuration/>
        </component>
        <component qname="PlatformP" loc="33:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformP.nc" safe="">
            <documentation loc="1:/opt/tinyos-2.1.0/tos/platforms/micaz/sim/platform_hardware.h">
                <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
                <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: platform_hardware.h,v 1.5 2008/06/11 00:46:27 razvanm Exp $&#10;</long>
            </documentation>
            <module/>
        </component>
        <component qname="MotePlatformC" loc="15:/opt/tinyos-2.1.0/tos/platforms/micaz/MotePlatformC.nc">
            <documentation loc="10:/opt/tinyos-2.1.0/tos/platforms/micaz/MotePlatformC.nc">
                <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
                <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
            </documentation>
            <configuration/>
        </component>
        <component qname="MotePlatformP" loc="18:/opt/tinyos-2.1.0/tos/platforms/micaz/MotePlatformP.nc" safe="">
            <documentation loc="12:/opt/tinyos-2.1.0/tos/platforms/micaz/MotePlatformP.nc">
                <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
                <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
            </documentation>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOC.nc">
            <documentation loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOC.nc">
                <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
                <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;</long>
            </documentation>
            <configuration/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortA" loc="31(HplAtm128GeneralIOC.PortA):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
                <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
                <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
            </documentation>
            <instance number="0">
                <component-ref qname="HplAtm128GeneralIOPortP"/>
                <arguments>
                    <value cst="I:27">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:26">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:25">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                </arguments>
            </instance>
            <configuration/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="32(HplAtm128GeneralIOC.PortA.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="0">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="32(HplAtm128GeneralIOC.PortA.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="1">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:1">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="32(HplAtm128GeneralIOC.PortA.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="2">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:2">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="32(HplAtm128GeneralIOC.PortA.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="3">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:3">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="32(HplAtm128GeneralIOC.PortA.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="4">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:4">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="32(HplAtm128GeneralIOC.PortA.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="5">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:5">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="32(HplAtm128GeneralIOC.PortA.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="6">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:6">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="32(HplAtm128GeneralIOC.PortA.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="7">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:7">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortB" loc="31(HplAtm128GeneralIOC.PortB):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
                <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
                <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
            </documentation>
            <instance number="1">
                <component-ref qname="HplAtm128GeneralIOPortP"/>
                <arguments>
                    <value cst="I:24">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:23">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:22">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                </arguments>
            </instance>
            <configuration/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="32(HplAtm128GeneralIOC.PortB.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="8">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="32(HplAtm128GeneralIOC.PortB.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="9">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:1">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="32(HplAtm128GeneralIOC.PortB.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="10">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:2">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="32(HplAtm128GeneralIOC.PortB.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="11">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:3">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="32(HplAtm128GeneralIOC.PortB.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="12">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:4">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="32(HplAtm128GeneralIOC.PortB.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="13">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:5">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="32(HplAtm128GeneralIOC.PortB.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="14">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:6">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="32(HplAtm128GeneralIOC.PortB.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="15">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:7">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortC" loc="31(HplAtm128GeneralIOC.PortC):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
                <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
                <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
            </documentation>
            <instance number="2">
                <component-ref qname="HplAtm128GeneralIOPortP"/>
                <arguments>
                    <value cst="I:21">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:20">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:19">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                </arguments>
            </instance>
            <configuration/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="32(HplAtm128GeneralIOC.PortC.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="16">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="32(HplAtm128GeneralIOC.PortC.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="17">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:1">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="32(HplAtm128GeneralIOC.PortC.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="18">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:2">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="32(HplAtm128GeneralIOC.PortC.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="19">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:3">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="32(HplAtm128GeneralIOC.PortC.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="20">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:4">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="32(HplAtm128GeneralIOC.PortC.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="21">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:5">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="32(HplAtm128GeneralIOC.PortC.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="22">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:6">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="32(HplAtm128GeneralIOC.PortC.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="23">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:7">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortD" loc="31(HplAtm128GeneralIOC.PortD):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
                <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
                <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
            </documentation>
            <instance number="3">
                <component-ref qname="HplAtm128GeneralIOPortP"/>
                <arguments>
                    <value cst="I:18">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:17">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:16">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                </arguments>
            </instance>
            <configuration/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="32(HplAtm128GeneralIOC.PortD.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="24">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="32(HplAtm128GeneralIOC.PortD.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="25">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:1">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="32(HplAtm128GeneralIOC.PortD.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="26">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:2">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="32(HplAtm128GeneralIOC.PortD.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="27">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:3">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="32(HplAtm128GeneralIOC.PortD.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="28">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:4">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="32(HplAtm128GeneralIOC.PortD.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="29">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:5">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="32(HplAtm128GeneralIOC.PortD.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="30">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:6">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="32(HplAtm128GeneralIOC.PortD.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="31">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:7">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortE" loc="31(HplAtm128GeneralIOC.PortE):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
                <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
                <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
            </documentation>
            <instance number="4">
                <component-ref qname="HplAtm128GeneralIOPortP"/>
                <arguments>
                    <value cst="I:3">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:2">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:1">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                </arguments>
            </instance>
            <configuration/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="32(HplAtm128GeneralIOC.PortE.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="32">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="32(HplAtm128GeneralIOC.PortE.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="33">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:1">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="32(HplAtm128GeneralIOC.PortE.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="34">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:2">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="32(HplAtm128GeneralIOC.PortE.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="35">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:3">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="32(HplAtm128GeneralIOC.PortE.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="36">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:4">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="32(HplAtm128GeneralIOC.PortE.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="37">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:5">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="32(HplAtm128GeneralIOC.PortE.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="38">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:6">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="32(HplAtm128GeneralIOC.PortE.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="39">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:7">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortF" loc="31(HplAtm128GeneralIOC.PortF):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
                <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
                <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
            </documentation>
            <instance number="5">
                <component-ref qname="HplAtm128GeneralIOPortP"/>
                <arguments>
                    <value cst="I:98">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:97">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                </arguments>
            </instance>
            <configuration/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="32(HplAtm128GeneralIOC.PortF.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="40">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="32(HplAtm128GeneralIOC.PortF.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="41">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:1">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="32(HplAtm128GeneralIOC.PortF.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="42">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:2">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="32(HplAtm128GeneralIOC.PortF.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="43">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:3">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="32(HplAtm128GeneralIOC.PortF.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="44">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:4">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="32(HplAtm128GeneralIOC.PortF.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="45">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:5">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="32(HplAtm128GeneralIOC.PortF.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="46">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:6">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="32(HplAtm128GeneralIOC.PortF.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <instance number="47">
                <component-ref qname="HplAtm128GeneralIOPinP"/>
                <arguments>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="U:">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:7">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.F0" loc="33(HplAtm128GeneralIOC.F0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
                <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <instance number="0">
                <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                <arguments>
                    <value cst="I:98">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:97">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.F1" loc="33(HplAtm128GeneralIOC.F1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
                <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <instance number="1">
                <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                <arguments>
                    <value cst="I:98">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:97">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:1">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.F2" loc="33(HplAtm128GeneralIOC.F2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
                <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <instance number="2">
                <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                <arguments>
                    <value cst="I:98">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:97">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:2">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.F3" loc="33(HplAtm128GeneralIOC.F3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
                <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <instance number="3">
                <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                <arguments>
                    <value cst="I:98">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:97">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:3">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.F4" loc="33(HplAtm128GeneralIOC.F4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
                <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <instance number="4">
                <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                <arguments>
                    <value cst="I:98">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:97">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:4">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.F5" loc="33(HplAtm128GeneralIOC.F5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
                <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <instance number="5">
                <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                <arguments>
                    <value cst="I:98">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:97">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:5">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.F6" loc="33(HplAtm128GeneralIOC.F6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
                <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <instance number="6">
                <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                <arguments>
                    <value cst="I:98">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:97">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:6">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.F7" loc="33(HplAtm128GeneralIOC.F7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
                <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <instance number="7">
                <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                <arguments>
                    <value cst="I:98">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:97">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:7">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.G0" loc="33(HplAtm128GeneralIOC.G0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
                <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <instance number="8">
                <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                <arguments>
                    <value cst="I:101">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:100">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:99">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:0">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.G1" loc="33(HplAtm128GeneralIOC.G1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
                <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <instance number="9">
                <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                <arguments>
                    <value cst="I:101">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:100">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:99">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:1">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.G2" loc="33(HplAtm128GeneralIOC.G2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
                <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <instance number="10">
                <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                <arguments>
                    <value cst="I:101">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:100">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:99">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:2">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.G3" loc="33(HplAtm128GeneralIOC.G3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
                <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <instance number="11">
                <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                <arguments>
                    <value cst="I:101">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:100">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:99">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:3">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOC.G4" loc="33(HplAtm128GeneralIOC.G4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
                <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <instance number="12">
                <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                <arguments>
                    <value cst="I:101">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:100">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:99">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </value>
                    <value cst="I:4">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="MeasureClockC" loc="10:/opt/tinyos-2.1.0/tos/platforms/mica/sim/MeasureClockC.nc">
            <documentation loc="3:/opt/tinyos-2.1.0/tos/platforms/mica/sim/MeasureClockC.nc">
                <short>&#10; Simulation version of MeasureClockC for the mica platform.</short>
                <long>&#10; Simulation version of MeasureClockC for the mica platform. See &#10; tos/platforms/mica/MeasureClockC.nc for more details.&#10;&#10; @author Phil Levis&#10;</long>
            </documentation>
            <module/>
        </component>
        <component qname="SimMainP" loc="35:/opt/tinyos-2.1.0/tos/lib/tossim/SimMainP.nc">
            <module/>
        </component>
        <component qname="TinySchedulerC" loc="34:/opt/tinyos-2.1.0/tos/lib/tossim/TinySchedulerC.nc">
            <documentation loc="24:/opt/tinyos-2.1.0/tos/lib/tossim/TinySchedulerC.nc">
                <short>&#10; TOSSIM-specific scheduler implementation, which models&#10; tasks as simulation events (in order to capture delay).</short>
                <long>&#10; TOSSIM-specific scheduler implementation, which models&#10; tasks as simulation events (in order to capture delay).&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
            </documentation>
            <configuration/>
        </component>
        <component qname="SimSchedulerBasicP" loc="39:/opt/tinyos-2.1.0/tos/lib/tossim/SimSchedulerBasicP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/tossim/sim_event_queue.h">
                <short>&#10; The event queue is the core of the mote side of TOSSIM.</short>
                <long>&#10; The event queue is the core of the mote side of TOSSIM. It is a&#10; wrapper around the underlying heap. Unlike the 1.x version, it is&#10; not re-entrant: merging the Python console and TOSSIM means that&#10; functionality like packet injection/reception from external tools&#10; is on the Python side.&#10;&#10; @author Phil Levis&#10; @date   November 22 2005&#10;</long>
            </documentation>
            <module/>
        </component>
        <component qname="SimMoteP" loc="37:/opt/tinyos-2.1.0/tos/lib/tossim/SimMoteP.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/tossim/SimMoteP.nc">
                <short>&#10; The TOSSIM abstraction of a mote.</short>
                <long>&#10; The TOSSIM abstraction of a mote. By putting simulation state into&#10; a component, we can scale and reference this state automatically&#10; using nesC's rewriting, rather than managing and indexing into&#10; arrays manually.&#10;&#10; @author Phil Levis&#10; @date   August 19 2005&#10;</long>
            </documentation>
            <module/>
        </component>
        <component qname="TossimActiveMessageC" loc="36:/opt/tinyos-2.1.0/tos/lib/tossim/TossimActiveMessageC.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/tossim/TossimActiveMessageC.nc">
                <short>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.</short>
                <long>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.&#10;&#10; @author Philip Levis&#10; @date December 2 2005&#10;</long>
            </documentation>
            <module/>
        </component>
        <component qname="PairingTestM" loc="8:PairingTestM.nc">
            <module/>
        </component>
        <component qname="PairingC" loc="8:PairingC.nc">
            <configuration/>
        </component>
        <component qname="BaseFieldM" loc="22:BaseFieldM.nc">
            <documentation loc="1:crypto.h">
                <short>&#10; Authors: Xiaokang Xiong (xkxiong@cityu.edu.hk), Duncan S.Wong (duncan@cityu.edu.hk)&#10; Date: Sep, 2008&#10;</short>
            </documentation>
            <module/>
        </component>
        <component qname="ExtField2M" loc="8:ExtField2M.nc">
            <documentation loc="1:crypto.h">
                <short>&#10; Authors: Xiaokang Xiong (xkxiong@cityu.edu.hk), Duncan S.Wong (duncan@cityu.edu.hk)&#10; Date: Sep, 2008&#10;</short>
            </documentation>
            <module/>
        </component>
        <component qname="PointArithM" loc="12:PointArithM.nc">
            <documentation loc="1:crypto.h">
                <short>&#10; Authors: Xiaokang Xiong (xkxiong@cityu.edu.hk), Duncan S.Wong (duncan@cityu.edu.hk)&#10; Date: Sep, 2008&#10;</short>
            </documentation>
            <module/>
        </component>
        <component qname="PairingM" loc="8:PairingM.nc">
            <documentation loc="1:crypto.h">
                <short>&#10; Authors: Xiaokang Xiong (xkxiong@cityu.edu.hk), Duncan S.Wong (duncan@cityu.edu.hk)&#10; Date: Sep, 2008&#10;</short>
            </documentation>
            <module/>
        </component>
        <component qname="SHA1M" loc="42:SHA1M.nc">
            <module/>
        </component>
        <component qname="NNM" loc="50:NNM.nc">
            <documentation loc="26:NN.h">
                <short>&#10; NN.h&#10;&#10; Author: An Liu&#10; Date: 09/29/2006&#10; Modified by: Panos Kampanakis&#10; Date: 01/31/2007&#10;</short>
            </documentation>
            <module/>
        </component>
        <component qname="LedsC" loc="34:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
            <documentation loc="23:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
                <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
                <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
            </documentation>
            <configuration/>
        </component>
        <component qname="LedsP" loc="33:/opt/tinyos-2.1.0/tos/system/LedsP.nc" safe="">
            <documentation loc="24:/opt/tinyos-2.1.0/tos/system/LedsP.nc">
                <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
                <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
            </documentation>
            <module/>
        </component>
        <component qname="PlatformLedsC" loc="33:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
            <documentation loc="1:/opt/tinyos-2.1.0/tos/platforms/micaz/sim/platform_hardware.h">
                <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
                <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: platform_hardware.h,v 1.5 2008/06/11 00:46:27 razvanm Exp $&#10;</long>
            </documentation>
            <configuration/>
        </component>
        <component qname="SerialActiveMessageC" loc="37:/opt/tinyos-2.1.0/tos/lib/tossim/SerialActiveMessageC.nc">
            <documentation loc="60:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
                <short>&#10; </short>
                <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
            </documentation>
            <module/>
        </component>
        <component qname="GetRandomC" loc="9:GetRandomC.nc">
            <documentation loc="1:GetRandomC.nc">
                <short>&#10; This file provides configuration for random bytes, and random base field element generation.</short>
                <long>&#10; This file provides configuration for random bytes, and random base field element generation.&#10; It is dependent on RandomLfsrC.&#10; &#10; Author: Xiaokang Xiong &#60;xkxiong@gmail.com>&#10; Date: Sep, 2009&#10;</long>
            </documentation>
            <configuration/>
        </component>
        <component qname="GetRandomM" loc="11:GetRandomM.nc">
            <documentation loc="1:crypto.h">
                <short>&#10; Authors: Xiaokang Xiong (xkxiong@cityu.edu.hk), Duncan S.Wong (duncan@cityu.edu.hk)&#10; Date: Sep, 2008&#10;</short>
            </documentation>
            <module/>
        </component>
        <component qname="RandomLfsrC" loc="50:/opt/tinyos-2.1.0/tos/system/RandomLfsrC.nc">
            <documentation loc="39:/opt/tinyos-2.1.0/tos/system/RandomLfsrC.nc">
                <short>&#10; This is a 16 bit Linear Feedback Shift Register pseudo random number&#10;generator.</short>
                <long>&#10; This is a 16 bit Linear Feedback Shift Register pseudo random number&#10;generator. It is faster than the MLCG generator, but the numbers generated&#10; have less randomness.&#10;&#10; @author Alec Woo&#10; @author David Gay&#10; @author Philip Levis&#10; @date   August 8 2005&#10;</long>
            </documentation>
            <module/>
        </component>
        <component qname="TimeCounterMilli32P" loc="11:TimeCounterMilli32P.nc">
            <configuration/>
        </component>
        <component qname="AlarmCounterMilliP" loc="25:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
            <configuration/>
        </component>
        <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC):/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
            <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
                <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
                <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
            </documentation>
            <instance number="0">
                <component-ref qname="Atm128AlarmAsyncC"/>
                <arguments>
                    <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x40872178"/>
                        <typename><typedef-ref name="TMilli" ref="0x40872340"/></typename>
                    </type-tag>
                    <value cst="I:3">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <configuration/>
        </component>
        <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP):/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
            <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
                <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
                <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
            </documentation>
            <instance number="0">
                <component-ref qname="Atm128AlarmAsyncP"/>
                <arguments>
                    <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40c45d48"/></type-var>
                    <value cst="U:">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </value>
                </arguments>
            </instance>
            <module/>
        </component>
        <component qname="HplAtm128Timer0AsyncC" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncC.nc">
            <documentation loc="24:/opt/tinyos-2.1.0/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncC.nc">
                <short>&#10; The TOSSIM implementation of the Atm128 Timer0.</short>
                <long>&#10; The TOSSIM implementation of the Atm128 Timer0. It is built from a&#10; timer-specific counter component and a generic compare&#10; component. The counter component has an additional simulation-only&#10; interface to let the compare component know when its state has&#10; changed (e.g., TCNTX was set).&#10;&#10; @date November 22 2005&#10;&#10; @author Philip Levis &#60;pal@cs.stanford.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <configuration/>
        </component>
        <component qname="HplAtm128Timer0AsyncP" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
            <documentation loc="1:/opt/tinyos-2.1.0/tos/platforms/micaz/sim/platform_hardware.h">
                <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
                <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: platform_hardware.h,v 1.5 2008/06/11 00:46:27 razvanm Exp $&#10;</long>
            </documentation>
            <module/>
        </component>
        <component qname="Atm128AlarmAsyncC" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc" abstract="">
            <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
                <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
                <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
            </documentation>
            <parameters>
                <typedef name="precision" ref="0x40c45d48" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
                    <component-ref qname="Atm128AlarmAsyncC"/>
                    <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40c45d48"/></type-var>
                </typedef>
                <constant name="divider" ref="0x40c45f08" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
                    <component-ref qname="Atm128AlarmAsyncC"/>
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                </constant>
            </parameters>
            <configuration/>
        </component>
        <component qname="HplAtm128GeneralIOPinP" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc" abstract="">
            <documentation loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
                <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
            </documentation>
            <parameters>
                <constant name="port_addr" ref="0x406f9d30" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                    <component-ref qname="HplAtm128GeneralIOPinP"/>
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </constant>
                <constant name="ddr_addr" ref="0x4070c010" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                    <component-ref qname="HplAtm128GeneralIOPinP"/>
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </constant>
                <constant name="pin_addr" ref="0x4070c238" loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                    <component-ref qname="HplAtm128GeneralIOPinP"/>
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </constant>
                <constant name="bit" ref="0x4070c428" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
                    <component-ref qname="HplAtm128GeneralIOPinP"/>
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </constant>
            </parameters>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOSlowPinP" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
                <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
            </documentation>
            <parameters>
                <constant name="port_addr" ref="0x4074c920" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                    <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </constant>
                <constant name="ddr_addr" ref="0x4074cb48" loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                    <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </constant>
                <constant name="pin_addr" ref="0x4074cd70" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                    <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </constant>
                <constant name="bit" ref="0x40749010" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
                    <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </constant>
            </parameters>
            <module/>
        </component>
        <component qname="HplAtm128GeneralIOPortP" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
                <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
                <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
            </documentation>
            <parameters>
                <constant name="port_addr" ref="0x40701968" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
                    <component-ref qname="HplAtm128GeneralIOPortP"/>
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </constant>
                <constant name="ddr_addr" ref="0x40701b80" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
                    <component-ref qname="HplAtm128GeneralIOPortP"/>
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </constant>
                <constant name="pin_addr" ref="0x40701d98" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
                    <component-ref qname="HplAtm128GeneralIOPortP"/>
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </constant>
            </parameters>
            <configuration/>
        </component>
        <component qname="Atm128AlarmAsyncP" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" abstract="" safe="">
            <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
                <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
                <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
            </documentation>
            <parameters>
                <typedef name="precision" ref="0x40c3b010" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
                    <component-ref qname="Atm128AlarmAsyncP"/>
                    <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40c3b010"/></type-var>
                </typedef>
                <constant name="divider" ref="0x40c3b1d0" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
                    <component-ref qname="Atm128AlarmAsyncP"/>
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                </constant>
            </parameters>
            <module/>
        </component>
    </components>
    <interfaces>
    </interfaces>
    <interfacedefs>
        <interfacedef qname="SplitControl" loc="66:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
            <documentation loc="51:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
                <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
                <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
            </documentation>
            <function event="" provided="0" name="startDone" ref="0x4085a850" loc="92:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
                <documentation loc="85:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
                    <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
                    <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
                </documentation>
                <interfacedef-ref qname="SplitControl"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="error" ref="0x4085a6f8" loc="92:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function event="" provided="0" name="stopDone" ref="0x40859730" loc="117:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
                <documentation loc="111:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
                    <short>&#10; Notify caller that the component has been stopped.</short>
                    <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
                </documentation>
                <interfacedef-ref qname="SplitControl"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="error" ref="0x408595d8" loc="117:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="start" ref="0x4085a010" loc="83:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
                <documentation loc="68:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
                    <short>&#10; Start this component and all of its subcomponents.</short>
                    <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
                </documentation>
                <interfacedef-ref qname="SplitControl"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="stop" ref="0x4085ad60" loc="109:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
                <documentation loc="94:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
                    <short>&#10; Start this component and all of its subcomponents.</short>
                    <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
                </documentation>
                <interfacedef-ref qname="SplitControl"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="ExtField2" loc="8:ExtField2.nc">
            <documentation loc="1:crypto.h">
                <short>&#10; Authors: Xiaokang Xiong (xkxiong@cityu.edu.hk), Duncan S.Wong (duncan@cityu.edu.hk)&#10; Date: Sep, 2008&#10;</short>
            </documentation>
            <function command="" provided="0" name="mult" ref="0x40847a88" loc="20:ExtField2.nc">
                <interfacedef-ref qname="ExtField2"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="A" ref="0x408474f0" loc="20:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="B" ref="0x40847708" loc="20:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="C" ref="0x40847920" loc="20:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="inver" ref="0x4083e968" loc="32:ExtField2.nc">
                <interfacedef-ref qname="ExtField2"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="A" ref="0x4083e5f0" loc="32:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="B" ref="0x4083e808" loc="32:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="mid_mult_element" ref="0x40857390" loc="37:ExtField2.nc">
                <interfacedef-ref qname="ExtField2"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="A" ref="0x4083dd80" loc="37:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="B" ref="0x40857010" loc="37:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="C" ref="0x40857228" loc="37:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="mid_inver_element" ref="0x4083d938" loc="36:ExtField2.nc">
                <interfacedef-ref qname="ExtField2"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="A" ref="0x4083d5c0" loc="36:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="B" ref="0x4083d7d8" loc="36:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="mid_sub_element" ref="0x40857d60" loc="38:ExtField2.nc">
                <interfacedef-ref qname="ExtField2"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x408577c8" loc="38:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x408579e0" loc="38:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x40857bf8" loc="38:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="mid_add_element" ref="0x40856740" loc="39:ExtField2.nc">
                <interfacedef-ref qname="ExtField2"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x408561a8" loc="39:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x408563c0" loc="39:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x408565d8" loc="39:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="cube" ref="0x4083e208" loc="26:ExtField2.nc">
                <interfacedef-ref qname="ExtField2"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="A" ref="0x40847e68" loc="26:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="B" ref="0x4083e0a8" loc="26:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="mid_cube_element" ref="0x40856f00" loc="40:ExtField2.nc">
                <interfacedef-ref qname="ExtField2"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="A" ref="0x40856b88" loc="40:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="B" ref="0x40856da0" loc="40:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="mid_neg_element" ref="0x4083d170" loc="35:ExtField2.nc">
                <interfacedef-ref qname="ExtField2"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="A" ref="0x4083edb0" loc="35:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="B" ref="0x4083d010" loc="35:ExtField2.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="Boot" loc="39:/opt/tinyos-2.1.0/tos/interfaces/Boot.nc">
            <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/Boot.nc">
                <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
                <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
            </documentation>
            <function event="" provided="0" name="booted" ref="0x406bad88" loc="49:/opt/tinyos-2.1.0/tos/interfaces/Boot.nc">
                <documentation loc="40:/opt/tinyos-2.1.0/tos/interfaces/Boot.nc">
                    <short>&#10; Signaled when the system has booted successfully.</short>
                    <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
                </documentation>
                <interfacedef-ref qname="Boot"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="TaskBasic" loc="44:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
            <function command="" provided="0" name="postTask" ref="0x4062f550" loc="56:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
                <documentation loc="46:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
                    <short>&#10; Post this task to the TinyOS scheduler.</short>
                    <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
                </documentation>
                <interfacedef-ref qname="TaskBasic"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function event="" provided="0" name="runTask" ref="0x4062fa68" loc="64:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
                <documentation loc="58:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
                    <short>&#10; Event from the scheduler to run this task.</short>
                    <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
                </documentation>
                <interfacedef-ref qname="TaskBasic"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="SHA1" loc="35:SHA1.nc">
            <documentation loc="26:SHA1.nc">
                <short>&#10; Interface for SHA-1&#10; &#10; Author: An Liu&#10; Date: 09/15/2005&#10;</short>
            </documentation>
            <function command="" provided="0" name="reset" ref="0x409ab428" loc="37:SHA1.nc">
                <interfacedef-ref qname="SHA1"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:104" alignment="I:4"><struct-ref name="SHA1Context" ref="0x40821450"/>
                                <typename><typedef-ref name="SHA1Context" ref="0x4083b4c8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="context" ref="0x409ab2d0" loc="37:SHA1.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:104" alignment="I:4"><struct-ref name="SHA1Context" ref="0x40821450"/>
                                <typename><typedef-ref name="SHA1Context" ref="0x4083b4c8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="update" ref="0x409abe40" loc="38:SHA1.nc">
                <interfacedef-ref qname="SHA1"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:104" alignment="I:4"><struct-ref name="SHA1Context" ref="0x40821450"/>
                                <typename><typedef-ref name="SHA1Context" ref="0x4083b4c8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-qualified const="">
                                <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
                            </type-qualified>
                        </type-pointer>
                        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                            <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="context" ref="0x409ab840" loc="38:SHA1.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:104" alignment="I:4"><struct-ref name="SHA1Context" ref="0x40821450"/>
                                <typename><typedef-ref name="SHA1Context" ref="0x4083b4c8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="message_array" ref="0x409abac8" loc="38:SHA1.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-qualified const="">
                                <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
                            </type-qualified>
                        </type-pointer>
                    </variable>
                    <variable name="length" ref="0x409abcd8" loc="38:SHA1.nc">
                        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                            <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="digest" ref="0x409aa6c0" loc="39:SHA1.nc">
                <interfacedef-ref qname="SHA1"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:104" alignment="I:4"><struct-ref name="SHA1Context" ref="0x40821450"/>
                                <typename><typedef-ref name="SHA1Context" ref="0x4083b4c8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                            </type-int>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="context" ref="0x409aa278" loc="39:SHA1.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:104" alignment="I:4"><struct-ref name="SHA1Context" ref="0x40821450"/>
                                <typename><typedef-ref name="SHA1Context" ref="0x4083b4c8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="Message_Digest" ref="0x409aa560" loc="39:SHA1.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="HplAtm128TimerAsync" loc="15:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
            <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
                <short>&#10;&#10; </short>
                <long>&#10;&#10; @author David Gay&#10;</long>
            </documentation>
            <function command="" provided="0" name="controlBusy" ref="0x40c4d010" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
                <documentation loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
                    <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; </short>
                    <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128TimerAsync"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="compareBusy" ref="0x40c4d4e0" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
                <documentation loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
                    <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; </short>
                    <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128TimerAsync"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="setTimer0Asynchronous" ref="0x40c4ebc8" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
                <documentation loc="29:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
                    <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
                </documentation>
                <interfacedef-ref qname="HplAtm128TimerAsync"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="countBusy" ref="0x40c4d9a0" loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
                <documentation loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
                    <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; </short>
                    <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128TimerAsync"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="getAssr" ref="0x40c4e0f8" loc="21:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
                <documentation loc="17:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
                    <short>&#10; Read timer0 asynchronous status register (ASSR)&#10; </short>
                    <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128TimerAsync"/>
                <type-function size="I:1" alignment="I:1">
                    <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c34200"/>
                        <typename><typedef-ref name="Atm128Assr_t" ref="0x40c34428"/></typename>
                    </type-tag>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="setAssr" ref="0x40c4e6e8" loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
                <documentation loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
                    <short>&#10; Set timer0 asynchronous status register (ASSR)&#10; </short>
                    <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128TimerAsync"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c34200"/>
                            <typename><typedef-ref name="Atm128Assr_t" ref="0x40c34428"/></typename>
                        </type-tag>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="x" ref="0x40c4e590" loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
                        <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c34200"/>
                            <typename><typedef-ref name="Atm128Assr_t" ref="0x40c34428"/></typename>
                        </type-tag>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="TossimPacket" loc="44:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacket.nc">
            <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
                <short>&#10; </short>
                <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
            </documentation>
            <function command="" provided="0" name="strength" ref="0x407d8bf8" loc="45:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacket.nc">
                <interfacedef-ref qname="TossimPacket"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="signed char" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="int8_t" ref="0x401c0468"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x407d8aa0" loc="45:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacket.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="Packet" loc="44:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
            <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                <short> &#10; The basic message data type accessors.</short>
                <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
            </documentation>
            <function command="" provided="0" name="clear" ref="0x407d7530" loc="54:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                <documentation loc="47:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                    <short>&#10; Clear out this packet.</short>
                    <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
                </documentation>
                <interfacedef-ref qname="Packet"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x407d73d8" loc="54:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="payloadLength" ref="0x407d7f00" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                <documentation loc="56:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                    <short>&#10; Return the length of the payload of msg.</short>
                    <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
                </documentation>
                <interfacedef-ref qname="Packet"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x407d7da8" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="getPayload" ref="0x407d3e88" loc="115:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                <documentation loc="98:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                    <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
                    <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
                </documentation>
                <interfacedef-ref qname="Packet"/>
                <type-function size="I:1" alignment="I:1">
                    <type-pointer size="I:4" alignment="I:4">
                        <type-void size="I:1" alignment="I:1"></type-void>
                    </type-pointer>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x407d3b28" loc="115:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="len" ref="0x407d3d08" loc="115:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="maxPayloadLength" ref="0x407d3540" loc="95:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                <documentation loc="85:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                    <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
                    <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
                </documentation>
                <interfacedef-ref qname="Packet"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="setPayloadLength" ref="0x407d5b90" loc="83:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                <documentation loc="69:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                    <short>&#10; Set the length field of the packet.</short>
                    <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
                </documentation>
                <interfacedef-ref qname="Packet"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x407d5850" loc="83:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="len" ref="0x407d5a30" loc="83:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="AMSend" loc="47:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
                <short>&#10; </short>
                <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
            </documentation>
            <function command="" provided="0" name="send" ref="0x407c6570" loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                <documentation loc="49:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                    <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
                    <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMSend"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                            <typename><typedef-ref name="am_addr_t" ref="0x4060f4c8"/></typename>
                        </type-int>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="addr" ref="0x407c6010" loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                            <typename><typedef-ref name="am_addr_t" ref="0x4060f4c8"/></typename>
                        </type-int>
                    </variable>
                    <variable name="msg" ref="0x407c6228" loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="len" ref="0x407c6408" loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="getPayload" ref="0x407dc190" loc="124:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                <documentation loc="115:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                    <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
                    <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMSend"/>
                <type-function size="I:1" alignment="I:1">
                    <type-pointer size="I:4" alignment="I:4">
                        <type-void size="I:1" alignment="I:1"></type-void>
                    </type-pointer>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x407ddd98" loc="124:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="len" ref="0x407dc010" loc="124:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="maxPayloadLength" ref="0x407dd838" loc="112:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                <documentation loc="102:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                    <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
                    <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMSend"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="cancel" ref="0x407df220" loc="85:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                <documentation loc="71:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                    <short>&#10; Cancel a requested transmission.</short>
                    <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMSend"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x407df0c8" loc="85:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function event="" provided="0" name="sendDone" ref="0x407dff10" loc="99:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                <documentation loc="87:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                    <short> &#10; Signaled in response to an accepted send request.</short>
                    <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMSend"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x407dfbb8" loc="99:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="error" ref="0x407dfdb0" loc="99:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="Random" loc="29:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
            <documentation loc="23:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
                <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
                <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
            </documentation>
            <function command="" provided="0" name="rand16" ref="0x40c04c18" loc="41:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
                <documentation loc="37:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
                    <short> &#10; Produces a 32-bit pseudorandom number.</short>
                    <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Random"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                        <typename><typedef-ref name="uint16_t" ref="0x401c2010"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="rand32" ref="0x40c04770" loc="35:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
                <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
                    <short> &#10; Produces a 32-bit pseudorandom number.</short>
                    <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Random"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                        <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="HplAtm128TimerCtrl8" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
                <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; </short>
                <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
            </documentation>
            <function command="" provided="0" name="getControl" ref="0x40c5bf20" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
                <documentation loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
                    <short>Timer control register: Direct access</short>
                </documentation>
                <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
                <type-function size="I:1" alignment="I:1">
                    <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c0ee40"/>
                        <typename><typedef-ref name="Atm128TimerControl_t" ref="0x40c0c0c8"/></typename>
                    </type-tag>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="getInterruptFlag" ref="0x40c56508" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
                <documentation loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
                    <short>Interrupt flag register: Direct access</short>
                </documentation>
                <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
                <type-function size="I:1" alignment="I:1">
                    <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c300c8"/>
                        <typename><typedef-ref name="Atm128_TIFR_t" ref="0x40c302f0"/></typename>
                    </type-tag>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="getInterruptMask" ref="0x40c57a10" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
                <documentation loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
                    <short>Interrupt mask register: Direct access</short>
                </documentation>
                <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
                <type-function size="I:1" alignment="I:1">
                    <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c33950"/>
                        <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x40c33b78"/></typename>
                    </type-tag>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="setInterruptMask" ref="0x40c56058" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
                <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c33950"/>
                            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x40c33b78"/></typename>
                        </type-tag>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="mask" ref="0x40c57ec0" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
                        <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c33950"/>
                            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x40c33b78"/></typename>
                        </type-tag>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="setInterruptFlag" ref="0x40c56b10" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
                <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c300c8"/>
                            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x40c302f0"/></typename>
                        </type-tag>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="flags" ref="0x40c569b8" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
                        <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c300c8"/>
                            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x40c302f0"/></typename>
                        </type-tag>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="setControl" ref="0x40c57558" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
                <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c0ee40"/>
                            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x40c0c0c8"/></typename>
                        </type-tag>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="control" ref="0x40c57400" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
                        <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c0ee40"/>
                            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x40c0c0c8"/></typename>
                        </type-tag>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="Alarm" loc="45:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
                <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
            </documentation>
            <parameters>
                <typedef name="precision_tag" ref="0x4086d488" loc="45:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                    <interfacedef-ref qname="Alarm"/>
                    <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x4086d488"/></type-var>
                </typedef>
                <typedef name="size_type" ref="0x4086d5f0" loc="45:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                    <interfacedef-ref qname="Alarm"/>
                    <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4086d5f0"/></type-var>
                </typedef>
            </parameters>
            <function command="" provided="0" name="getNow" ref="0x4086b8c8" loc="98:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                <documentation loc="94:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                    <short>&#10; Return the current time.</short>
                    <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Alarm"/>
                <type-function size="I:1" alignment="I:1">
                    <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4086d5f0"/></type-var>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function event="" provided="0" name="fired" ref="0x4086c598" loc="67:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                <documentation loc="64:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                    <short>&#10; Signaled when the alarm expires.</short>
                    <long>&#10; Signaled when the alarm expires.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Alarm"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="startAt" ref="0x4086b280" loc="92:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                <documentation loc="79:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                    <short>&#10; Set a single-short alarm to time t0+dt.</short>
                    <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Alarm"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4086d5f0"/></type-var>
                        <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4086d5f0"/></type-var>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="t0" ref="0x4086cf10" loc="92:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                        <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4086d5f0"/></type-var>
                    </variable>
                    <variable name="dt" ref="0x4086b120" loc="92:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                        <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4086d5f0"/></type-var>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="isRunning" ref="0x4086ca08" loc="77:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                <documentation loc="70:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                    <short>&#10; Check if alarm is running.</short>
                    <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Alarm"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="getAlarm" ref="0x4086bd58" loc="105:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                <documentation loc="100:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                    <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
                    <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Alarm"/>
                <type-function size="I:1" alignment="I:1">
                    <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4086d5f0"/></type-var>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="start" ref="0x4086dc20" loc="55:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                <documentation loc="48:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                    <short>&#10; Set a single-short alarm to some time units in the future.</short>
                    <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Alarm"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4086d5f0"/></type-var>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="dt" ref="0x4086dac8" loc="55:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                        <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4086d5f0"/></type-var>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="stop" ref="0x4086c138" loc="62:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                <documentation loc="57:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
                    <short>&#10; Cancel an alarm.</short>
                    <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
                </documentation>
                <interfacedef-ref qname="Alarm"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="Pairing" loc="8:Pairing.nc">
            <documentation loc="1:crypto.h">
                <short>&#10; Authors: Xiaokang Xiong (xkxiong@cityu.edu.hk), Duncan S.Wong (duncan@cityu.edu.hk)&#10; Date: Sep, 2008&#10;</short>
            </documentation>
            <function command="" provided="0" name="pairing" ref="0x40846c10" loc="14:Pairing.nc">
                <interfacedef-ref qname="Pairing"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="P" ref="0x408466b0" loc="14:Pairing.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="Q" ref="0x40846890" loc="14:Pairing.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="E" ref="0x40846aa8" loc="14:Pairing.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="Init" loc="40:/opt/tinyos-2.1.0/tos/interfaces/Init.nc">
            <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
                <short>&#10; </short>
                <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
            </documentation>
            <function command="" provided="0" name="init" ref="0x406b9920" loc="51:/opt/tinyos-2.1.0/tos/interfaces/Init.nc">
                <documentation loc="42:/opt/tinyos-2.1.0/tos/interfaces/Init.nc">
                    <short>&#10; Initialize this component.</short>
                    <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
                </documentation>
                <interfacedef-ref qname="Init"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="HplAtm128Compare" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                <short>&#10; HPL Interface to Atmega128 compare registers.</short>
                <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
            </documentation>
            <parameters>
                <typedef name="size_type" ref="0x40c5a930" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                    <interfacedef-ref qname="HplAtm128Compare"/>
                    <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40c5a930"/></type-var>
                </typedef>
            </parameters>
            <function command="" provided="0" name="test" ref="0x40c52858" loc="65:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                <documentation loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                    <short> &#10; Did compare interrupt occur? &#10; </short>
                    <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Compare"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function event="" provided="0" name="fired" ref="0x40c53808" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                <documentation loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                    <short> Signalled on  interrupt.</short>
                    <long> Signalled on  interrupt. *</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Compare"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="get" ref="0x40c5ae28" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                <documentation loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                    <short> &#10; Get the compare time to fire on.</short>
                    <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Compare"/>
                <type-function size="I:1" alignment="I:1">
                    <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40c5a930"/></type-var>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="reset" ref="0x40c53c10" loc="53:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                <documentation loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                    <short> Clear the compare interrupt flag.</short>
                    <long> Clear the compare interrupt flag. *</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Compare"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="isOn" ref="0x40c52cb8" loc="71:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                <documentation loc="67:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                    <short> &#10; Is compare interrupt on?&#10; </short>
                    <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Compare"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="set" ref="0x40c533c8" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                <documentation loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                    <short> &#10; Set the compare time to fire on.</short>
                    <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Compare"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40c5a930"/></type-var>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="t" ref="0x40c53270" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                        <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40c5a930"/></type-var>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="start" ref="0x40c52038" loc="56:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                <documentation loc="55:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                    <short> Enable the compare interrupt.</short>
                    <long> Enable the compare interrupt. *</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Compare"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="stop" ref="0x40c52430" loc="59:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                <documentation loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
                    <short> Turn off comparee interrupts.</short>
                    <long> Turn off comparee interrupts. *</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Compare"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="NN" loc="36:NN.nc">
            <function command="" provided="0" name="ModSqr" ref="0x409b6580" loc="120:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409b7da0" loc="120:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409b6010" loc="120:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="d" ref="0x409b6210" loc="120:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409b6410" loc="120:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="LShift" ref="0x409be010" loc="100:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409bf840" loc="100:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409bfa40" loc="100:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x409bfc10" loc="100:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                    <variable name="digits" ref="0x409bfe10" loc="100:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="ModSmall" ref="0x409ba178" loc="110:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="b" ref="0x409bbb88" loc="110:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x409bbd88" loc="110:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409ba010" loc="110:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Gcd" ref="0x409b3ca8" loc="128:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409b3538" loc="128:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409b3738" loc="128:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x409b3938" loc="128:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409b3b38" loc="128:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="ModExp" ref="0x409b5598" loc="124:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409b6978" loc="124:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409b6b78" loc="124:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x409b6d78" loc="124:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="cDigits" ref="0x409b5010" loc="124:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                    <variable name="d" ref="0x409b5210" loc="124:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="dDigits" ref="0x409b5418" loc="124:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="AddDigitMult" ref="0x409bd968" loc="104:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                        </type-int>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409bd010" loc="104:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409bd210" loc="104:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x409bd3f0" loc="104:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                        </type-int>
                    </variable>
                    <variable name="d" ref="0x409bd5f0" loc="104:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409bd7f0" loc="104:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Digits" ref="0x409d1490" loc="142:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409d1130" loc="142:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409d1330" loc="142:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="ModSub" ref="0x409b9c40" loc="114:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409b92c8" loc="114:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409b94c8" loc="114:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x409b96c8" loc="114:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="d" ref="0x409b98c8" loc="114:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409b9ac8" loc="114:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Cmp" ref="0x409d4610" loc="134:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409d40a8" loc="134:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409d42a8" loc="134:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409d44a8" loc="134:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="ModMult" ref="0x409b79a8" loc="116:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409b7030" loc="116:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409b7230" loc="116:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x409b7430" loc="116:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="d" ref="0x409b7630" loc="116:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409b7830" loc="116:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="AssignDigit" ref="0x409a4178" loc="84:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                        </type-int>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409a5c18" loc="84:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409a5df8" loc="84:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                        </type-int>
                    </variable>
                    <variable name="digits" ref="0x409a4010" loc="84:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Equal" ref="0x409d1dc8" loc="144:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409d1860" loc="144:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409d1a60" loc="144:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409d1c60" loc="144:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Sub" ref="0x409c2950" loc="94:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409c21e0" loc="94:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409c23e0" loc="94:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x409c25e0" loc="94:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409c27e0" loc="94:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Mult" ref="0x409c14a0" loc="96:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409c2d18" loc="96:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409c2f18" loc="96:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x409c1130" loc="96:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409c1330" loc="96:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Assign" ref="0x409a5810" loc="82:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409a52a8" loc="82:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409a54a8" loc="82:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409a56a8" loc="82:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Decode" ref="0x409a73b8" loc="76:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409a8c90" loc="76:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409a8e90" loc="76:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                    <variable name="b" ref="0x409a7068" loc="76:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
                        </type-pointer>
                    </variable>
                    <variable name="len" ref="0x409a7248" loc="76:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Encode" ref="0x409a7ea8" loc="78:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409a7758" loc="78:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409a7958" loc="78:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                    <variable name="b" ref="0x409a7b58" loc="78:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="len" ref="0x409a7d38" loc="78:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Assign2Exp" ref="0x409a3230" loc="88:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                            <typename><typedef-ref name="NN_UINT2" ref="0x409a87e0"/></typename>
                        </type-int>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409a4cd8" loc="88:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409a4eb8" loc="88:NN.nc">
                        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                            <typename><typedef-ref name="NN_UINT2" ref="0x409a87e0"/></typename>
                        </type-int>
                    </variable>
                    <variable name="digits" ref="0x409a30c8" loc="88:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Mod" ref="0x409bb798" loc="108:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409bddb0" loc="108:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409bb010" loc="108:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="bDigits" ref="0x409bb218" loc="108:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                    <variable name="c" ref="0x409bb418" loc="108:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="cDigits" ref="0x409bb620" loc="108:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="One" ref="0x409d3490" loc="138:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409d3130" loc="138:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409d3330" loc="138:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Div" ref="0x409bf410" loc="98:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409c1858" loc="98:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409c1a58" loc="98:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x409c1c58" loc="98:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="cDigits" ref="0x409c1e60" loc="98:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                    <variable name="d" ref="0x409bf088" loc="98:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="dDigits" ref="0x409bf290" loc="98:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Add" ref="0x409a3dc0" loc="92:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409a3650" loc="92:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409a3850" loc="92:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x409a3a50" loc="92:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409a3c50" loc="92:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="ModAdd" ref="0x409baec8" loc="112:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409ba550" loc="112:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409ba750" loc="112:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x409ba950" loc="112:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="d" ref="0x409bab50" loc="112:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409bad50" loc="112:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Bits" ref="0x409d3cd8" loc="140:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409d3978" loc="140:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409d3b78" loc="140:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="AssignZero" ref="0x409a48d8" loc="86:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409a4578" loc="86:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409a4778" loc="86:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="RShift" ref="0x409beb80" loc="102:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409be440" loc="102:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409be640" loc="102:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x409be810" loc="102:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                    <variable name="digits" ref="0x409bea10" loc="102:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="ModInv" ref="0x409b3180" loc="126:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409b5970" loc="126:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="b" ref="0x409b5b70" loc="126:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="c" ref="0x409b5d70" loc="126:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409b3010" loc="126:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Even" ref="0x409d0540" loc="146:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409d01e0" loc="146:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409d03e0" loc="146:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="Zero" ref="0x409d4d38" loc="136:NN.nc">
                <interfacedef-ref qname="NN"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="a" ref="0x409d49d8" loc="136:NN.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="digits" ref="0x409d4bd8" loc="136:NN.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="Receive" loc="45:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
            <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
                <short>&#10; </short>
                <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
            </documentation>
            <function event="" provided="0" name="receive" ref="0x407d9088" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
                <documentation loc="47:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
                    <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
                    <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Receive"/>
                <type-function size="I:1" alignment="I:1">
                    <type-pointer size="I:4" alignment="I:4">
                        <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                            <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                        </type-tag>
                    </type-pointer>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-void size="I:1" alignment="I:1"></type-void>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x407c9b28" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="payload" ref="0x407c9d08" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-void size="I:1" alignment="I:1"></type-void>
                        </type-pointer>
                    </variable>
                    <variable name="len" ref="0x407c9ee8" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="SimMote" loc="34:/opt/tinyos-2.1.0/tos/lib/tossim/SimMote.nc">
            <documentation loc="24:/opt/tinyos-2.1.0/tos/lib/tossim/SimMote.nc">
                <short>&#10; TOSSIM-specific interface to access a mote's state.</short>
                <long>&#10; TOSSIM-specific interface to access a mote's state. TinyOS programs&#10; should never use this interface.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
            </documentation>
            <function command="" provided="0" name="setEuid" ref="0x407a5788" loc="36:/opt/tinyos-2.1.0/tos/lib/tossim/SimMote.nc">
                <interfacedef-ref qname="SimMote"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="euid" ref="0x407a5630" loc="36:/opt/tinyos-2.1.0/tos/lib/tossim/SimMote.nc">
                        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="getVariableInfo" ref="0x407a4950" loc="39:/opt/tinyos-2.1.0/tos/lib/tossim/SimMote.nc">
                <interfacedef-ref qname="SimMote"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-pointer size="I:4" alignment="I:4">
                                <type-void size="I:1" alignment="I:1"></type-void>
                            </type-pointer>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                                <typename><typedef-ref name="size_t" ref="0x4002e4a8"/></typename>
                            </type-int>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="name" ref="0x407a4418" loc="39:/opt/tinyos-2.1.0/tos/lib/tossim/SimMote.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                        </type-pointer>
                    </variable>
                    <variable name="ptr" ref="0x407a45f0" loc="39:/opt/tinyos-2.1.0/tos/lib/tossim/SimMote.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-pointer size="I:4" alignment="I:4">
                                <type-void size="I:1" alignment="I:1"></type-void>
                            </type-pointer>
                        </type-pointer>
                    </variable>
                    <variable name="len" ref="0x407a47e8" loc="39:/opt/tinyos-2.1.0/tos/lib/tossim/SimMote.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                                <typename><typedef-ref name="size_t" ref="0x4002e4a8"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="turnOff" ref="0x407a30c8" loc="41:/opt/tinyos-2.1.0/tos/lib/tossim/SimMote.nc">
                <interfacedef-ref qname="SimMote"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="turnOn" ref="0x407a4ce0" loc="40:/opt/tinyos-2.1.0/tos/lib/tossim/SimMote.nc">
                <interfacedef-ref qname="SimMote"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="getEuid" ref="0x407a5258" loc="35:/opt/tinyos-2.1.0/tos/lib/tossim/SimMote.nc">
                <interfacedef-ref qname="SimMote"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="isOn" ref="0x407a4010" loc="38:/opt/tinyos-2.1.0/tos/lib/tossim/SimMote.nc">
                <interfacedef-ref qname="SimMote"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="getStartTime" ref="0x407a5bb8" loc="37:/opt/tinyos-2.1.0/tos/lib/tossim/SimMote.nc">
                <interfacedef-ref qname="SimMote"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="Counter" loc="46:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
                <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
                <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
            </documentation>
            <parameters>
                <typedef name="precision_tag" ref="0x408713c8" loc="46:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
                    <interfacedef-ref qname="Counter"/>
                    <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x408713c8"/></type-var>
                </typedef>
                <typedef name="size_type" ref="0x40871530" loc="46:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
                    <interfacedef-ref qname="Counter"/>
                    <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40871530"/></type-var>
                </typedef>
            </parameters>
            <function command="" provided="0" name="get" ref="0x40871a18" loc="53:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
                <documentation loc="48:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
                    <short> &#10; Return counter value.</short>
                    <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Counter"/>
                <type-function size="I:1" alignment="I:1">
                    <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40871530"/></type-var>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="clearOverflow" ref="0x40870510" loc="65:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
                <documentation loc="62:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
                    <short>&#10; Cancel a pending overflow interrupt.</short>
                    <long>&#10; Cancel a pending overflow interrupt.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Counter"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="isOverflowPending" ref="0x40870010" loc="60:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
                <documentation loc="55:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
                    <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
                    <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Counter"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function event="" provided="0" name="overflow" ref="0x40870938" loc="71:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
                <documentation loc="67:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
                    <short>&#10; Signals that the current time has overflowed.</short>
                    <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Counter"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="GeneralIO" loc="27:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
            <documentation loc="23:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
                <short>&#10; </short>
                <long>&#10; @author Joe Polastre&#10;</long>
            </documentation>
            <function command="" provided="0" name="makeInput" ref="0x406d2ee0" loc="33:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
                <interfacedef-ref qname="GeneralIO"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="isInput" ref="0x406d12e8" loc="34:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
                <interfacedef-ref qname="GeneralIO"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="toggle" ref="0x406d2750" loc="31:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
                <interfacedef-ref qname="GeneralIO"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="isOutput" ref="0x406d1ab8" loc="36:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
                <interfacedef-ref qname="GeneralIO"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="get" ref="0x406d2b10" loc="32:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
                <interfacedef-ref qname="GeneralIO"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="makeOutput" ref="0x406d16c0" loc="35:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
                <interfacedef-ref qname="GeneralIO"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="set" ref="0x406d2010" loc="29:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
                <interfacedef-ref qname="GeneralIO"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="clr" ref="0x406d23a0" loc="30:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
                <interfacedef-ref qname="GeneralIO"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="Leds" loc="40:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
            <documentation loc="22:/opt/tinyos-2.1.0/tos/types/Leds.h">
                <short>&#10; Constants for manipulating LEDs.</short>
                <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
            </documentation>
            <function command="" provided="0" name="led0Off" ref="0x40861438" loc="50:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                <documentation loc="47:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                    <short>&#10; Turn off LED 0.</short>
                    <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Leds"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="led0Toggle" ref="0x40861880" loc="56:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                <documentation loc="52:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                    <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
                    <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Leds"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="led1On" ref="0x40861d00" loc="61:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                <documentation loc="58:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                    <short>&#10; Turn on LED 1.</short>
                    <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Leds"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="led1Toggle" ref="0x40860580" loc="72:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                <documentation loc="68:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                    <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
                    <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Leds"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="led2Toggle" ref="0x4085f298" loc="89:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                <documentation loc="85:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                    <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
                    <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Leds"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="get" ref="0x4085f740" loc="106:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                <documentation loc="92:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                    <short>&#10; Get the current LED settings as a bitmask.</short>
                    <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
                </documentation>
                <interfacedef-ref qname="Leds"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="led1Off" ref="0x40860138" loc="66:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                <documentation loc="63:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                    <short>&#10; Turn off LED 1.</short>
                    <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Leds"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="set" ref="0x4085fe80" loc="123:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                <documentation loc="109:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                    <short>&#10; Set the current LED configuration using a bitmask.</short>
                    <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
                </documentation>
                <interfacedef-ref qname="Leds"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="val" ref="0x4085fd28" loc="123:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="led0On" ref="0x40861010" loc="45:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                <documentation loc="42:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                    <short>&#10; Turn on LED 0.</short>
                    <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Leds"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="led2On" ref="0x40860a00" loc="78:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                <documentation loc="75:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                    <short>&#10; Turn on LED 2.</short>
                    <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Leds"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="led2Off" ref="0x40860e28" loc="83:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                <documentation loc="80:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
                    <short>&#10; Turn off LED 2.</short>
                    <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Leds"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="PacketAcknowledgements" loc="33:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
            <documentation loc="23:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
                <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
                <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
            </documentation>
            <function command="" provided="0" name="requestAck" ref="0x40bb91e0" loc="48:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
                <documentation loc="35:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
                    <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
                    <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
                </documentation>
                <interfacedef-ref qname="PacketAcknowledgements"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x40bb9088" loc="48:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="noAck" ref="0x40bb9cd8" loc="60:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
                <documentation loc="50:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
                    <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
                    <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
                </documentation>
                <interfacedef-ref qname="PacketAcknowledgements"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x40bb9b80" loc="60:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="wasAcked" ref="0x40bb7770" loc="74:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
                <documentation loc="62:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
                    <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
                    <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
                </documentation>
                <interfacedef-ref qname="PacketAcknowledgements"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x40bb7618" loc="74:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="PointArith" loc="9:PointArith.nc">
            <documentation loc="1:crypto.h">
                <short>&#10; Authors: Xiaokang Xiong (xkxiong@cityu.edu.hk), Duncan S.Wong (duncan@cityu.edu.hk)&#10; Date: Sep, 2008&#10;</short>
            </documentation>
            <function command="" provided="0" name="trip_proj" ref="0x4084e2a0" loc="49:PointArith.nc">
                <interfacedef-ref qname="PointArith"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="Point_proj" ref="0x40838310"/>
                                <typename><typedef-ref name="Point_proj" ref="0x408388f8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="Point_proj" ref="0x40838310"/>
                                <typename><typedef-ref name="Point_proj" ref="0x408388f8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="P" ref="0x4084ff10" loc="49:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="Point_proj" ref="0x40838310"/>
                                <typename><typedef-ref name="Point_proj" ref="0x408388f8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="Q" ref="0x4084e140" loc="49:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="Point_proj" ref="0x40838310"/>
                                <typename><typedef-ref name="Point_proj" ref="0x408388f8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="map2point" ref="0x4084ec10" loc="55:PointArith.nc">
                <interfacedef-ref qname="PointArith"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                            <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
                        </type-int>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x4084e6b0" loc="55:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="len" ref="0x4084e8a0" loc="55:PointArith.nc">
                        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                            <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
                        </type-int>
                    </variable>
                    <variable name="point" ref="0x4084eaa8" loc="55:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="dcps" ref="0x40865060" loc="84:PointArith.nc">
                <interfacedef-ref qname="PointArith"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="cp" ref="0x4084bcf0" loc="84:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="p" ref="0x4084bed0" loc="84:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="mult_proj" ref="0x40851ab8" loc="34:PointArith.nc">
                <interfacedef-ref qname="PointArith"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="k" ref="0x40851590" loc="34:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="P" ref="0x40851770" loc="34:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="R" ref="0x40851950" loc="34:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="add_proj" ref="0x40853ee8" loc="20:PointArith.nc">
                <interfacedef-ref qname="PointArith"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="Point_proj" ref="0x40838310"/>
                                <typename><typedef-ref name="Point_proj" ref="0x408388f8"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="Point_proj" ref="0x40838310"/>
                                <typename><typedef-ref name="Point_proj" ref="0x408388f8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="P" ref="0x40853990" loc="20:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="Point_proj" ref="0x40838310"/>
                                <typename><typedef-ref name="Point_proj" ref="0x408388f8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="Q" ref="0x40853b70" loc="20:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="R" ref="0x40853d80" loc="20:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:78" alignment="I:1"><struct-ref name="Point_proj" ref="0x40838310"/>
                                <typename><typedef-ref name="Point_proj" ref="0x408388f8"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="mult" ref="0x408527e0" loc="28:PointArith.nc">
                <interfacedef-ref qname="PointArith"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="k" ref="0x408522b8" loc="28:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="P" ref="0x40852498" loc="28:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="R" ref="0x40852678" loc="28:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="trip" ref="0x4084fb08" loc="45:PointArith.nc">
                <interfacedef-ref qname="PointArith"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="P" ref="0x4084f7c8" loc="45:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="Q" ref="0x4084f9a8" loc="45:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="get_y" ref="0x4084c380" loc="61:PointArith.nc">
                <interfacedef-ref qname="PointArith"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="x" ref="0x4084c030" loc="61:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="y" ref="0x4084c220" loc="61:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="doub" ref="0x4084ca68" loc="67:PointArith.nc">
                <interfacedef-ref qname="PointArith"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="P" ref="0x4084c728" loc="67:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="Q" ref="0x4084c908" loc="67:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="mult_proj2" ref="0x4084f420" loc="40:PointArith.nc">
                <interfacedef-ref qname="PointArith"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="bigInt" ref="0x40851ee0" loc="40:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="P" ref="0x4084f0d8" loc="40:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="Q" ref="0x4084f2b8" loc="40:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="neg" ref="0x4084b170" loc="73:PointArith.nc">
                <interfacedef-ref qname="PointArith"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="P" ref="0x4084ce00" loc="73:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="Q" ref="0x4084b010" loc="73:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="mult2" ref="0x40851178" loc="29:PointArith.nc">
                <interfacedef-ref qname="PointArith"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="bigInt" ref="0x40852bc8" loc="29:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="P" ref="0x40852da8" loc="29:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="R" ref="0x40851010" loc="29:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="add" ref="0x40853590" loc="15:PointArith.nc">
                <interfacedef-ref qname="PointArith"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="P" ref="0x40853068" loc="15:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="Q" ref="0x40853248" loc="15:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="R" ref="0x40853428" loc="15:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="cps" ref="0x4084b888" loc="79:PointArith.nc">
                <interfacedef-ref qname="PointArith"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="p" ref="0x4084b538" loc="79:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="cp" ref="0x4084b728" loc="79:PointArith.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="TossimPacketModel" loc="37:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
            <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
                <short>&#10; </short>
                <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
            </documentation>
            <function command="" provided="0" name="send" ref="0x407ecd80" loc="49:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                <documentation loc="39:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                    <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
                    <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;</long>
                </documentation>
                <interfacedef-ref qname="TossimPacketModel"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="node" ref="0x407ec820" loc="49:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    </variable>
                    <variable name="msg" ref="0x407eca38" loc="49:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="len" ref="0x407ecc18" loc="49:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function event="" provided="0" name="receive" ref="0x407f7658" loc="77:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                <documentation loc="71:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                    <short>&#10; Signal that a packet was received.</short>
                    <long>&#10; Signal that a packet was received. Note that there is no buffer&#10; swap: a component using this interface must copy out the message&#10; if it needs it.&#10;</long>
                </documentation>
                <interfacedef-ref qname="TossimPacketModel"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x407f7500" loc="77:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="cancel" ref="0x407f9698" loc="61:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                <documentation loc="51:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                    <short>&#10; Cancel a requested transmission.</short>
                    <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10;</long>
                </documentation>
                <interfacedef-ref qname="TossimPacketModel"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x407f9540" loc="61:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function event="" provided="0" name="sendDone" ref="0x407f7010" loc="68:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                <documentation loc="63:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                    <short> &#10; Signaled in response to an accepted send request.</short>
                    <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10;</long>
                </documentation>
                <interfacedef-ref qname="TossimPacketModel"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x407f9c88" loc="68:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="error" ref="0x407f9e80" loc="68:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function event="" provided="0" name="shouldAck" ref="0x407f7ca0" loc="79:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                <interfacedef-ref qname="TossimPacketModel"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="msg" ref="0x407f7b48" loc="79:/opt/tinyos-2.1.0/tos/lib/tossim/TossimPacketModel.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="HplAtm128Timer" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
                <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
            </documentation>
            <parameters>
                <typedef name="timer_size" ref="0x40c60010" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                    <interfacedef-ref qname="HplAtm128Timer"/>
                    <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40c60010"/></type-var>
                </typedef>
            </parameters>
            <function command="" provided="0" name="off" ref="0x40c5d7c8" loc="89:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                <documentation loc="88:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                    <short> Turn off the clock.</short>
                    <long> Turn off the clock. *</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Timer"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="test" ref="0x40c5ef20" loc="78:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                <documentation loc="74:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                    <short> &#10; Did an overflow interrupt occur?&#10; </short>
                    <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Timer"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="get" ref="0x40c60500" loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                <documentation loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                    <short> &#10; Get the current time.</short>
                    <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Timer"/>
                <type-function size="I:1" alignment="I:1">
                    <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40c60010"/></type-var>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="setScale" ref="0x40c5dd58" loc="95:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                <documentation loc="91:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                    <short> &#10; Turn on the clock.</short>
                    <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Timer"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="scale" ref="0x40c5dc00" loc="95:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="getScale" ref="0x40c5c210" loc="101:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                <documentation loc="97:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                    <short> &#10; Get prescaler setting.</short>
                    <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Timer"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="reset" ref="0x40c5e2f8" loc="66:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                <documentation loc="65:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                    <short> Clear the overflow interrupt flag.</short>
                    <long> Clear the overflow interrupt flag. *</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Timer"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function event="" provided="0" name="overflow" ref="0x40c60ea8" loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                <documentation loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                    <short> Signalled on timer overflow interrupt.</short>
                    <long> Signalled on timer overflow interrupt. *</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Timer"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="isOn" ref="0x40c5d3a0" loc="84:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                <documentation loc="80:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                    <short> &#10; Is overflow interrupt on? &#10; </short>
                    <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Timer"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="set" ref="0x40c60a78" loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                <documentation loc="54:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                    <short> &#10; Set the current time.</short>
                    <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Timer"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40c60010"/></type-var>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="t" ref="0x40c60920" loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                        <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40c60010"/></type-var>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="start" ref="0x40c5e700" loc="69:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                <documentation loc="68:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                    <short> Enable the overflow interrupt.</short>
                    <long> Enable the overflow interrupt. *</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Timer"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="stop" ref="0x40c5eaf8" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                <documentation loc="71:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
                    <short> Turn off overflow interrupts.</short>
                    <long> Turn off overflow interrupts. *</long>
                </documentation>
                <interfacedef-ref qname="HplAtm128Timer"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="AMPacket" loc="50:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
                <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
            </documentation>
            <function command="" provided="0" name="group" ref="0x407e4088" loc="166:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                <documentation loc="153:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                    <short>&#10; Get the AM group of the AM packet.</short>
                    <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMPacket"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="am_group_t" ref="0x4060f268"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="amsg" ref="0x407e5f08" loc="166:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="source" ref="0x407ea930" loc="77:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                <documentation loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                    <short>&#10; Return the AM address of the source of the AM packet.</short>
                    <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMPacket"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                        <typename><typedef-ref name="am_addr_t" ref="0x4060f4c8"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="amsg" ref="0x407ea7d8" loc="77:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="address" ref="0x407db858" loc="57:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                <documentation loc="52:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                    <short>&#10; Return the node's active message address associated with this AM stack.</short>
                    <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMPacket"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                        <typename><typedef-ref name="am_addr_t" ref="0x4060f4c8"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="destination" ref="0x407dbef0" loc="67:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                <documentation loc="59:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                    <short>&#10; Return the AM address of the destination of the AM packet.</short>
                    <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMPacket"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                        <typename><typedef-ref name="am_addr_t" ref="0x4060f4c8"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="amsg" ref="0x407dbd98" loc="67:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="setSource" ref="0x407e8238" loc="110:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                <documentation loc="94:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                    <short>&#10; Set the AM address of the source field of the AM packet.</short>
                    <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMPacket"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                            <typename><typedef-ref name="am_addr_t" ref="0x4060f4c8"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="amsg" ref="0x407e9eb0" loc="110:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="addr" ref="0x407e80d8" loc="110:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                            <typename><typedef-ref name="am_addr_t" ref="0x4060f4c8"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="setDestination" ref="0x407e9530" loc="92:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                <documentation loc="79:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                    <short>&#10; Set the AM address of the destination field of the AM packet.</short>
                    <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMPacket"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                            <typename><typedef-ref name="am_addr_t" ref="0x4060f4c8"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="amsg" ref="0x407e91c8" loc="92:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="addr" ref="0x407e93d0" loc="92:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                            <typename><typedef-ref name="am_addr_t" ref="0x4060f4c8"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="type" ref="0x407e6a28" loc="136:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                <documentation loc="127:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                    <short>&#10; Return the AM type of the AM packet.</short>
                    <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMPacket"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="am_id_t" ref="0x4060f010"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="amsg" ref="0x407e68d0" loc="136:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="setType" ref="0x407e5580" loc="151:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                <documentation loc="138:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                    <short>&#10; Set the AM type of the AM packet.</short>
                    <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMPacket"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="am_id_t" ref="0x4060f010"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="amsg" ref="0x407e5250" loc="151:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="t" ref="0x407e5420" loc="151:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="am_id_t" ref="0x4060f010"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="isForMe" ref="0x407e8dd8" loc="125:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                <documentation loc="112:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                    <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
                    <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMPacket"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="amsg" ref="0x407e8c80" loc="125:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="setGroup" ref="0x407e4d08" loc="176:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                <documentation loc="168:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                    <short>&#10; Set the AM group field of a packet.</short>
                    <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMPacket"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="am_group_t" ref="0x4060f268"/></typename>
                        </type-int>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="amsg" ref="0x407e49a8" loc="176:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="grp" ref="0x407e4ba8" loc="176:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                            <typename><typedef-ref name="am_group_t" ref="0x4060f268"/></typename>
                        </type-int>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="localGroup" ref="0x407e15a0" loc="184:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                <documentation loc="178:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
                    <short>&#10; Provides the current AM group of this communication interface.</short>
                    <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
                </documentation>
                <interfacedef-ref qname="AMPacket"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="am_group_t" ref="0x4060f268"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="Scheduler" loc="41:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
            <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
                <short> &#10; The interface to a TinyOS task scheduler.</short>
                <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
            </documentation>
            <function command="" provided="0" name="init" ref="0x40631d28" loc="46:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
                <documentation loc="43:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
                    <short> &#10; Initialize the scheduler.</short>
                    <long> &#10; Initialize the scheduler.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Scheduler"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="taskLoop" ref="0x40387670" loc="61:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
                <documentation loc="56:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
                    <short>&#10; Enter an infinite task-running loop.</short>
                    <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Scheduler"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
            <function command="" provided="0" name="runNextTask" ref="0x403871a8" loc="54:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
                <documentation loc="48:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
                    <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
                    <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
                </documentation>
                <interfacedef-ref qname="Scheduler"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                    </type-int>
                    <function-parameters>
                    </function-parameters>
                </type-function>
                <parameters>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="BaseField" loc="8:BaseField.nc">
            <documentation loc="1:crypto.h">
                <short>&#10; Authors: Xiaokang Xiong (xkxiong@cityu.edu.hk), Duncan S.Wong (duncan@cityu.edu.hk)&#10; Date: Sep, 2008&#10;</short>
            </documentation>
            <function command="" provided="0" name="dcps" ref="0x40841438" loc="57:BaseField.nc">
                <interfacedef-ref qname="BaseField"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="cpElement" ref="0x408410e8" loc="57:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                    <variable name="E" ref="0x408412d8" loc="57:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="mult" ref="0x40843030" loc="26:BaseField.nc">
                <interfacedef-ref qname="BaseField"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="A" ref="0x40845ad0" loc="26:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="B" ref="0x40845cc0" loc="26:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="C" ref="0x40845eb0" loc="26:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="inver" ref="0x40843e78" loc="39:BaseField.nc">
                <interfacedef-ref qname="BaseField"/>
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                    </type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="A" ref="0x40843b28" loc="39:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="B" ref="0x40843d18" loc="39:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="neg" ref="0x40842588" loc="45:BaseField.nc">
                <interfacedef-ref qname="BaseField"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="A" ref="0x40842238" loc="45:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="B" ref="0x40842428" loc="45:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="cps" ref="0x40842cc8" loc="51:BaseField.nc">
                <interfacedef-ref qname="BaseField"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="E" ref="0x40842930" loc="51:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="cpElement" ref="0x40842b68" loc="51:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="add" ref="0x40848de8" loc="14:BaseField.nc">
                <interfacedef-ref qname="BaseField"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="A" ref="0x408488a0" loc="14:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="B" ref="0x40848a90" loc="14:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="C" ref="0x40848c80" loc="14:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="sub" ref="0x40845718" loc="20:BaseField.nc">
                <interfacedef-ref qname="BaseField"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="A" ref="0x408451d0" loc="20:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="B" ref="0x408453c0" loc="20:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="C" ref="0x408455b0" loc="20:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="cube" ref="0x40843738" loc="32:BaseField.nc">
                <interfacedef-ref qname="BaseField"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="A" ref="0x408433e8" loc="32:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                    <variable name="B" ref="0x408435d8" loc="32:BaseField.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
        <interfacedef qname="GetRandom" loc="11:GetRandom.nc">
            <documentation loc="1:crypto.h">
                <short>&#10; Authors: Xiaokang Xiong (xkxiong@cityu.edu.hk), Duncan S.Wong (duncan@cityu.edu.hk)&#10; Date: Sep, 2008&#10;</short>
            </documentation>
            <function command="" provided="0" name="bigint" ref="0x40864a98" loc="20:GetRandom.nc">
                <interfacedef-ref qname="GetRandom"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="bi" ref="0x40864940" loc="20:GetRandom.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                            </type-int>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="elmt" ref="0x40864598" loc="15:GetRandom.nc">
                <interfacedef-ref qname="GetRandom"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="re" ref="0x40864440" loc="15:GetRandom.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
            <function command="" provided="0" name="generator" ref="0x4085b058" loc="25:GetRandom.nc">
                <interfacedef-ref qname="GetRandom"/>
                <type-function size="I:1" alignment="I:1">
                    <type-void size="I:1" alignment="I:1"></type-void>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <parameters>
                    <variable name="generator" ref="0x40864ec0" loc="25:GetRandom.nc">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
                            </type-tag>
                        </type-pointer>
                    </variable>
                </parameters>
            </function>
        </interfacedef>
    </interfacedefs>
    <tags>
        <struct loc="30:/opt/tinyos-2.1.0/tos/lib/timer/Timer.h" ref="0x408725b8" defined="" size="I:4" alignment="I:4">
            <field name="notUsed" ref="0x408726c8" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </struct>
        <attribute name="bnd" loc="9:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401bb010" defined="" size="I:8" alignment="I:4">
            <field name="lo" ref="0x401bb270" bit-offset="I:0" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-void size="I:1" alignment="I:1"></type-void>
                </type-pointer>
            </field>
            <field name="hi" ref="0x401bb2d0" bit-offset="I:32" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-void size="I:1" alignment="I:1"></type-void>
                </type-pointer>
            </field>
        </attribute>
        <enum loc="83:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h" ref="0x4060c3e8" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct name="itimerspec" loc="162:/usr/include/time.h" ref="0x40579010" defined="" size="I:16" alignment="I:4">
            <field name="it_interval" ref="0x40579448" bit-offset="I:0" size="I:8">
                <type-tag size="I:8" alignment="I:4"><struct-ref name="timespec" ref="0x402eda70"/></type-tag>
            </field>
            <field name="it_value" ref="0x405794a8" bit-offset="I:64" size="I:8">
                <type-tag size="I:8" alignment="I:4"><struct-ref name="timespec" ref="0x402eda70"/></type-tag>
            </field>
        </struct>
        <nx_struct name="tossim_metadata" loc="18:/opt/tinyos-2.1.0/tos/lib/tossim/TossimRadioMsg.h" ref="0x4060d260" defined="" size="I:4" alignment="I:1">
            <field name="strength" ref="0x4060d7f0" bit-offset="I:0" size="I:1">
                <type-int cname="signed char" size="I:1" alignment="I:1" network="nx_int8_t">
                    <typename><typedef-ref name="nx_int8_t" ref="0x402a75a0"/></typename>
                </type-int>
            </field>
            <field name="ack" ref="0x4060d850" bit-offset="I:8" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                    <typename><typedef-ref name="nx_uint8_t" ref="0x402a9728"/></typename>
                </type-int>
            </field>
            <field name="time" ref="0x4060d8b0" bit-offset="I:16" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
                    <typename><typedef-ref name="nx_uint16_t" ref="0x402a9ba0"/></typename>
                </type-int>
            </field>
        </nx_struct>
        <struct loc="31:/opt/tinyos-2.1.0/tos/lib/timer/Timer.h" ref="0x408729f8" defined="" size="I:4" alignment="I:4">
            <field name="notUsed" ref="0x40872b08" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </struct>
        <enum loc="81:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c0f6b0" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct name="gain_entry" loc="45:/opt/tinyos-2.1.0/tos/lib/tossim/sim_gain.h" ref="0x4052f6c0" defined="" size="I:16" alignment="I:4">
            <field name="mote" ref="0x4052fb88" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="gain" ref="0x4052fbe8" bit-offset="I:32" size="I:8">
                <type-float cname="double" size="I:8" alignment="I:8"></type-float>
            </field>
            <field name="next" ref="0x4052fc48" bit-offset="I:96" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-tag size="I:16" alignment="I:4"><struct-ref name="gain_entry" ref="0x4052f6c0"/></type-tag>
                </type-pointer>
            </field>
        </struct>
        <struct loc="78:/usr/include/wchar.h" ref="0x403f40b0" defined="" size="I:8" alignment="I:4">
            <field name="__count" ref="0x403f41c0" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__value" ref="0x403f4220" bit-offset="I:32" size="I:4">
                <type-tag size="I:4" alignment="I:4"><union-ref ref="0x403f6d68"/></type-tag>
            </field>
        </struct>
        <attribute name="deputy_scope"  loc="NONE" ref="0x4002cc28" size="V:" alignment="V:">
        </attribute>
        <struct name="timeval" loc="69:/usr/include/bits/time.h" ref="0x402f2010" defined="" size="I:8" alignment="I:4">
            <field name="tv_sec" ref="0x402f23d8" bit-offset="I:0" size="I:4">
                <type-int cname="long" size="I:4" alignment="I:4">
                    <typename><typedef-ref name="__time_t" ref="0x402e2970"/></typename>
                </type-int>
            </field>
            <field name="tv_usec" ref="0x402f2438" bit-offset="I:32" size="I:4">
                <type-int cname="long" size="I:4" alignment="I:4">
                    <typename><typedef-ref name="__suseconds_t" ref="0x402e2e48"/></typename>
                </type-int>
            </field>
        </struct>
        <struct loc="117:/usr/include/bits/pthreadtypes.h" ref="0x402fef48" defined="" size="I:44" alignment="I:4">
            <field name="__lock" ref="0x402fd070" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__futex" ref="0x402fd0d0" bit-offset="I:32" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__total_seq" ref="0x402fd130" bit-offset="I:64" size="I:8">
                <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
            </field>
            <field name="__wakeup_seq" ref="0x402fd190" bit-offset="I:128" size="I:8">
                <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
            </field>
            <field name="__woken_seq" ref="0x402fd1f0" bit-offset="I:192" size="I:8">
                <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
            </field>
            <field name="__mutex" ref="0x402fd250" bit-offset="I:256" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-void size="I:1" alignment="I:1"></type-void>
                </type-pointer>
            </field>
            <field name="__nwaiters" ref="0x402fd2b0" bit-offset="I:288" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__broadcast_seq" ref="0x402fd310" bit-offset="I:320" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
            </field>
        </struct>
        <enum loc="48:/usr/include/ctype.h" ref="0x403e7010" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct name="sim_gain_noise" loc="3:/opt/tinyos-2.1.0/tos/lib/tossim/sim_gain.c" ref="0x405389a8" defined="" size="I:16" alignment="I:4">
            <field name="mean" ref="0x40538d18" bit-offset="I:0" size="I:8">
                <type-float cname="double" size="I:8" alignment="I:8"></type-float>
            </field>
            <field name="range" ref="0x40538d78" bit-offset="I:64" size="I:8">
                <type-float cname="double" size="I:8" alignment="I:8"></type-float>
            </field>
        </struct>
        <attribute name="nonnull" loc="8:/usr/lib/ncc/deputy_nodeputy.h" ref="0x4002eb28" defined="" size="I:0" alignment="I:1">
        </attribute>
        <struct loc="22:/usr/include/_G_config.h" ref="0x403f4750" defined="" size="I:12" alignment="I:4">
            <field name="__pos" ref="0x403f4860" bit-offset="I:0" size="I:4">
                <type-int cname="long" size="I:4" alignment="I:4">
                    <typename><typedef-ref name="__off_t" ref="0x402e33a8"/></typename>
                </type-int>
            </field>
            <field name="__state" ref="0x403f48c0" bit-offset="I:32" size="I:8">
                <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x403f40b0"/>
                    <typename><typedef-ref name="__mbstate_t" ref="0x403f42d8"/></typename>
                </type-tag>
            </field>
        </struct>
        <attribute name="number"  loc="NONE" ref="0x4002acf0" size="V:" alignment="V:">
        </attribute>
        <struct loc="161:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c30f38" defined="" size="I:1" alignment="I:1">
            <field name="psr321" ref="0x40c2f070" bit-offset="I:0" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="psr0" ref="0x40c2f0d0" bit-offset="I:1" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="pud" ref="0x40c2f130" bit-offset="I:2" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="acme" ref="0x40c2f190" bit-offset="I:3" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="rsvd" ref="0x40c2f1f0" bit-offset="I:4" bit-size="I:3">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="tsm" ref="0x40c2f250" bit-offset="I:7" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
        </struct>
        <struct name="MidElement2" loc="33:crypto.h" ref="0x408390d0" defined="" size="I:78" alignment="I:1">
            <field name="mid" ref="0x40839400" bit-offset="I:0" size="I:78">
                <type-array elements="I:3" size="I:78" alignment="I:1">
                    <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                        <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                    </type-tag>
                </type-array>
            </field>
        </struct>
        <struct ref="0x40025f48" size="V:" alignment="V:">
        </struct>
        <struct name="node" loc="51:/opt/tinyos-2.1.0/tos/lib/tossim/heap.c" ref="0x404a64f8" defined="" size="I:12" alignment="I:4">
            <field name="data" ref="0x404a6848" bit-offset="I:0" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-void size="I:1" alignment="I:1"></type-void>
                </type-pointer>
            </field>
            <field name="key" ref="0x404a68a8" bit-offset="I:32" size="I:8">
                <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
            </field>
        </struct>
        <union loc="150:/usr/include/bits/pthreadtypes.h" ref="0x402ffd98" defined="" size="I:32" alignment="I:4">
            <field name="__data" ref="0x402ffea8" bit-offset="I:0" size="I:32">
                <type-tag size="I:32" alignment="I:4"><struct-ref ref="0x402ff490"/></type-tag>
            </field>
            <field name="__size" ref="0x402fff08" bit-offset="I:0" size="I:32">
                <type-array elements="I:32" size="I:32" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
            <field name="__align" ref="0x402fff68" bit-offset="I:0" size="I:4">
                <type-int cname="long" size="I:4" alignment="I:4"></type-int>
            </field>
        </union>
        <struct loc="291:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c210f0" defined="" size="I:1" alignment="I:1">
            <field name="ocie1c" ref="0x40c21200" bit-offset="I:0" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocie3c" ref="0x40c21260" bit-offset="I:1" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="toie3" ref="0x40c212c0" bit-offset="I:2" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocie3b" ref="0x40c21320" bit-offset="I:3" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocie3a" ref="0x40c21380" bit-offset="I:4" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ticie3" ref="0x40c213e0" bit-offset="I:5" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="rsvd" ref="0x40c21440" bit-offset="I:6" bit-size="I:2">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
        </struct>
        <struct loc="114:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c0bda8" defined="" size="I:1" alignment="I:1">
            <field name="tcr0ub" ref="0x40c0beb8" bit-offset="I:0" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocr0ub" ref="0x40c0bf18" bit-offset="I:1" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="tcn0ub" ref="0x40c0bf78" bit-offset="I:2" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="as0" ref="0x40c34010" bit-offset="I:3" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="rsvd" ref="0x40c34070" bit-offset="I:4" bit-size="I:4">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
        </struct>
        <union loc="303:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c4ab10" defined="" size="I:1" alignment="I:1">
            <field name="flat" ref="0x40c4ac20" bit-offset="I:0" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="bits" ref="0x40c4ac80" bit-offset="I:0" size="I:1">
                <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40c4a620"/></type-tag>
            </field>
        </union>
        <nx_struct name="serial_packet" loc="120:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h" ref="0x40619010" defined="" size="I:7" alignment="I:1">
            <field name="header" ref="0x40619498" bit-offset="I:0" size="I:7">
                <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0x40608330"/>
                    <typename><typedef-ref name="serial_header_t" ref="0x40608d90"/></typename>
                </type-tag>
            </field>
            <field name="data" ref="0x406194f8" bit-offset="I:56" size="I:0">
                <type-array elements="I:0" size="I:0" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                        <typename><typedef-ref name="nx_uint8_t" ref="0x402a9728"/></typename>
                    </type-int>
                </type-array>
            </field>
        </nx_struct>
        <attribute name="integer"  loc="NONE" ref="0x4002ab88" size="V:" alignment="V:">
        </attribute>
        <attribute name="exactlyonce" loc="91:/opt/tinyos-2.1.0/tos/lib/tossim/tos.h" ref="0x4045c010" defined="" size="I:0" alignment="I:1">
        </attribute>
        <union name="message_footer" loc="46:/opt/tinyos-2.1.0/tos/lib/tossim/platform_message.h" ref="0x406185f8" defined="" size="I:2" alignment="I:1">
            <field name="tossim" ref="0x40618938" bit-offset="I:0" size="I:2">
                <type-tag size="I:2" alignment="I:1"><nx_struct-ref name="tossim_footer" ref="0x4060ec78"/>
                    <typename><typedef-ref name="tossim_footer_t" ref="0x4060d048"/></typename>
                </type-tag>
            </field>
        </union>
        <struct loc="144:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c31b28" defined="" size="I:1" alignment="I:1">
            <field name="tov0" ref="0x40c31c38" bit-offset="I:0" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocf0" ref="0x40c31c98" bit-offset="I:1" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="tov1" ref="0x40c31cf8" bit-offset="I:2" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocf1b" ref="0x40c31d58" bit-offset="I:3" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocf1a" ref="0x40c31db8" bit-offset="I:4" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="icf1" ref="0x40c31e18" bit-offset="I:5" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="tov2" ref="0x40c31e78" bit-offset="I:6" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocf2" ref="0x40c31ed8" bit-offset="I:7" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
        </struct>
        <union name="message_metadata" loc="50:/opt/tinyos-2.1.0/tos/lib/tossim/platform_message.h" ref="0x40618c18" defined="" size="I:4" alignment="I:1">
            <field name="tossim" ref="0x406176d8" bit-offset="I:0" size="I:4">
                <type-tag size="I:4" alignment="I:1"><nx_struct-ref name="tossim_metadata" ref="0x4060d260"/>
                    <typename><typedef-ref name="tossim_metadata_t" ref="0x4060d968"/></typename>
                </type-tag>
            </field>
        </union>
        <attribute name="combine"  loc="NONE" ref="0x4002c890" size="V:" alignment="V:">
            <field name="fn" ref="0x4002c9a0" bit-offset="U:" bit-size="U:">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
        </attribute>
        <struct name="drand48_data" loc="418:/usr/include/stdlib.h" ref="0x40313d08" defined="" size="I:24" alignment="I:4">
            <field name="__x" ref="0x403124d8" bit-offset="I:0" size="I:6">
                <type-array elements="I:3" size="I:6" alignment="I:2">
                    <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
                </type-array>
            </field>
            <field name="__old_x" ref="0x40312538" bit-offset="I:48" size="I:6">
                <type-array elements="I:3" size="I:6" alignment="I:2">
                    <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
                </type-array>
            </field>
            <field name="__c" ref="0x40312598" bit-offset="I:96" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
            </field>
            <field name="__init" ref="0x403125f8" bit-offset="I:112" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
            </field>
            <field name="__a" ref="0x40312658" bit-offset="I:128" size="I:8">
                <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
            </field>
        </struct>
        <union loc="191:/usr/include/bits/pthreadtypes.h" ref="0x40304518" defined="" size="I:8" alignment="I:4">
            <field name="__size" ref="0x40304628" bit-offset="I:0" size="I:8">
                <type-array elements="I:8" size="I:8" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
            <field name="__align" ref="0x40304688" bit-offset="I:0" size="I:4">
                <type-int cname="long" size="I:4" alignment="I:4"></type-int>
            </field>
        </union>
        <struct loc="98:/usr/include/stdlib.h" ref="0x402d1918" defined="" size="I:8" alignment="I:4">
            <field name="quot" ref="0x402d1a28" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="rem" ref="0x402d1a88" bit-offset="I:32" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </struct>
        <enum loc="91:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h" ref="0x4060cef0" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <enum loc="673:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h" ref="0x406647c0" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <nx_struct name="serial_header" loc="112:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h" ref="0x40608330" defined="" size="I:7" alignment="I:1">
            <field name="dest" ref="0x40608b58" bit-offset="I:0" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
                    <typename><typedef-ref name="nx_am_addr_t" ref="0x405ffd60"/></typename>
                </type-int>
            </field>
            <field name="src" ref="0x40608bb8" bit-offset="I:16" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
                    <typename><typedef-ref name="nx_am_addr_t" ref="0x405ffd60"/></typename>
                </type-int>
            </field>
            <field name="length" ref="0x40608c18" bit-offset="I:32" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                    <typename><typedef-ref name="nx_uint8_t" ref="0x402a9728"/></typename>
                </type-int>
            </field>
            <field name="group" ref="0x40608c78" bit-offset="I:40" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                    <typename><typedef-ref name="nx_am_group_t" ref="0x405ffac8"/></typename>
                </type-int>
            </field>
            <field name="type" ref="0x40608cd8" bit-offset="I:48" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                    <typename><typedef-ref name="nx_am_id_t" ref="0x405ff728"/></typename>
                </type-int>
            </field>
        </nx_struct>
        <struct loc="29:/usr/include/bits/sigset.h" ref="0x402ed408" defined="" size="I:128" alignment="I:4">
            <field name="__val" ref="0x402ed518" bit-offset="I:0" size="I:128">
                <type-array elements="I:32" size="I:128" alignment="I:4">
                    <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
                </type-array>
            </field>
        </struct>
        <enum loc="120:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128hardware.h" ref="0x406b1720" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <union name="message_header" loc="41:/opt/tinyos-2.1.0/tos/lib/tossim/platform_message.h" ref="0x40619e00" defined="" size="I:7" alignment="I:1">
            <field name="tossim" ref="0x406182d0" bit-offset="I:0" size="I:7">
                <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="tossim_header" ref="0x4060e010"/>
                    <typename><typedef-ref name="tossim_header_t" ref="0x4060ea70"/></typename>
                </type-tag>
            </field>
            <field name="serial" ref="0x40618330" bit-offset="I:0" size="I:7">
                <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0x40608330"/>
                    <typename><typedef-ref name="serial_header_t" ref="0x40608d90"/></typename>
                </type-tag>
            </field>
        </union>
        <enum loc="135:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h" ref="0x406bdb50" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct name="timespec" loc="121:/usr/include/time.h" ref="0x402eda70" defined="" size="I:8" alignment="I:4">
            <field name="tv_sec" ref="0x402eddd0" bit-offset="I:0" size="I:4">
                <type-int cname="long" size="I:4" alignment="I:4">
                    <typename><typedef-ref name="__time_t" ref="0x402e2970"/></typename>
                </type-int>
            </field>
            <field name="tv_nsec" ref="0x402ede30" bit-offset="I:32" size="I:4">
                <type-int cname="long" size="I:4" alignment="I:4"></type-int>
            </field>
        </struct>
        <attribute name="count" loc="11:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401bbca0" defined="" size="I:4" alignment="I:4">
            <field name="n" ref="0x401bbe50" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </attribute>
        <struct name="Element" loc="28:crypto.h" ref="0x4083a858" defined="" size="I:26" alignment="I:1">
            <field name="hi" ref="0x4083ad80" bit-offset="I:0" size="I:13">
                <type-array elements="I:13" size="I:13" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </type-array>
            </field>
            <field name="lo" ref="0x4083ade0" bit-offset="I:104" size="I:13">
                <type-array elements="I:13" size="I:13" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </type-array>
            </field>
        </struct>
        <enum loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c15958" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <union loc="76:/usr/include/bits/pthreadtypes.h" ref="0x402f9948" defined="" size="I:24" alignment="I:4">
            <field name="__data" ref="0x402f9a58" bit-offset="I:0" size="I:24">
                <type-tag size="I:24" alignment="I:4"><struct-ref name="__pthread_mutex_s" ref="0x402fa730"/></type-tag>
            </field>
            <field name="__size" ref="0x402f9ab8" bit-offset="I:0" size="I:24">
                <type-array elements="I:24" size="I:24" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
            <field name="__align" ref="0x402f9b18" bit-offset="I:0" size="I:4">
                <type-int cname="long" size="I:4" alignment="I:4"></type-int>
            </field>
        </union>
        <union loc="89:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c0ee40" defined="" size="I:1" alignment="I:1">
            <field name="flat" ref="0x40c0ef50" bit-offset="I:0" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="bits" ref="0x40c0c010" bit-offset="I:0" size="I:1">
                <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40c0e9d0"/></type-tag>
            </field>
        </union>
        <attribute name="bnd_nok" loc="10:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401bb660" defined="" size="I:8" alignment="I:4">
            <field name="lo" ref="0x401bb8c0" bit-offset="I:0" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-void size="I:1" alignment="I:1"></type-void>
                </type-pointer>
            </field>
            <field name="hi" ref="0x401bb920" bit-offset="I:32" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-void size="I:1" alignment="I:1"></type-void>
                </type-pointer>
            </field>
        </attribute>
        <struct name="timezone" loc="57:/usr/include/sys/time.h" ref="0x404da458" defined="" size="I:8" alignment="I:4">
            <field name="tz_minuteswest" ref="0x404da7b0" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="tz_dsttime" ref="0x404da810" bit-offset="I:32" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </struct>
        <enum loc="284:/usr/include/math.h" ref="0x403e01d8" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <enum loc="129:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h" ref="0x406bd580" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <enum loc="38:sha1.h" ref="0x4064da48" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <enum loc="40:/opt/tinyos-2.1.0/tos/types/TinyError.h" ref="0x404a7010" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct name="sim_event" loc="45:/opt/tinyos-2.1.0/tos/lib/tossim/sim_event_queue.h" ref="0x4044ab90" defined="" size="I:28" alignment="I:4">
            <field name="time" ref="0x40454e68" bit-offset="I:0" size="I:8">
                <type-int cname="long long" size="I:8" alignment="I:8">
                    <typename><typedef-ref name="sim_time_t" ref="0x40445c80"/></typename>
                </type-int>
            </field>
            <field name="mote" ref="0x40454ec8" bit-offset="I:64" size="I:4">
                <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="force" ref="0x40454f28" bit-offset="I:96" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                </type-int>
            </field>
            <field name="cancelled" ref="0x40454f88" bit-offset="I:104" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                </type-int>
            </field>
            <field name="data" ref="0x40453010" bit-offset="I:128" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-void size="I:1" alignment="I:1"></type-void>
                </type-pointer>
            </field>
            <field name="handle" ref="0x40453070" bit-offset="I:160" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-function size="I:1" alignment="I:1">
                        <type-void size="I:1" alignment="I:1"></type-void>
                        <function-parameters>
                            <type-pointer size="I:4" alignment="I:4">
                                <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x4044ab90"/>
                                    <typename><typedef-ref name="sim_event_t" ref="0x4044adf8"/></typename>
                                </type-tag>
                            </type-pointer>
                        </function-parameters>
                    </type-function>
                </type-pointer>
            </field>
            <field name="cleanup" ref="0x404530e0" bit-offset="I:192" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-function size="I:1" alignment="I:1">
                        <type-void size="I:1" alignment="I:1"></type-void>
                        <function-parameters>
                            <type-pointer size="I:4" alignment="I:4">
                                <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x4044ab90"/>
                                    <typename><typedef-ref name="sim_event_t" ref="0x4044adf8"/></typename>
                                </type-tag>
                            </type-pointer>
                        </function-parameters>
                    </type-function>
                </type-pointer>
            </field>
        </struct>
        <struct name="_IO_jump_t" ref="0x403fb320" size="V:" alignment="V:">
        </struct>
        <enum loc="73:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c10c98" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <enum loc="43:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h" ref="0x404ede68" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <nx_struct name="tossim_footer" loc="14:/opt/tinyos-2.1.0/tos/lib/tossim/TossimRadioMsg.h" ref="0x4060ec78" defined="" size="I:2" alignment="I:1">
            <field name="crc" ref="0x4060ef78" bit-offset="I:0" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nxle_uint16_t">
                    <typename><typedef-ref name="nxle_uint16_t" ref="0x402b0018"/></typename>
                </type-int>
            </field>
        </nx_struct>
        <enum name="__codecvt_result" loc="206:/usr/include/libio.h" ref="0x403fbf28" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct name="sim_packet" loc="51:/opt/tinyos-2.1.0/tos/lib/tossim/sim_packet.h" ref="0x405f6148" defined="" size="I:0" alignment="I:1">
        </struct>
        <enum loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h" ref="0x406af190" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <enum loc="26:/opt/tinyos-2.1.0/tos/types/AM.h" ref="0x4060f978" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct name="ExtElement2" loc="37:crypto.h" ref="0x408396a8" defined="" size="I:156" alignment="I:1">
            <field name="ext" ref="0x40839a00" bit-offset="I:0" size="I:156">
                <type-array elements="I:2" size="I:156" alignment="I:1">
                    <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                        <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
                    </type-tag>
                </type-array>
            </field>
        </struct>
        <enum loc="202:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c2d948" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct loc="144:/usr/include/bits/types.h" ref="0x402e3b70" defined="" size="I:8" alignment="I:4">
            <field name="__val" ref="0x402e3c80" bit-offset="I:0" size="I:8">
                <type-array elements="I:2" size="I:8" alignment="I:4">
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                </type-array>
            </field>
        </struct>
        <enum loc="14:/opt/tinyos-2.1.0/tos/types/AM.h" ref="0x4060f608" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct name="__pthread_internal_slist" loc="67:/usr/include/bits/pthreadtypes.h" ref="0x402fa010" defined="" size="I:4" alignment="I:4">
            <field name="__next" ref="0x402fa408" bit-offset="I:0" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-tag size="I:4" alignment="I:4"><struct-ref name="__pthread_internal_slist" ref="0x402fa010"/></type-tag>
                </type-pointer>
            </field>
        </struct>
        <enum loc="10:crypto.h" ref="0x4083b670" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <enum loc="176:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c2f778" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <enum loc="117:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h" ref="0x406be810" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <union loc="111:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c34200" defined="" size="I:1" alignment="I:1">
            <field name="flat" ref="0x40c34310" bit-offset="I:0" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="bits" ref="0x40c34370" bit-offset="I:0" size="I:1">
                <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40c0bda8"/></type-tag>
            </field>
        </union>
        <nx_struct name="serial_metadata" loc="125:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h" ref="0x40619840" defined="" size="I:1" alignment="I:1">
            <field name="ack" ref="0x40619b38" bit-offset="I:0" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                    <typename><typedef-ref name="nx_uint8_t" ref="0x402a9728"/></typename>
                </type-int>
            </field>
        </nx_struct>
        <enum name="__itimer_which" loc="93:/usr/include/sys/time.h" ref="0x404e4b60" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <attribute name="atmostonce" loc="89:/opt/tinyos-2.1.0/tos/lib/tossim/tos.h" ref="0x4045eb78" defined="" size="I:0" alignment="I:1">
        </attribute>
        <union loc="288:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c215e8" defined="" size="I:1" alignment="I:1">
            <field name="flat" ref="0x40c216f8" bit-offset="I:0" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="bits" ref="0x40c21758" bit-offset="I:0" size="I:1">
                <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40c210f0"/></type-tag>
            </field>
        </union>
        <struct loc="92:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c0e9d0" defined="" size="I:1" alignment="I:1">
            <field name="cs" ref="0x40c0eae0" bit-offset="I:0" bit-size="I:3">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="wgm1" ref="0x40c0eb40" bit-offset="I:3" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="com" ref="0x40c0eba0" bit-offset="I:4" bit-size="I:2">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="wgm0" ref="0x40c0ec00" bit-offset="I:6" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="foc" ref="0x40c0ec60" bit-offset="I:7" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
        </struct>
        <union loc="132:/usr/include/bits/pthreadtypes.h" ref="0x402fde90" defined="" size="I:4" alignment="I:4">
            <field name="__size" ref="0x402fdfa0" bit-offset="I:0" size="I:4">
                <type-array elements="I:4" size="I:4" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
            <field name="__align" ref="0x40301018" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </union>
        <attribute name="hwevent"  loc="NONE" ref="0x4002c448" size="V:" alignment="V:">
        </attribute>
        <struct loc="141:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h" ref="0x406bcbc0" defined="" size="I:1" alignment="I:1">
            <field name="adps" ref="0x406bccd0" bit-offset="I:0" bit-size="I:3">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="adie" ref="0x406bcd30" bit-offset="I:3" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="adif" ref="0x406bcd90" bit-offset="I:4" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="adfr" ref="0x406bcdf0" bit-offset="I:5" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="adsc" ref="0x406bce50" bit-offset="I:6" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="aden" ref="0x406bceb0" bit-offset="I:7" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
        </struct>
        <struct name="_IO_FILE" loc="271:/usr/include/libio.h" ref="0x403f6168" defined="" size="I:148" alignment="I:4">
            <field name="_flags" ref="0x40402260" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="_IO_read_ptr" ref="0x404022c0" bit-offset="I:32" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
            <field name="_IO_read_end" ref="0x40402320" bit-offset="I:64" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
            <field name="_IO_read_base" ref="0x40402380" bit-offset="I:96" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
            <field name="_IO_write_base" ref="0x404023e0" bit-offset="I:128" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
            <field name="_IO_write_ptr" ref="0x40402440" bit-offset="I:160" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
            <field name="_IO_write_end" ref="0x404024a0" bit-offset="I:192" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
            <field name="_IO_buf_base" ref="0x40402500" bit-offset="I:224" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
            <field name="_IO_buf_end" ref="0x40402560" bit-offset="I:256" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
            <field name="_IO_save_base" ref="0x404025c0" bit-offset="I:288" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
            <field name="_IO_backup_base" ref="0x40402620" bit-offset="I:320" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
            <field name="_IO_save_end" ref="0x40402680" bit-offset="I:352" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
            <field name="_markers" ref="0x404026e0" bit-offset="I:384" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-tag size="I:12" alignment="I:4"><struct-ref name="_IO_marker" ref="0x403fb7a0"/></type-tag>
                </type-pointer>
            </field>
            <field name="_chain" ref="0x404027c0" bit-offset="I:416" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x403f6168"/></type-tag>
                </type-pointer>
            </field>
            <field name="_fileno" ref="0x40402820" bit-offset="I:448" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="_flags2" ref="0x40402880" bit-offset="I:480" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="_old_offset" ref="0x404028e0" bit-offset="I:512" size="I:4">
                <type-int cname="long" size="I:4" alignment="I:4">
                    <typename><typedef-ref name="__off_t" ref="0x402e33a8"/></typename>
                </type-int>
            </field>
            <field name="_cur_column" ref="0x40402940" bit-offset="I:544" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
            </field>
            <field name="_vtable_offset" ref="0x404029a0" bit-offset="I:560" size="I:1">
                <type-int cname="signed char" size="I:1" alignment="I:1"></type-int>
            </field>
            <field name="_shortbuf" ref="0x40402a00" bit-offset="I:568" size="I:1">
                <type-array elements="I:1" size="I:1" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
            <field name="_lock" ref="0x40402a60" bit-offset="I:576" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-void size="I:1" alignment="I:1">
                        <typename><typedef-ref name="_IO_lock_t" ref="0x403fb5c8"/></typename>
                    </type-void>
                </type-pointer>
            </field>
            <field name="_offset" ref="0x40402ac0" bit-offset="I:608" size="I:8">
                <type-int cname="long long" size="I:8" alignment="I:8">
                    <typename><typedef-ref name="__off64_t" ref="0x402e3628"/></typename>
                </type-int>
            </field>
            <field name="__pad1" ref="0x40402b20" bit-offset="I:672" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-void size="I:1" alignment="I:1"></type-void>
                </type-pointer>
            </field>
            <field name="__pad2" ref="0x40402b80" bit-offset="I:704" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-void size="I:1" alignment="I:1"></type-void>
                </type-pointer>
            </field>
            <field name="__pad3" ref="0x40402be0" bit-offset="I:736" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-void size="I:1" alignment="I:1"></type-void>
                </type-pointer>
            </field>
            <field name="__pad4" ref="0x40402d40" bit-offset="I:768" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-void size="I:1" alignment="I:1"></type-void>
                </type-pointer>
            </field>
            <field name="__pad5" ref="0x40402da0" bit-offset="I:800" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                    <typename><typedef-ref name="size_t" ref="0x4002e4a8"/></typename>
                </type-int>
            </field>
            <field name="_mode" ref="0x40402e00" bit-offset="I:832" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="_unused2" ref="0x40402e60" bit-offset="I:864" size="I:40">
                <type-array elements="I:40" size="I:40" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
        </struct>
        <struct name="hashtable" ref="0x4045c730" size="V:" alignment="V:">
        </struct>
        <union loc="206:/usr/include/bits/pthreadtypes.h" ref="0x40304e90" defined="" size="I:20" alignment="I:4">
            <field name="__size" ref="0x40304fa0" bit-offset="I:0" size="I:20">
                <type-array elements="I:20" size="I:20" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
            <field name="__align" ref="0x40302018" bit-offset="I:0" size="I:4">
                <type-int cname="long" size="I:4" alignment="I:4"></type-int>
            </field>
        </union>
        <struct name="heap" loc="50:/opt/tinyos-2.1.0/tos/lib/tossim/heap.h" ref="0x404a0dd0" defined="" size="I:12" alignment="I:4">
            <field name="size" ref="0x4049f240" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="data" ref="0x4049f2a0" bit-offset="I:32" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-void size="I:1" alignment="I:1"></type-void>
                </type-pointer>
            </field>
            <field name="private_size" ref="0x4049f300" bit-offset="I:64" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </struct>
        <attribute name="safe"  loc="NONE" ref="0x4002cd90" size="V:" alignment="V:">
        </attribute>
        <union loc="81:/usr/include/wchar.h" ref="0x403f6d68" defined="" size="I:4" alignment="I:4">
            <field name="__wch" ref="0x403f6e78" bit-offset="I:0" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__wchb" ref="0x403f6ed8" bit-offset="I:0" size="I:4">
                <type-array elements="I:4" size="I:4" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
        </union>
        <enum loc="54:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c12e88" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct name="_IO_marker" loc="186:/usr/include/libio.h" ref="0x403fb7a0" defined="" size="I:12" alignment="I:4">
            <field name="_next" ref="0x403fbcc0" bit-offset="I:0" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-tag size="I:12" alignment="I:4"><struct-ref name="_IO_marker" ref="0x403fb7a0"/></type-tag>
                </type-pointer>
            </field>
            <field name="_sbuf" ref="0x403fbd20" bit-offset="I:32" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x403f6168"/></type-tag>
                </type-pointer>
            </field>
            <field name="_pos" ref="0x403fbd80" bit-offset="I:64" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </struct>
        <enum loc="55:/opt/tinyos-2.1.0/tos/lib/tossim/sim_log.c" ref="0x4046c2c8" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <enum loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h" ref="0x406b06a8" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct loc="127:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c33400" defined="" size="I:1" alignment="I:1">
            <field name="toie0" ref="0x40c33510" bit-offset="I:0" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocie0" ref="0x40c33570" bit-offset="I:1" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="toie1" ref="0x40c335d0" bit-offset="I:2" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocie1b" ref="0x40c33630" bit-offset="I:3" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocie1a" ref="0x40c33690" bit-offset="I:4" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ticie1" ref="0x40c336f0" bit-offset="I:5" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="toie2" ref="0x40c33750" bit-offset="I:6" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocie2" ref="0x40c337b0" bit-offset="I:7" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
        </struct>
        <struct loc="306:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c4a620" defined="" size="I:1" alignment="I:1">
            <field name="ocf1c" ref="0x40c4a730" bit-offset="I:0" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocf3c" ref="0x40c4a790" bit-offset="I:1" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="tov3" ref="0x40c4a7f0" bit-offset="I:2" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocf3b" ref="0x40c4a850" bit-offset="I:3" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ocf3a" ref="0x40c4a8b0" bit-offset="I:4" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="icf3" ref="0x40c4a910" bit-offset="I:5" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="rsvd" ref="0x40c4a970" bit-offset="I:6" bit-size="I:2">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
        </struct>
        <struct name="random_data" loc="349:/usr/include/stdlib.h" ref="0x403066e0" defined="" size="I:28" alignment="I:4">
            <field name="fptr" ref="0x40305010" bit-offset="I:0" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="int" size="I:4" alignment="I:4">
                        <typename><typedef-ref name="int32_t" ref="0x401c08e8"/></typename>
                    </type-int>
                </type-pointer>
            </field>
            <field name="rptr" ref="0x40305070" bit-offset="I:32" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="int" size="I:4" alignment="I:4">
                        <typename><typedef-ref name="int32_t" ref="0x401c08e8"/></typename>
                    </type-int>
                </type-pointer>
            </field>
            <field name="state" ref="0x403050d0" bit-offset="I:64" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="int" size="I:4" alignment="I:4">
                        <typename><typedef-ref name="int32_t" ref="0x401c08e8"/></typename>
                    </type-int>
                </type-pointer>
            </field>
            <field name="rand_type" ref="0x40305130" bit-offset="I:96" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="rand_deg" ref="0x40305190" bit-offset="I:128" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="rand_sep" ref="0x403051f0" bit-offset="I:160" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="end_ptr" ref="0x40305250" bit-offset="I:192" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="int" size="I:4" alignment="I:4">
                        <typename><typedef-ref name="int32_t" ref="0x401c08e8"/></typename>
                    </type-int>
                </type-pointer>
            </field>
        </struct>
        <union loc="115:/usr/include/bits/pthreadtypes.h" ref="0x402fd770" defined="" size="I:48" alignment="I:4">
            <field name="__data" ref="0x402fd880" bit-offset="I:0" size="I:44">
                <type-tag size="I:44" alignment="I:4"><struct-ref ref="0x402fef48"/></type-tag>
            </field>
            <field name="__size" ref="0x402fd8e0" bit-offset="I:0" size="I:48">
                <type-array elements="I:48" size="I:48" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
            <field name="__align" ref="0x402fd940" bit-offset="I:0" size="I:8">
                <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
            </field>
        </union>
        <struct name="Point" loc="41:crypto.h" ref="0x40839c70" defined="" size="I:52" alignment="I:1">
            <field name="x" ref="0x40838010" bit-offset="I:0" size="I:26">
                <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                    <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                </type-tag>
            </field>
            <field name="y" ref="0x40838070" bit-offset="I:208" size="I:26">
                <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                    <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                </type-tag>
            </field>
        </struct>
        <struct loc="170:/usr/include/bits/pthreadtypes.h" ref="0x402ff490" defined="" size="I:32" alignment="I:4">
            <field name="__lock" ref="0x402ff5a0" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__nr_readers" ref="0x402ff600" bit-offset="I:32" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__readers_wakeup" ref="0x402ff660" bit-offset="I:64" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__writer_wakeup" ref="0x402ff6c0" bit-offset="I:96" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__nr_readers_queued" ref="0x402ff720" bit-offset="I:128" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__nr_writers_queued" ref="0x402ff780" bit-offset="I:160" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__flags" ref="0x402ff7e0" bit-offset="I:192" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </field>
            <field name="__shared" ref="0x402ff840" bit-offset="I:200" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </field>
            <field name="__pad1" ref="0x402ff8a0" bit-offset="I:208" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </field>
            <field name="__pad2" ref="0x402ff900" bit-offset="I:216" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </field>
            <field name="__writer" ref="0x402ff960" bit-offset="I:224" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </struct>
        <enum loc="76:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h" ref="0x4060ddb8" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct loc="106:/usr/include/stdlib.h" ref="0x402d1ee0" defined="" size="I:8" alignment="I:4">
            <field name="quot" ref="0x402d0180" bit-offset="I:0" size="I:4">
                <type-int cname="long" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="rem" ref="0x402d01e0" bit-offset="I:32" size="I:4">
                <type-int cname="long" size="I:4" alignment="I:4"></type-int>
            </field>
        </struct>
        <struct name="tm" loc="134:/usr/include/time.h" ref="0x4057ce98" defined="" size="I:44" alignment="I:4">
            <field name="tm_sec" ref="0x4057aa38" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="tm_min" ref="0x4057aa98" bit-offset="I:32" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="tm_hour" ref="0x4057aaf8" bit-offset="I:64" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="tm_mday" ref="0x4057ab58" bit-offset="I:96" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="tm_mon" ref="0x4057abb8" bit-offset="I:128" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="tm_year" ref="0x4057ac18" bit-offset="I:160" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="tm_wday" ref="0x4057ac78" bit-offset="I:192" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="tm_yday" ref="0x4057acd8" bit-offset="I:224" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="tm_isdst" ref="0x4057ad38" bit-offset="I:256" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="tm_gmtoff" ref="0x4057ad98" bit-offset="I:288" size="I:4">
                <type-int cname="long" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="tm_zone" ref="0x4057adf8" bit-offset="I:320" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-qualified const="">
                        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                    </type-qualified>
                </type-pointer>
            </field>
        </struct>
        <enum loc="68:/opt/tinyos-2.1.0/tos/lib/tossim/tos.h" ref="0x40445418" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct name="sim_log_output" loc="43:/opt/tinyos-2.1.0/tos/lib/tossim/sim_log.c" ref="0x40462258" defined="" size="I:8" alignment="I:4">
            <field name="num" ref="0x40462628" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="files" ref="0x40462688" bit-offset="I:32" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-pointer size="I:4" alignment="I:4">
                        <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x403f6168"/>
                            <typename><typedef-ref name="FILE" ref="0x403f63a8"/></typename>
                        </type-tag>
                    </type-pointer>
                </type-pointer>
            </field>
        </struct>
        <nx_struct name="time_serial_msg" loc="4:TimeSerial.h" ref="0x4002f8b0" defined="" size="I:18" alignment="I:1">
            <field name="t1" ref="0x4062e198" bit-offset="I:0" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
                    <typename><typedef-ref name="nx_uint32_t" ref="0x402ad030"/></typename>
                </type-int>
            </field>
            <field name="t2" ref="0x4062e1f8" bit-offset="I:32" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
                    <typename><typedef-ref name="nx_uint32_t" ref="0x402ad030"/></typename>
                </type-int>
            </field>
            <field name="t3" ref="0x4062e258" bit-offset="I:64" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
                    <typename><typedef-ref name="nx_uint32_t" ref="0x402ad030"/></typename>
                </type-int>
            </field>
            <field name="t4" ref="0x4062e2b8" bit-offset="I:96" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
                    <typename><typedef-ref name="nx_uint32_t" ref="0x402ad030"/></typename>
                </type-int>
            </field>
            <field name="overflow" ref="0x4062e318" bit-offset="I:128" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                    <typename><typedef-ref name="nx_uint8_t" ref="0x402a9728"/></typename>
                </type-int>
            </field>
            <field name="result" ref="0x4062e378" bit-offset="I:136" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                    <typename><typedef-ref name="nx_uint8_t" ref="0x402a9728"/></typename>
                </type-int>
            </field>
        </nx_struct>
        <struct loc="85:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h" ref="0x406c08f0" defined="" size="I:1" alignment="I:1">
            <field name="mux" ref="0x406c0a00" bit-offset="I:0" bit-size="I:5">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="adlar" ref="0x406c0a60" bit-offset="I:5" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="refs" ref="0x406c0ac0" bit-offset="I:6" bit-size="I:2">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
        </struct>
        <union loc="141:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c300c8" defined="" size="I:1" alignment="I:1">
            <field name="flat" ref="0x40c301d8" bit-offset="I:0" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="bits" ref="0x40c30238" bit-offset="I:0" size="I:1">
                <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40c31b28"/></type-tag>
            </field>
        </union>
        <union loc="158:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c2f3f0" defined="" size="I:1" alignment="I:1">
            <field name="flat" ref="0x40c2f500" bit-offset="I:0" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="bits" ref="0x40c2f560" bit-offset="I:0" size="I:1">
                <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40c30f38"/></type-tag>
            </field>
        </union>
        <struct loc="187:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c2eaf0" defined="" size="I:1" alignment="I:1">
            <field name="wgm10" ref="0x40c2ec00" bit-offset="I:0" bit-size="I:2">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="comC" ref="0x40c2ec60" bit-offset="I:2" bit-size="I:2">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="comB" ref="0x40c2ecc0" bit-offset="I:4" bit-size="I:2">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="comA" ref="0x40c2ed20" bit-offset="I:6" bit-size="I:2">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
        </struct>
        <union loc="124:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c33950" defined="" size="I:1" alignment="I:1">
            <field name="flat" ref="0x40c33a60" bit-offset="I:0" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="bits" ref="0x40c33ac0" bit-offset="I:0" size="I:1">
                <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40c33400"/></type-tag>
            </field>
        </union>
        <struct name="radio_stats" loc="98:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h" ref="0x4060bb00" defined="" size="I:18" alignment="I:2">
            <field name="version" ref="0x4060ac60" bit-offset="I:0" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="flags" ref="0x4060acc0" bit-offset="I:8" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="reserved" ref="0x4060ad20" bit-offset="I:16" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="platform" ref="0x4060ad80" bit-offset="I:24" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="MTU" ref="0x4060ade0" bit-offset="I:32" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                    <typename><typedef-ref name="uint16_t" ref="0x401c2010"/></typename>
                </type-int>
            </field>
            <field name="radio_crc_fail" ref="0x4060ae40" bit-offset="I:48" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                    <typename><typedef-ref name="uint16_t" ref="0x401c2010"/></typename>
                </type-int>
            </field>
            <field name="radio_queue_drops" ref="0x4060aea0" bit-offset="I:64" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                    <typename><typedef-ref name="uint16_t" ref="0x401c2010"/></typename>
                </type-int>
            </field>
            <field name="serial_crc_fail" ref="0x4060af00" bit-offset="I:80" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                    <typename><typedef-ref name="uint16_t" ref="0x401c2010"/></typename>
                </type-int>
            </field>
            <field name="serial_tx_fail" ref="0x4060af60" bit-offset="I:96" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                    <typename><typedef-ref name="uint16_t" ref="0x401c2010"/></typename>
                </type-int>
            </field>
            <field name="serial_short_packets" ref="0x40608010" bit-offset="I:112" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                    <typename><typedef-ref name="uint16_t" ref="0x401c2010"/></typename>
                </type-int>
            </field>
            <field name="serial_proto_drops" ref="0x40608070" bit-offset="I:128" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                    <typename><typedef-ref name="uint16_t" ref="0x401c2010"/></typename>
                </type-int>
            </field>
        </struct>
        <attribute name="one_nok" loc="14:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401bcb80" defined="" size="I:0" alignment="I:1">
        </attribute>
        <attribute name="dmemset" loc="15:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401be010" defined="" size="I:12" alignment="I:4">
            <field name="a1" ref="0x401be298" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="a2" ref="0x401be2f8" bit-offset="I:32" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="a3" ref="0x401be358" bit-offset="I:64" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </attribute>
        <union loc="241:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c27630" defined="" size="I:1" alignment="I:1">
            <field name="flat" ref="0x40c27740" bit-offset="I:0" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="bits" ref="0x40c277a0" bit-offset="I:0" size="I:1">
                <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40c27210"/></type-tag>
            </field>
        </union>
        <attribute name="atleastonce" loc="90:/opt/tinyos-2.1.0/tos/lib/tossim/tos.h" ref="0x4045ed78" defined="" size="I:0" alignment="I:1">
        </attribute>
        <enum loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h" ref="0x406af798" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <enum loc="13:TimeSerial.h" ref="0x4062e5b8" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <union loc="106:/usr/include/bits/pthreadtypes.h" ref="0x402fe100" defined="" size="I:4" alignment="I:4">
            <field name="__size" ref="0x402fe210" bit-offset="I:0" size="I:4">
                <type-array elements="I:4" size="I:4" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
            <field name="__align" ref="0x402fe270" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </union>
        <struct name="itimerval" loc="109:/usr/include/sys/time.h" ref="0x404e3410" defined="" size="I:16" alignment="I:4">
            <field name="it_interval" ref="0x404e3848" bit-offset="I:0" size="I:8">
                <type-tag size="I:8" alignment="I:4"><struct-ref name="timeval" ref="0x402f2010"/></type-tag>
            </field>
            <field name="it_value" ref="0x404e38a8" bit-offset="I:64" size="I:8">
                <type-tag size="I:8" alignment="I:4"><struct-ref name="timeval" ref="0x402f2010"/></type-tag>
            </field>
        </struct>
        <attribute name="count_nok" loc="12:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401bc228" defined="" size="I:4" alignment="I:4">
            <field name="n" ref="0x401bc3d8" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </attribute>
        <struct name="sigevent" ref="0x405795f0" size="V:" alignment="V:">
        </struct>
        <attribute name="one" loc="13:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401bc740" defined="" size="I:0" alignment="I:1">
        </attribute>
        <struct loc="67:/usr/include/sys/select.h" ref="0x402f2ef8" defined="" size="I:128" alignment="I:4">
            <field name="__fds_bits" ref="0x402f0050" bit-offset="I:0" size="I:128">
                <type-array elements="I:32" size="I:128" alignment="I:4">
                    <type-int cname="long" size="I:4" alignment="I:4">
                        <typename><typedef-ref name="__fd_mask" ref="0x402f2890"/></typename>
                    </type-int>
                </type-array>
            </field>
        </struct>
        <enum loc="123:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h" ref="0x406bee80" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <enum loc="48:/opt/tinyos-2.1.0/tos/platforms/micaz/sim/platform_hardware.h" ref="0x406bb660" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <attribute name="spontaneous"  loc="NONE" ref="0x4002c728" size="V:" alignment="V:">
        </attribute>
        <enum loc="66:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c10508" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct loc="27:/usr/include/_G_config.h" ref="0x403f4df8" defined="" size="I:16" alignment="I:4">
            <field name="__pos" ref="0x403f4f08" bit-offset="I:0" size="I:8">
                <type-int cname="long long" size="I:8" alignment="I:8">
                    <typename><typedef-ref name="__off64_t" ref="0x402e3628"/></typename>
                </type-int>
            </field>
            <field name="__state" ref="0x403f4f68" bit-offset="I:64" size="I:8">
                <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x403f40b0"/>
                    <typename><typedef-ref name="__mbstate_t" ref="0x403f42d8"/></typename>
                </type-tag>
            </field>
        </struct>
        <struct loc="225:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c29ae8" defined="" size="I:1" alignment="I:1">
            <field name="cs" ref="0x40c29bf8" bit-offset="I:0" bit-size="I:3">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="wgm32" ref="0x40c29c58" bit-offset="I:3" bit-size="I:2">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="rsvd" ref="0x40c29cb8" bit-offset="I:5" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="ices1" ref="0x40c29d18" bit-offset="I:6" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="icnc1" ref="0x40c29d78" bit-offset="I:7" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
        </struct>
        <attribute name="unsafe"  loc="NONE" ref="0x4002cef8" size="V:" alignment="V:">
        </attribute>
        <union loc="53:/usr/include/bits/pthreadtypes.h" ref="0x402f6b18" defined="" size="I:36" alignment="I:4">
            <field name="__size" ref="0x402f6c28" bit-offset="I:0" size="I:36">
                <type-array elements="I:36" size="I:36" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
            <field name="__align" ref="0x402f6c88" bit-offset="I:0" size="I:4">
                <type-int cname="long" size="I:4" alignment="I:4"></type-int>
            </field>
        </union>
        <enum loc="95:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h" ref="0x406c0cd8" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct name="SHA1Context" loc="52:sha1.h" ref="0x40821450" defined="" size="I:104" alignment="I:4">
            <field name="Intermediate_Hash" ref="0x4083b1d0" bit-offset="I:0" size="I:20">
                <type-array elements="I:5" size="I:20" alignment="I:4">
                    <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                        <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
                    </type-int>
                </type-array>
            </field>
            <field name="Length_Low" ref="0x4083b230" bit-offset="I:160" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                    <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
                </type-int>
            </field>
            <field name="Length_High" ref="0x4083b290" bit-offset="I:192" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                    <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
                </type-int>
            </field>
            <field name="Message_Block_Index" ref="0x4083b2f0" bit-offset="I:224" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                    <typename><typedef-ref name="uint16_t" ref="0x401c2010"/></typename>
                </type-int>
            </field>
            <field name="Message_Block" ref="0x4083b350" bit-offset="I:240" size="I:64">
                <type-array elements="I:64" size="I:64" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </type-array>
            </field>
            <field name="Computed" ref="0x4083b3b0" bit-offset="I:768" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="Corrupted" ref="0x4083b410" bit-offset="I:800" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </struct>
        <struct loc="288:/usr/include/inttypes.h" ref="0x401c6ee0" defined="" size="I:16" alignment="I:4">
            <field name="quot" ref="0x401cc010" bit-offset="I:0" size="I:8">
                <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
            </field>
            <field name="rem" ref="0x401cc070" bit-offset="I:64" size="I:8">
                <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
            </field>
        </struct>
        <attribute name="nts" loc="17:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401bed98" defined="" size="I:0" alignment="I:1">
        </attribute>
        <struct name="_IO_FILE_plus" ref="0x40409280" size="V:" alignment="V:">
        </struct>
        <struct name="exception" loc="309:/usr/include/math.h" ref="0x403e9118" defined="" size="I:32" alignment="I:4">
            <field name="type" ref="0x403e9678" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="name" ref="0x403e96d8" bit-offset="I:32" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
            <field name="arg1" ref="0x403e9738" bit-offset="I:64" size="I:8">
                <type-float cname="double" size="I:8" alignment="I:8"></type-float>
            </field>
            <field name="arg2" ref="0x403e9798" bit-offset="I:128" size="I:8">
                <type-float cname="double" size="I:8" alignment="I:8"></type-float>
            </field>
            <field name="retval" ref="0x403e97f8" bit-offset="I:192" size="I:8">
                <type-float cname="double" size="I:8" alignment="I:8"></type-float>
            </field>
        </struct>
        <struct name="sim_log_channel" loc="48:/opt/tinyos-2.1.0/tos/lib/tossim/sim_log.c" ref="0x40462958" defined="" size="I:16" alignment="I:4">
            <field name="name" ref="0x40462f68" bit-offset="I:0" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-qualified const="">
                        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                    </type-qualified>
                </type-pointer>
            </field>
            <field name="numOutputs" ref="0x4046c010" bit-offset="I:32" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="size" ref="0x4046c070" bit-offset="I:64" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="outputs" ref="0x4046c0d0" bit-offset="I:96" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-pointer size="I:4" alignment="I:4">
                        <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x403f6168"/>
                            <typename><typedef-ref name="FILE" ref="0x403f63a8"/></typename>
                        </type-tag>
                    </type-pointer>
                </type-pointer>
            </field>
        </struct>
        <enum loc="39:/opt/tinyos-2.1.0/tos/lib/tossim/sim_log.c" ref="0x40463df8" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <struct name="Point_proj" loc="46:crypto.h" ref="0x40838310" defined="" size="I:78" alignment="I:1">
            <field name="x" ref="0x40838780" bit-offset="I:0" size="I:26">
                <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                    <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                </type-tag>
            </field>
            <field name="y" ref="0x408387e0" bit-offset="I:208" size="I:26">
                <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                    <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                </type-tag>
            </field>
            <field name="z" ref="0x40838840" bit-offset="I:416" size="I:26">
                <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                    <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
                </type-tag>
            </field>
        </struct>
        <attribute name="C"  loc="NONE" ref="0x4002c2e0" size="V:" alignment="V:">
        </attribute>
        <struct name="sim_noise_hash_t" loc="56:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h" ref="0x404ebe28" defined="" size="I:480" alignment="I:4">
            <field name="key" ref="0x404ea7a8" bit-offset="I:0" size="I:20">
                <type-array elements="I:20" size="I:20" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
            <field name="numElements" ref="0x404ea808" bit-offset="I:160" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="size" ref="0x404ea868" bit-offset="I:192" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="elements" ref="0x404ea8c8" bit-offset="I:224" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
            <field name="flag" ref="0x404ea928" bit-offset="I:256" size="I:1">
                <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </field>
            <field name="dist" ref="0x404ea988" bit-offset="I:288" size="I:444">
                <type-array elements="I:111" size="I:444" alignment="I:4">
                    <type-float cname="float" size="I:4" alignment="I:4"></type-float>
                </type-array>
            </field>
        </struct>
        <enum loc="32:/opt/tinyos-2.1.0/tos/types/Leds.h" ref="0x4083f398" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <union loc="222:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c28010" defined="" size="I:1" alignment="I:1">
            <field name="flat" ref="0x40c28120" bit-offset="I:0" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="bits" ref="0x40c28180" bit-offset="I:0" size="I:1">
                <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40c29ae8"/></type-tag>
            </field>
        </union>
        <attribute name="macro"  loc="NONE" ref="0x4002ca58" size="V:" alignment="V:">
            <field name="macro_name" ref="0x4002cb68" bit-offset="U:" bit-size="U:">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
        </attribute>
        <enum loc="111:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h" ref="0x406be260" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <nx_struct name="message_t" loc="14:/opt/tinyos-2.1.0/tos/types/message.h" ref="0x40617970" defined="" size="I:41" alignment="I:1">
            <field name="header" ref="0x406155a0" bit-offset="I:0" size="I:7">
                <type-array elements="I:7" size="I:7" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                        <typename><typedef-ref name="nx_uint8_t" ref="0x402a9728"/></typename>
                    </type-int>
                </type-array>
            </field>
            <field name="data" ref="0x40615600" bit-offset="I:56" size="I:28">
                <type-array elements="I:28" size="I:28" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                        <typename><typedef-ref name="nx_uint8_t" ref="0x402a9728"/></typename>
                    </type-int>
                </type-array>
            </field>
            <field name="footer" ref="0x40615660" bit-offset="I:280" size="I:2">
                <type-array elements="I:2" size="I:2" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                        <typename><typedef-ref name="nx_uint8_t" ref="0x402a9728"/></typename>
                    </type-int>
                </type-array>
            </field>
            <field name="metadata" ref="0x406156c0" bit-offset="I:296" size="I:4">
                <type-array elements="I:4" size="I:4" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                        <typename><typedef-ref name="nx_uint8_t" ref="0x402a9728"/></typename>
                    </type-int>
                </type-array>
            </field>
        </nx_struct>
        <nx_struct name="tossim_header" loc="6:/opt/tinyos-2.1.0/tos/lib/tossim/TossimRadioMsg.h" ref="0x4060e010" defined="" size="I:7" alignment="I:1">
            <field name="dest" ref="0x4060e838" bit-offset="I:0" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
                    <typename><typedef-ref name="nx_am_addr_t" ref="0x405ffd60"/></typename>
                </type-int>
            </field>
            <field name="src" ref="0x4060e898" bit-offset="I:16" size="I:2">
                <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
                    <typename><typedef-ref name="nx_am_addr_t" ref="0x405ffd60"/></typename>
                </type-int>
            </field>
            <field name="length" ref="0x4060e8f8" bit-offset="I:32" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                    <typename><typedef-ref name="nx_uint8_t" ref="0x402a9728"/></typename>
                </type-int>
            </field>
            <field name="group" ref="0x4060e958" bit-offset="I:40" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                    <typename><typedef-ref name="nx_am_group_t" ref="0x405ffac8"/></typename>
                </type-int>
            </field>
            <field name="type" ref="0x4060e9b8" bit-offset="I:48" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                    <typename><typedef-ref name="nx_am_id_t" ref="0x405ff728"/></typename>
                </type-int>
            </field>
        </nx_struct>
        <enum loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h" ref="0x4062ede0" defined="" size="I:4" alignment="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <union loc="95:/usr/include/bits/pthreadtypes.h" ref="0x402f9010" defined="" size="I:4" alignment="I:4">
            <field name="__spins" ref="0x402f9120" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__list" ref="0x402f9180" bit-offset="I:0" size="I:4">
                <type-tag size="I:4" alignment="I:4"><struct-ref name="__pthread_internal_slist" ref="0x402fa010"/>
                    <typename><typedef-ref name="__pthread_slist_t" ref="0x402fa4c0"/></typename>
                </type-tag>
            </field>
        </union>
        <struct name="sim_noise_node_t" loc="65:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h" ref="0x404ead28" defined="" size="I:68" alignment="I:4">
            <field name="key" ref="0x404e8c58" bit-offset="I:0" size="I:20">
                <type-array elements="I:20" size="I:20" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
            <field name="freqKey" ref="0x404e8cb8" bit-offset="I:160" size="I:20">
                <type-array elements="I:20" size="I:20" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
            <field name="lastNoiseVal" ref="0x404e8d18" bit-offset="I:320" size="I:1">
                <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </field>
            <field name="noiseGenTime" ref="0x404e8d78" bit-offset="I:352" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                    <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
                </type-int>
            </field>
            <field name="noiseTable" ref="0x404e8dd8" bit-offset="I:384" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0x4045c730"/></type-tag>
                </type-pointer>
            </field>
            <field name="noiseTrace" ref="0x404e8e38" bit-offset="I:416" size="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </field>
            <field name="noiseTraceLen" ref="0x404e8e98" bit-offset="I:448" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                    <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
                </type-int>
            </field>
            <field name="noiseTraceIndex" ref="0x404e8ef8" bit-offset="I:480" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                    <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
                </type-int>
            </field>
            <field name="generated" ref="0x404e8f58" bit-offset="I:512" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
                </type-int>
            </field>
        </struct>
        <struct loc="29:/opt/tinyos-2.1.0/tos/lib/timer/Timer.h" ref="0x40872178" defined="" size="I:4" alignment="I:4">
            <field name="notUsed" ref="0x40872288" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </struct>
        <union loc="184:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c2ef28" defined="" size="I:1" alignment="I:1">
            <field name="flat" ref="0x40c2d050" bit-offset="I:0" size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="bits" ref="0x40c2d0b0" bit-offset="I:0" size="I:1">
                <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40c2eaf0"/></type-tag>
            </field>
        </union>
        <union loc="212:/usr/include/bits/pthreadtypes.h" ref="0x40302588" defined="" size="I:4" alignment="I:4">
            <field name="__size" ref="0x40302698" bit-offset="I:0" size="I:4">
                <type-array elements="I:4" size="I:4" alignment="I:1">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-array>
            </field>
            <field name="__align" ref="0x403026f8" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </union>
        <attribute name="atomic_hwevent"  loc="NONE" ref="0x4002c5b8" size="V:" alignment="V:">
        </attribute>
        <struct loc="244:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40c27210" defined="" size="I:1" alignment="I:1">
            <field name="rsvd" ref="0x40c27320" bit-offset="I:0" bit-size="I:5">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="focC" ref="0x40c27380" bit-offset="I:5" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="focB" ref="0x40c273e0" bit-offset="I:6" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
            <field name="focA" ref="0x40c27440" bit-offset="I:7" bit-size="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </field>
        </struct>
        <attribute name="dmemcpy" loc="16:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401be6e8" defined="" size="I:12" alignment="I:4">
            <field name="a1" ref="0x401be970" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="a2" ref="0x401be9d0" bit-offset="I:32" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="a3" ref="0x401bea30" bit-offset="I:64" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
        </attribute>
        <struct name="__pthread_mutex_s" loc="78:/usr/include/bits/pthreadtypes.h" ref="0x402fa730" defined="" size="I:24" alignment="I:4">
            <field name="__lock" ref="0x402f92e0" bit-offset="I:0" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__count" ref="0x402f9340" bit-offset="I:32" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__owner" ref="0x402f93a0" bit-offset="I:64" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__kind" ref="0x402f9400" bit-offset="I:96" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__nusers" ref="0x402f9460" bit-offset="I:128" size="I:4">
                <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__spins" ref="0x402f94c0" bit-offset="I:160" size="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </field>
            <field name="__list" ref="0x402f9520" bit-offset="I:160" size="I:4">
                <type-tag size="I:4" alignment="I:4"><struct-ref name="__pthread_internal_slist" ref="0x402fa010"/>
                    <typename><typedef-ref name="__pthread_slist_t" ref="0x402fa4c0"/></typename>
                </type-tag>
            </field>
        </struct>
        <enum loc="59:/opt/tinyos-2.1.0/tos/lib/tossim/SerialActiveMessageC.nc" ref="0x40bbf730" defined="" scoped="" size="I:4" alignment="I:4">
            <component-ref qname="SerialActiveMessageC"/>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <enum loc="60:/opt/tinyos-2.1.0/tos/lib/tossim/SerialActiveMessageC.nc" ref="0x40bc0d98" defined="" scoped="" size="I:4" alignment="I:4">
            <component-ref qname="SerialActiveMessageC"/>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <enum loc="45:/opt/tinyos-2.1.0/tos/lib/tossim/SimSchedulerBasicP.nc" ref="0x4062d9e0" defined="" scoped="" size="I:4" alignment="I:4">
            <component-ref qname="SimSchedulerBasicP"/>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
        <enum loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" ref="0x40c50d70" defined="" scoped="" size="I:4" alignment="I:4">
            <component-ref qname="Atm128AlarmAsyncP"/>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </enum>
    </tags>
    <variables>
        <variable name="randCM" ref="0x40560338" loc="39:/opt/tinyos-2.1.0/tos/lib/tossim/randomlib.c">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
        </variable>
        <variable name="dummy" ref="0x405d9450" loc="275:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="current_node" ref="0x404f2540" loc="44:/opt/tinyos-2.1.0/tos/lib/tossim/sim_tossim.c">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="test" ref="0x40560830" loc="41:/opt/tinyos-2.1.0/tos/lib/tossim/randomlib.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="ZERO_POINT" ref="0x40834a90" loc="56:crypto.h">
            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
            </type-tag>
        </variable>
        <variable name="__timezone" ref="0x4057e350" loc="277:/usr/include/time.h">
            <type-int cname="long" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="channelTable" ref="0x4046ce98" loc="60:/opt/tinyos-2.1.0/tos/lib/tossim/sim_log.c">
            <type-pointer size="I:4" alignment="I:4">
                <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0x4045c730"/></type-tag>
            </type-pointer>
        </variable>
        <variable name="noiseData" ref="0x4058f790" loc="50:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.c">
            <type-array elements="I:1000" size="I:68000" alignment="I:4">
                <type-tag size="I:68" alignment="I:4"><struct-ref name="sim_noise_node_t" ref="0x404ead28"/>
                    <typename><typedef-ref name="sim_noise_node_t" ref="0x404f5048"/></typename>
                </type-tag>
            </type-array>
        </variable>
        <variable name="outputs" ref="0x4046cbe0" loc="59:/opt/tinyos-2.1.0/tos/lib/tossim/sim_log.c">
            <type-array elements="I:150" size="I:1200" alignment="I:4">
                <type-tag size="I:8" alignment="I:4"><struct-ref name="sim_log_output" ref="0x40462258"/>
                    <typename><typedef-ref name="sim_log_output_t" ref="0x40462740"/></typename>
                </type-tag>
            </type-array>
        </variable>
        <variable name="__tzname" ref="0x4057fef8" loc="275:/usr/include/time.h">
            <type-array elements="I:2" size="I:8" alignment="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </type-array>
        </variable>
        <variable name="randU" ref="0x40562eb0" loc="39:/opt/tinyos-2.1.0/tos/lib/tossim/randomlib.c">
            <type-array elements="I:97" size="I:776" alignment="I:8">
                <type-float cname="double" size="I:8" alignment="I:8"></type-float>
            </type-array>
        </variable>
        <variable name="timezone" ref="0x4057ee68" loc="291:/usr/include/time.h">
            <type-int cname="long" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="eventHeap" ref="0x404d1550" loc="36:/opt/tinyos-2.1.0/tos/lib/tossim/sim_event_queue.c">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/tossim/sim_event_queue.h">
                <short>&#10; The event queue is the core of the mote side of TOSSIM.</short>
                <long>&#10; The event queue is the core of the mote side of TOSSIM. It is a&#10; wrapper around the underlying heap. Unlike the 1.x version, it is&#10; not re-entrant: merging the Python console and TOSSIM means that&#10; functionality like packet injection/reception from external tools&#10; is on the Python side.&#10;&#10; @author Phil Levis&#10; @date   November 22 2005&#10;</long>
            </documentation>
            <type-tag size="I:12" alignment="I:4"><struct-ref name="heap" ref="0x404a0dd0"/>
                <typename><typedef-ref name="heap_t" ref="0x4049f3b8"/></typename>
            </type-tag>
        </variable>
        <variable name="csmaRxTxDelay" ref="0x4051b478" loc="46:/opt/tinyos-2.1.0/tos/lib/tossim/sim_csma.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="numCase1" ref="0x40590ab8" loc="43:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.c">
            <documentation loc="24:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h">
                <short>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.</short>
                <long>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
            </documentation>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="randC" ref="0x40560048" loc="39:/opt/tinyos-2.1.0/tos/lib/tossim/randomlib.c">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
        </variable>
        <variable name="FreqKeyNum" ref="0x4058f3c0" loc="48:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.c">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
            </type-int>
        </variable>
        <variable name="csmaLow" ref="0x4051c068" loc="39:/opt/tinyos-2.1.0/tos/lib/tossim/sim_csma.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="csmaPreambleLength" ref="0x4051c910" loc="42:/opt/tinyos-2.1.0/tos/lib/tossim/sim_csma.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="numTotal" ref="0x4058f0c0" loc="45:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="daylight" ref="0x4057ec48" loc="290:/usr/include/time.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="csmaExponentBase" ref="0x4051cbe8" loc="43:/opt/tinyos-2.1.0/tos/lib/tossim/sim_csma.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="_IO_2_1_stdin_" ref="0x40409530" loc="346:/usr/include/libio.h">
            <type-tag size="V:" alignment="V:"><struct-ref name="_IO_FILE_plus" ref="0x40409280"/></type-tag>
        </variable>
        <variable name="ELEMENT_ONE" ref="0x40838b58" loc="52:crypto.h">
            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
            </type-tag>
        </variable>
        <variable name="randCD" ref="0x405601c0" loc="39:/opt/tinyos-2.1.0/tos/lib/tossim/randomlib.c">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
        </variable>
        <variable name="j97" ref="0x40560658" loc="40:/opt/tinyos-2.1.0/tos/lib/tossim/randomlib.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="TOS_NODE_ID" ref="0x404459b0" loc="70:/opt/tinyos-2.1.0/tos/lib/tossim/tos.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401c2010"/></typename>
            </type-int>
        </variable>
        <variable name="sys_errlist" ref="0x4043fe38" loc="28:/usr/include/bits/sys_errlist.h">
            <type-qualified const="">
                <type-array elements="V:" size="V:" alignment="V:">
                    <type-qualified const="">
                        <type-pointer size="I:4" alignment="I:4">
                            <type-qualified const="">
                                <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                            </type-qualified>
                        </type-pointer>
                    </type-qualified>
                </type-array>
            </type-qualified>
        </variable>
        <variable name="tzname" ref="0x4057e600" loc="282:/usr/include/time.h">
            <type-array elements="I:2" size="I:8" alignment="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
            </type-array>
        </variable>
        <variable name="STARTING_SIZE" ref="0x404a62a0" loc="47:/opt/tinyos-2.1.0/tos/lib/tossim/heap.c">
            <type-qualified const="">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </type-qualified>
        </variable>
        <variable name="=va_arg" ref="0x4002a128"  loc="NONE">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="_IO_2_1_stderr_" ref="0x40409b20" loc="348:/usr/include/libio.h">
            <type-tag size="V:" alignment="V:"><struct-ref name="_IO_FILE_plus" ref="0x40409280"/></type-tag>
        </variable>
        <variable name="csmaHigh" ref="0x4051ddc8" loc="38:/opt/tinyos-2.1.0/tos/lib/tossim/sim_csma.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="csmaMaxIterations" ref="0x4051cec8" loc="44:/opt/tinyos-2.1.0/tos/lib/tossim/sim_csma.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="atm128RegFile" ref="0x406a9768" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128hardware.h">
            <documentation loc="24:/opt/tinyos-2.1.0/tos/lib/tossim/sim_tossim.h">
                <short>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.</short>
                <long>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
            </documentation>
            <type-array elements="I:1000" size="I:160000" alignment="I:1">
                <type-array elements="I:160" size="I:160" alignment="I:1">
                    <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                        <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                    </type-int>
                </type-array>
            </type-array>
        </variable>
        <variable name="g0" ref="0x40831808" loc="61:crypto.h">
            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
            </type-tag>
        </variable>
        <variable name="localNoise" ref="0x405376a0" loc="10:/opt/tinyos-2.1.0/tos/lib/tossim/sim_gain.c">
            <type-array elements="I:1001" size="I:16016" alignment="I:4">
                <type-tag size="I:16" alignment="I:4"><struct-ref name="sim_gain_noise" ref="0x405389a8"/>
                    <typename><typedef-ref name="sim_gain_noise_t" ref="0x40538e30"/></typename>
                </type-tag>
            </type-array>
        </variable>
        <variable name="_IO_2_1_stdout_" ref="0x40409828" loc="347:/usr/include/libio.h">
            <type-tag size="V:" alignment="V:"><struct-ref name="_IO_FILE_plus" ref="0x40409280"/></type-tag>
        </variable>
        <variable name="csmaInitLow" ref="0x4051db40" loc="37:/opt/tinyos-2.1.0/tos/lib/tossim/sim_csma.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="numCase2" ref="0x40590e00" loc="44:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="sim_ticks" ref="0x404f22f8" loc="43:/opt/tinyos-2.1.0/tos/lib/tossim/sim_tossim.c">
            <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="sim_time_t" ref="0x40445c80"/></typename>
            </type-int>
        </variable>
        <variable name="__daylight" ref="0x4057e120" loc="276:/usr/include/time.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="stderr" ref="0x4041b880" loc="147:/usr/include/stdio.h">
            <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x403f6168"/></type-tag>
            </type-pointer>
        </variable>
        <variable name="connectivity" ref="0x40537288" loc="9:/opt/tinyos-2.1.0/tos/lib/tossim/sim_gain.c">
            <type-array elements="I:1001" size="I:4004" alignment="I:4">
                <type-pointer size="I:4" alignment="I:4">
                    <type-tag size="I:16" alignment="I:4"><struct-ref name="gain_entry" ref="0x4052f6c0"/>
                        <typename><typedef-ref name="gain_entry_t" ref="0x4052fd00"/></typename>
                    </type-tag>
                </type-pointer>
            </type-array>
        </variable>
        <variable name="sys_nerr" ref="0x4043fb80" loc="27:/usr/include/bits/sys_errlist.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="stdin" ref="0x4041b360" loc="145:/usr/include/stdio.h">
            <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x403f6168"/></type-tag>
            </type-pointer>
        </variable>
        <variable name="GORDER" ref="0x4082edf8" loc="79:crypto.h">
            <type-array elements="I:19" size="I:19" alignment="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                </type-int>
            </type-array>
        </variable>
        <variable name="simTimeBuf" ref="0x4050fe10" loc="175:/opt/tinyos-2.1.0/tos/lib/tossim/sim_tossim.c">
            <type-array elements="I:128" size="I:128" alignment="I:1">
                <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-array>
        </variable>
        <variable name="sim_seed" ref="0x404f2740" loc="45:/opt/tinyos-2.1.0/tos/lib/tossim/sim_tossim.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="_LIB_VERSION" ref="0x403e0f20" loc="296:/usr/include/math.h">
            <type-tag size="I:4" alignment="I:4"><enum-ref ref="0x403e01d8"/>
                <typename><typedef-ref name="_LIB_VERSION_TYPE" ref="0x403e0c38"/></typename>
            </type-tag>
        </variable>
        <variable name="sensitivity" ref="0x40537898" loc="11:/opt/tinyos-2.1.0/tos/lib/tossim/sim_gain.c">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
        </variable>
        <variable name="signgam" ref="0x403e0048" loc="157:/usr/include/math.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="csmaInitHigh" ref="0x4051d8a0" loc="36:/opt/tinyos-2.1.0/tos/lib/tossim/sim_csma.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="stdout" ref="0x4041b5f0" loc="146:/usr/include/stdio.h">
            <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x403f6168"/></type-tag>
            </type-pointer>
        </variable>
        <variable name="ELEMENT_ZERO" ref="0x40835308" loc="54:crypto.h">
            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
            </type-tag>
        </variable>
        <variable name="csmaAckTime" ref="0x4051b718" loc="47:/opt/tinyos-2.1.0/tos/lib/tossim/sim_csma.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="csmaSymbolsPerSec" ref="0x4051c348" loc="40:/opt/tinyos-2.1.0/tos/lib/tossim/sim_csma.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="csmaMinFreeSamples" ref="0x4051b1c0" loc="45:/opt/tinyos-2.1.0/tos/lib/tossim/sim_csma.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="csmaBitsPerSymbol" ref="0x4051c628" loc="41:/opt/tinyos-2.1.0/tos/lib/tossim/sim_csma.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="i97" ref="0x40560500" loc="40:/opt/tinyos-2.1.0/tos/lib/tossim/randomlib.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </variable>
        <variable name="sim_scheduler_event_pending" ref="0x4063fad0" loc="58:/opt/tinyos-2.1.0/tos/lib/tossim/SimSchedulerBasicP.nc">
            <component-ref qname="SimSchedulerBasicP"/>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
            </type-int>
        </variable>
        <variable name="m_tail" ref="0x4063f518" loc="52:/opt/tinyos-2.1.0/tos/lib/tossim/SimSchedulerBasicP.nc">
            <component-ref qname="SimSchedulerBasicP"/>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
            </type-int>
        </variable>
        <variable name="m_head" ref="0x4063f308" loc="51:/opt/tinyos-2.1.0/tos/lib/tossim/SimSchedulerBasicP.nc">
            <component-ref qname="SimSchedulerBasicP"/>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
            </type-int>
        </variable>
        <variable name="m_next" ref="0x4063f7f8" loc="53:/opt/tinyos-2.1.0/tos/lib/tossim/SimSchedulerBasicP.nc">
            <component-ref qname="SimSchedulerBasicP"/>
            <type-array elements="I:2" size="I:2" alignment="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
                </type-int>
            </type-array>
        </variable>
        <variable name="sim_scheduler_event" ref="0x4063fe40" loc="59:/opt/tinyos-2.1.0/tos/lib/tossim/SimSchedulerBasicP.nc">
            <component-ref qname="SimSchedulerBasicP"/>
            <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x4044ab90"/>
                <typename><typedef-ref name="sim_event_t" ref="0x4044adf8"/></typename>
            </type-tag>
        </variable>
        <variable name="bootEvent" ref="0x407a7310" loc="45:/opt/tinyos-2.1.0/tos/lib/tossim/SimMoteP.nc">
            <component-ref qname="SimMoteP"/>
            <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x4044ab90"/>
                    <typename><typedef-ref name="sim_event_t" ref="0x4044adf8"/></typename>
                </type-tag>
            </type-pointer>
        </variable>
        <variable name="startTime" ref="0x407a3e80" loc="43:/opt/tinyos-2.1.0/tos/lib/tossim/SimMoteP.nc">
            <component-ref qname="SimMoteP"/>
            <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
        </variable>
        <variable name="euid" ref="0x407a3c58" loc="42:/opt/tinyos-2.1.0/tos/lib/tossim/SimMoteP.nc">
            <component-ref qname="SimMoteP"/>
            <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
        </variable>
        <variable name="isOn" ref="0x407a7098" loc="44:/opt/tinyos-2.1.0/tos/lib/tossim/SimMoteP.nc">
            <component-ref qname="SimMoteP"/>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
            </type-int>
        </variable>
        <variable name="buffer" ref="0x407e2b50" loc="54:/opt/tinyos-2.1.0/tos/lib/tossim/TossimActiveMessageC.nc">
            <component-ref qname="TossimActiveMessageC"/>
            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
            </type-tag>
        </variable>
        <variable name="bufferPointer" ref="0x407e2de0" loc="55:/opt/tinyos-2.1.0/tos/lib/tossim/TossimActiveMessageC.nc">
            <component-ref qname="TossimActiveMessageC"/>
            <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                    <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
                </type-tag>
            </type-pointer>
        </variable>
        <variable name="c_b" ref="0x40868478" loc="29:PairingTestM.nc">
            <component-ref qname="PairingTestM"/>
            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
            </type-tag>
        </variable>
        <variable name="end" ref="0x4087cc00" loc="47:PairingTestM.nc">
            <component-ref qname="PairingTestM"/>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
            </type-int>
        </variable>
        <variable name="ctr_c" ref="0x4087ce18" loc="48:PairingTestM.nc">
            <component-ref qname="PairingTestM"/>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
            </type-int>
        </variable>
        <variable name="ec_order" ref="0x40880b10" loc="39:PairingTestM.nc">
            <component-ref qname="PairingTestM"/>
            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
            </type-tag>
        </variable>
        <variable name="c_c" ref="0x40867bd0" loc="32:PairingTestM.nc">
            <component-ref qname="PairingTestM"/>
            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
            </type-tag>
        </variable>
        <variable name="k1" ref="0x4087e260" loc="41:PairingTestM.nc">
            <component-ref qname="PairingTestM"/>
            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
            </type-tag>
        </variable>
        <variable name="c_a" ref="0x4086acf0" loc="27:PairingTestM.nc">
            <component-ref qname="PairingTestM"/>
            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
            </type-tag>
        </variable>
        <variable name="c_d" ref="0x40881348" loc="35:PairingTestM.nc">
            <component-ref qname="PairingTestM"/>
            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
            </type-tag>
        </variable>
        <variable name="start" ref="0x4087caa8" loc="47:PairingTestM.nc">
            <component-ref qname="PairingTestM"/>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
            </type-int>
        </variable>
        <variable name="k2" ref="0x4087d988" loc="43:PairingTestM.nc">
            <component-ref qname="PairingTestM"/>
            <type-array elements="I:19" size="I:19" alignment="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                </type-int>
            </type-array>
        </variable>
        <variable name="element_one" ref="0x40a49630" loc="16:PairingM.nc">
            <component-ref qname="PairingM"/>
            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
            </type-tag>
        </variable>
        <variable name="mask" ref="0x40c1fa70" loc="59:/opt/tinyos-2.1.0/tos/system/RandomLfsrC.nc">
            <component-ref qname="RandomLfsrC"/>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401c2010"/></typename>
            </type-int>
        </variable>
        <variable name="shiftReg" ref="0x40c1f628" loc="57:/opt/tinyos-2.1.0/tos/system/RandomLfsrC.nc">
            <component-ref qname="RandomLfsrC"/>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401c2010"/></typename>
            </type-int>
        </variable>
        <variable name="initSeed" ref="0x40c1f860" loc="58:/opt/tinyos-2.1.0/tos/system/RandomLfsrC.nc">
            <component-ref qname="RandomLfsrC"/>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401c2010"/></typename>
            </type-int>
        </variable>
        <variable name="base" ref="0x40c50c30" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
            <component-ref qname="Atm128AlarmAsyncP"/>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
            </type-int>
        </variable>
        <variable name="t0" ref="0x40c508b0" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
            <component-ref qname="Atm128AlarmAsyncP"/>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
            </type-int>
        </variable>
        <variable name="set" ref="0x40c506b8" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
            <component-ref qname="Atm128AlarmAsyncP"/>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
            </type-int>
        </variable>
        <variable name="dt" ref="0x40c50a00" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
            <component-ref qname="Atm128AlarmAsyncP"/>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
            </type-int>
        </variable>
        <variable name="oldScale" ref="0x40c94d60" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
            <documentation loc="68:/opt/tinyos-2.1.0/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
                <short> This variable is needed to keep track of when the underlying&#10;  timer starts, in order to reset lastZero.</short>
                <long> This variable is needed to keep track of when the underlying&#10;  timer starts, in order to reset lastZero. When oldScale is&#10;  AVR_CLOCK_OFF and the scale is set to something else, the&#10;  clock starts ticking. *</long>
            </documentation>
            <component-ref qname="HplAtm128Timer0AsyncP"/>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
            </type-int>
        </variable>
        <variable name="lastZero" ref="0x40c94a80" loc="66:/opt/tinyos-2.1.0/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
            <component-ref qname="HplAtm128Timer0AsyncP"/>
            <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="sim_time_t" ref="0x40445c80"/></typename>
            </type-int>
        </variable>
        <variable name="overflow" ref="0x40d12520" loc="472:/opt/tinyos-2.1.0/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
            <component-ref qname="HplAtm128Timer0AsyncP"/>
            <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x4044ab90"/>
                    <typename><typedef-ref name="sim_event_t" ref="0x4044adf8"/></typename>
                </type-tag>
            </type-pointer>
        </variable>
        <variable name="compare" ref="0x40cac298" loc="177:/opt/tinyos-2.1.0/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
            <component-ref qname="HplAtm128Timer0AsyncP"/>
            <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x4044ab90"/>
                    <typename><typedef-ref name="sim_event_t" ref="0x4044adf8"/></typename>
                </type-tag>
            </type-pointer>
        </variable>
        <variable name="savedCounter" ref="0x40c96010" loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
            <component-ref qname="HplAtm128Timer0AsyncP"/>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
            </type-int>
        </variable>
        <variable name="inOverflow" ref="0x40c97ce8" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
            <component-ref qname="HplAtm128Timer0AsyncP"/>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
            </type-int>
        </variable>
    </variables>
    <constants>
        <constant cst="I:3" name="ACIE" ref="0x406957d0" loc="1075:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:8" name="HASH_BOUND" ref="0x4083a458" loc="22:crypto.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="OCDR7" ref="0x40674d38" loc="943:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="PB6" ref="0x406907a8" loc="1132:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="TXB81" ref="0x406960a8" loc="1058:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:26" name="ATM128_ADC_DIFF_ADC22_1x" ref="0x406ab380" loc="76:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:40" name="ATM128_OCR1BL" ref="0x4065b778" loc="140:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:17" name="ATM128_DDRD" ref="0x4065ea60" loc="81:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="TOIE0" ref="0x4066d648" loc="786:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PING0" ref="0x406a93a0" loc="1299:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_ADC_FREE_RUNNING_OFF" ref="0x406bd1c0" loc="124:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:16" name="LEDS_LED4" ref="0x408621f8" loc="37:/opt/tinyos-2.1.0/tos/types/Leds.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:10" name="ATM128_WAVE16_PWM_CAPTURE_HIGH" ref="0x40c2a298" loc="213:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:21" name="ATM128_ADC_DIFF_ADC51_1x" ref="0x406ac7e0" loc="71:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="SRL0" ref="0x40660430" loc="705:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="CS30" ref="0x40675928" loc="924:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PINA2" ref="0x406900a8" loc="1126:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="PINB4" ref="0x4068e740" loc="1154:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="ICES3" ref="0x40675058" loc="919:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="PINC6" ref="0x406a0e30" loc="1182:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="ADLAR" ref="0x406930f8" loc="1093:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PA2" ref="0x40692408" loc="1106:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="WGMA1" ref="0x40679438" loc="876:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="WGMB3" ref="0x406778f8" loc="902:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:255" name="TOS_SERIAL_UNKNOWN_ID" ref="0x4060cd90" loc="87:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="TWA3" ref="0x40662b38" loc="687:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="COM1B1" ref="0x40679b80" loc="882:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="ADHSM" ref="0x40686638" loc="961:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="INT3" ref="0x4066f428" loc="763:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="ISC31" ref="0x406722d8" loc="730:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="PINF3" ref="0x406973a0" loc="1275:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:-1" name="_IEEE_" ref="0x403e03d0" loc="286:/usr/include/math.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:15" name="ATM128_WAVE16_PWM_FAST_COMPARE" ref="0x40c2ae20" loc="218:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="WGM21" ref="0x4067bac0" loc="858:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="WGM33" ref="0x40675220" loc="920:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:13" name="ATM128_WAVE16_RESERVED" ref="0x40c2a950" loc="216:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="ATM128_ADC_SNGL_ADC5" ref="0x406ae420" loc="55:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:129" name="ATM128_ICR3H" ref="0x40668010" loc="269:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="XMM0" ref="0x406730a8" loc="714:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="CS2" ref="0x4067c010" loc="839:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:32768" name="_ISgraph" ref="0x403ed010" loc="57:/usr/include/ctype.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:51" name="ATM128_TCCR0" ref="0x40659350" loc="169:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="FOC1C" ref="0x406749a0" loc="939:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_ADC_RIGHT_ADJUST" ref="0x406af3c8" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PB0" ref="0x4068f1e8" loc="1138:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PC2" ref="0x4068d8a8" loc="1166:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:134" name="ATM128_OCR3AL" ref="0x40667138" loc="283:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="WDP1" ref="0x406860f0" loc="956:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="PD4" ref="0x4069e010" loc="1194:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="PE6" ref="0x4069c738" loc="1222:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="ATM128_CLK8_DIVIDE_128" ref="0x40c12750" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="COM00" ref="0x4067ca98" loc="847:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ADPS2" ref="0x406947e8" loc="1086:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="TWA6" ref="0x406625f8" loc="684:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:140" name="ATM128_TCCR3C" ref="0x40666038" loc="298:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="INT6" ref="0x40670ea8" loc="760:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="SRW10" ref="0x4066a010" loc="817:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="USBS0" ref="0x40682220" loc="1004:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="ATM128_WAVE16_PWM_FAST_8BIT" ref="0x40c2b6b0" loc="208:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ATM128_PORTE" ref="0x4064a650" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="FOC0" ref="0x4067c540" loc="844:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PIND0" ref="0x4069c3c8" loc="1218:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PINE2" ref="0x4069aad0" loc="1246:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="WDCE" ref="0x40687ba0" loc="953:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="ATM128_ADC_PRESCALE_16" ref="0x406bf770" loc="100:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:12" name="ATM128_WAVE16_CTC_CAPTURE" ref="0x40c2a738" loc="215:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="ICES" ref="0x40677730" loc="901:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:50" name="ATM128_TCNT0" ref="0x40659130" loc="166:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_POWER_ADC_NR" ref="0x406b1b70" loc="122:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128hardware.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="AVR_CLOCK_DIVIDE_8" ref="0x40c10b38" loc="69:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ATM128_COMPARE_SET" ref="0x40c0fec0" loc="85:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="DDA6" ref="0x40692af8" loc="1112:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_CLK8_NORMAL" ref="0x40c15d88" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="ISC71" ref="0x406711e8" loc="740:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="REFS0" ref="0x40694f18" loc="1092:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="DDF7" ref="0x40699dd8" loc="1261:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1024" name="_ISalpha" ref="0x403e6918" loc="52:/usr/include/ctype.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:255" name="SERIAL_PROTO_PACKET_UNKNOWN" ref="0x4060b910" loc="95:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="ATM128_ADCSR" ref="0x4065f0a8" loc="47:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="shaInputTooLong" ref="0x40821010" loc="42:sha1.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:55" name="ATM128_TIMSK" ref="0x40659dd8" loc="182:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="shaStateError" ref="0x408211e0" loc="43:sha1.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:46" name="ATM128_TCCR1B" ref="0x4065a888" loc="154:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="OCDR2" ref="0x40687640" loc="948:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:23" name="NOISE_BIN_SIZE" ref="0x404ece28" loc="48:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="UPM00" ref="0x40682058" loc="1003:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="OCIE2" ref="0x4066e9a0" loc="779:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="OCF3C" ref="0x4066b8f8" loc="811:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="SM2" ref="0x4066a6c8" loc="821:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PF0" ref="0x40699c08" loc="1258:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="TOV1" ref="0x4066c0f8" loc="794:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PG2" ref="0x40697e18" loc="1283:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="UCSZ10" ref="0x40683908" loc="997:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:30" name="ATM128_ADC_SNGL_1_23" ref="0x406abc18" loc="80:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ATM128_WAVE8_CTC" ref="0x40c0f2e0" loc="76:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:59" name="ATM128_RAMPZ" ref="0x40658670" loc="194:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="INTF3" ref="0x4066e270" loc="773:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="TWWC" ref="0x406620a8" loc="679:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="RAMPZ0" ref="0x40672100" loc="727:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:9" name="ATM128_ADC_DIFF_ADC10_10x" ref="0x406aeca0" loc="59:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:12" name="ATM128_ADC_DIFF_ADC22_10x" ref="0x406ad398" loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="XDIV3" ref="0x406739a8" loc="721:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:125" name="HDLC_CTLESC_BYTE" ref="0x4060c248" loc="78:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="UPE1" ref="0x40680010" loc="1025:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="ATM128_WAVE16_PWM_FAST_9BIT" ref="0x40c2b8f8" loc="209:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_ADC_INT_ENABLE_OFF" ref="0x406bdda0" loc="136:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="_SVID_" ref="0x403e0548" loc="287:/usr/include/math.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="EOFF" ref="0x404a78c8" loc="45:/opt/tinyos-2.1.0/tos/types/TinyError.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_ADC_INT_ENABLE_ON" ref="0x406bc010" loc="137:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:130" name="ATM128_OCR3C" ref="0x40668230" loc="272:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="DDF1" ref="0x406988d0" loc="1267:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="DDG3" ref="0x406aa550" loc="1289:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="MPCM1" ref="0x40680398" loc="1027:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="DDB0" ref="0x4068e010" loc="1148:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="DDC2" ref="0x406a0710" loc="1176:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="DDD4" ref="0x4069ede0" loc="1204:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="DDE6" ref="0x4069b550" loc="1232:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="OCF1B" ref="0x4066df28" loc="793:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="FOC3B" ref="0x40674270" loc="933:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PE1" ref="0x4069b010" loc="1227:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="OCIE1A" ref="0x4066ef08" loc="782:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="SPR0" ref="0x406840e0" loc="980:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="PF3" ref="0x406996f8" loc="1255:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ATM128_CLK8_DIVIDE_8" ref="0x40c12010" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="RXC0" ref="0x40680568" loc="1030:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:8" name="ATM128_ACSR" ref="0x4065f6f0" loc="54:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="ATM128_ADCW" ref="0x4064a860" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:125" name="ATM128_ETIMSK" ref="0x406699c0" loc="264:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="XDIV6" ref="0x40673450" loc="718:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ATM128_CLK8_DIVIDE_32" ref="0x40c12278" loc="47:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:100" name="ATM128_DDRG" ref="0x40657330" loc="216:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="TOIE3" ref="0x4066cbc0" loc="802:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PINF1" ref="0x40697730" loc="1277:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="PING3" ref="0x406aae30" loc="1296:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:128" name="LEDS_LED7" ref="0x40862a90" loc="40:/opt/tinyos-2.1.0/tos/types/Leds.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="TWS5" ref="0x406617c0" loc="696:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="CS21" ref="0x4067be40" loc="860:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="PINA5" ref="0x40691b00" loc="1123:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:112" name="ATM128_TWBR" ref="0x40656448" loc="238:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:67" name="SERIAL_PROTO_ACK" ref="0x4060b158" loc="92:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:40" name="ATM128_OCR1B" ref="0x4065b560" loc="139:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="PINB7" ref="0x4068e1e8" loc="1151:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="PA5" ref="0x40693ed8" loc="1103:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:38" name="ATM128_ICR1" ref="0x4065ced0" loc="134:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_ADC_INT_FLAG_OFF" ref="0x406bd7b8" loc="130:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="DDA1" ref="0x406913d8" loc="1117:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="DDB3" ref="0x4068fab8" loc="1145:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="DDC5" ref="0x406a01d0" loc="1173:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="DDD7" ref="0x4069e8a0" loc="1201:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_ADC_FREE_RUNNING_ON" ref="0x406bd400" loc="125:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="ATM128_CLK8_DIVIDE_1024" ref="0x40c12c38" loc="51:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:14" name="ATM128_WAVE16_PWM_FAST_CAPTURE" ref="0x40c2abb8" loc="217:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:128" name="NOISE_MIN_TRACE" ref="0x404eb778" loc="52:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:132" name="ATM128_OCR3BL" ref="0x40668a98" loc="278:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ISC10" ref="0x40672bc0" loc="735:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="PINF6" ref="0x40698e30" loc="1272:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="DDF2" ref="0x40698710" loc="1266:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="DDG4" ref="0x406aa390" loc="1288:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="CS02" ref="0x4067ce20" loc="849:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="WGM00" ref="0x4067c708" loc="845:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="WGM12" ref="0x40676768" loc="912:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_POWER_IDLE" ref="0x406b1920" loc="121:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128hardware.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="COMB0" ref="0x4067ae98" loc="873:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:8" name="ERESERVE" ref="0x40578038" loc="49:/opt/tinyos-2.1.0/tos/types/TinyError.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:19" name="BIGINT_LEN" ref="0x4083a670" loc="24:crypto.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="UDRE1" ref="0x40681ab0" loc="1022:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:16" name="ATM128_ADC_DIFF_ADC01_1x" ref="0x406adc80" loc="66:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:144" name="ATM128_UBRR0H" ref="0x40666260" loc="301:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:154" name="ATM128_UCSR1B" ref="0x40666b00" loc="313:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="_ISblank" ref="0x403ed7c0" loc="58:/usr/include/ctype.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="RXCIE" ref="0x4067f3b0" loc="1040:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ADIE" ref="0x40694620" loc="1085:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="JTD" ref="0x4066ac10" loc="826:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_ADC_ENABLE_OFF" ref="0x406be488" loc="112:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:109" name="ATM128_XMCRA" ref="0x40656010" loc="232:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="SPIF" ref="0x40686f08" loc="968:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="COM3C1" ref="0x40678db8" loc="894:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="SRE" ref="0x4066bc80" loc="815:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:19" name="ATM128_PINC" ref="0x4065ee90" loc="87:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="SRW01" ref="0x406605f8" loc="706:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PINC1" ref="0x4069f730" loc="1187:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="PIND3" ref="0x4069de48" loc="1215:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="PINE5" ref="0x4069a578" loc="1243:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:56" name="ATM128_EIFR" ref="0x40658010" loc="185:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:53" name="ATM128_MCUCR" ref="0x406599a8" loc="176:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="OCDR0" ref="0x406879d0" loc="950:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:13" name="ELEMENT_LEN" ref="0x4083be18" loc="16:crypto.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:136" name="ATM128_TCNT3" ref="0x40667570" loc="287:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ATM128_ADC_SNGL_ADC2" ref="0x406afdc8" loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:15" name="ATM128_ADC_DIFF_ADC32_200x" ref="0x406ada50" loc="65:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ATM128_ADC_PRESCALE_4" ref="0x406bf348" loc="98:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="DDE1" ref="0x4069be10" loc="1237:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:49" name="ATM128_OCR0" ref="0x4065aed0" loc="163:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ISC50" ref="0x40671ad0" loc="745:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:39" name="ATM128_ICR1H" ref="0x4065b340" loc="136:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:128" name="ATM128_ICR3L" ref="0x40669de0" loc="268:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="INTF1" ref="0x4066e600" loc="775:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="EINVAL" ref="0x404a7c60" loc="47:/opt/tinyos-2.1.0/tos/types/TinyError.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:11" name="ATM128_ADC_DIFF_ADC10_200x" ref="0x406ad160" loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:14" name="ATM128_ADC_DIFF_ADC22_200x" ref="0x406ad810" loc="64:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:-115" name="NOISE_MIN" ref="0x404ec0a0" loc="44:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:25" name="ATM128_ADC_DIFF_ADC12_1x" ref="0x406ab150" loc="75:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="SE" ref="0x4066a1b8" loc="818:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="ADSC" ref="0x406940e0" loc="1082:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="OCDR5" ref="0x406870e8" loc="945:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="PB4" ref="0x40690b08" loc="1134:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="PC6" ref="0x4068d1e8" loc="1162:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:43" name="ATM128_OCR1AH" ref="0x4065a010" loc="146:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:120" name="ATM128_OCR1CL" ref="0x40669138" loc="254:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_PINF" ref="0x4064a010" loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:23" name="ATM128_DDRB" ref="0x4065d760" loc="99:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="LEDS_LED2" ref="0x4083fbe0" loc="35:/opt/tinyos-2.1.0/tos/types/Leds.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PINA0" ref="0x40690438" loc="1128:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PINB2" ref="0x4068ead0" loc="1156:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="PINC4" ref="0x4069f1d8" loc="1184:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="PIND6" ref="0x4069d8f0" loc="1212:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="ICES1" ref="0x406763d8" loc="910:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="TWPS0" ref="0x40661ed0" loc="700:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="TXEN" ref="0x4067fac0" loc="1044:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="UCSZ01" ref="0x406823f0" loc="1005:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PA0" ref="0x40692768" loc="1108:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="UMSEL1" ref="0x40683010" loc="992:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="INTF6" ref="0x4066fd08" loc="770:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="TWA1" ref="0x40662eb8" loc="689:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="TXC1" ref="0x406818e8" loc="1021:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ATM128_TIMER_COMPARE_SET" ref="0x40c2e160" loc="180:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="COM1C1" ref="0x40679f20" loc="884:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="INT1" ref="0x4066f7a8" loc="765:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_ADC_ENABLE_ON" ref="0x406be690" loc="113:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="ATM128_WAVE16_CTC_COMPARE" ref="0x40c2b468" loc="207:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="WGM31" ref="0x406771d8" loc="896:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="CS0" ref="0x4067c370" loc="841:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="TXCIE1" ref="0x4067e5a8" loc="1052:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:-5" name="NOISE_MAX" ref="0x404ec2f8" loc="45:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ACME" ref="0x406867f8" loc="962:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="ATM128_ADCL" ref="0x4064ac58" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="FOC1A" ref="0x40674610" loc="937:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PC0" ref="0x4068dc08" loc="1168:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PD2" ref="0x4069e370" loc="1196:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="PE4" ref="0x4069ca98" loc="1224:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="PF6" ref="0x406991e8" loc="1252:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ADPS0" ref="0x40694b78" loc="1088:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="TWA4" ref="0x40662978" loc="686:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="UPM0" ref="0x40684638" loc="985:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:18" name="ATM128_ADC_DIFF_ADC21_1x" ref="0x406ac150" loc="68:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:139" name="ATM128_TCCR3A" ref="0x40667df0" loc="295:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_COMPARE_OFF" ref="0x40c0f8b8" loc="82:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="shaNull" ref="0x4064dd80" loc="41:sha1.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:8" name="NOISE_DEFAULT_ELEMENT_SIZE" ref="0x404eb2f0" loc="50:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="ATM128_CLK16_EXTERNAL_RISE" ref="0x40c102a8" loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:21" name="ATM128_PORTC" ref="0x4065d340" loc="93:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="RXB80" ref="0x40696d50" loc="1067:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PINE0" ref="0x4069ae60" loc="1248:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="CS00" ref="0x4067b1d0" loc="851:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ITIMER_VIRTUAL" ref="0x404e3010" loc="99:/usr/include/sys/time.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="CS12" ref="0x40676928" loc="913:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="UDRIE0" ref="0x40696628" loc="1063:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="ICNC" ref="0x40677570" loc="900:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:60" name="ATM128_XDIV" ref="0x40658880" loc="197:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="DDA4" ref="0x40692e78" loc="1114:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="DDB6" ref="0x4068f578" loc="1142:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="SPMEN" ref="0x40670b18" loc="756:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ISC01" ref="0x40672d88" loc="736:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="DDF5" ref="0x406981d0" loc="1263:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="BLBSET" ref="0x406705c0" loc="753:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PGWRT" ref="0x40670788" loc="754:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="FOCC" ref="0x40675e78" loc="929:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="COMA1" ref="0x4067a940" loc="870:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:111" name="ATM128_OSCCAL" ref="0x40656238" loc="235:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="AS0" ref="0x4067a1f8" loc="864:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="UPM10" ref="0x406833a0" loc="994:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:98" name="ATM128_PORTF" ref="0x40658ee0" loc="210:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="UCPOL1" ref="0x40683ad8" loc="998:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="TXEN1" ref="0x4067eb08" loc="1055:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="ACBG" ref="0x406952b0" loc="1072:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="OCIE0" ref="0x4066d480" loc="785:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="OCF3A" ref="0x4066b3a8" loc="808:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="SM0" ref="0x4066a518" loc="820:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PG0" ref="0x406aa1c0" loc="1285:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:149" name="ATM128_UCSR0C" ref="0x40666488" loc="304:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:45" name="ATM128_TCNT1H" ref="0x4065a660" loc="151:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:136" name="ATM128_TCNT3L" ref="0x40667788" loc="288:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="WDE" ref="0x40687d50" loc="954:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="ADFR" ref="0x406942a0" loc="1083:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="MUX1" ref="0x406937f8" loc="1097:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:24" name="ATM128_ADC_DIFF_ADC02_1x" ref="0x406ace70" loc="74:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="ATM128_ADC_PRESCALE_32" ref="0x406bf988" loc="101:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="COM3A0" ref="0x40678848" loc="891:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="XDIV1" ref="0x40673d38" loc="723:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="UCSZ2" ref="0x4067fe48" loc="1046:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:134" name="ATM128_OCR3A" ref="0x40668ed0" loc="282:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:156" name="ATM128_UDR1" ref="0x40665010" loc="319:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="DDG1" ref="0x406aa8d0" loc="1291:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="FALSE" ref="0x40445590" loc="68:/opt/tinyos-2.1.0/tos/lib/tossim/tos.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="EBUSY" ref="0x404a7a90" loc="46:/opt/tinyos-2.1.0/tos/types/TinyError.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:32768" name="ATM128_TIMER0_TICKSPPS" ref="0x406ba5c8" loc="55:/opt/tinyos-2.1.0/tos/platforms/micaz/sim/platform_hardware.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="DDC0" ref="0x406a0a90" loc="1178:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="DDD2" ref="0x4069d1d0" loc="1206:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="DDE4" ref="0x4069b8d0" loc="1234:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:30" name="CHANNEL_BANDGAP" ref="0x406ba148" loc="52:/opt/tinyos-2.1.0/tos/platforms/micaz/sim/platform_hardware.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="OCIE3C" ref="0x4066cd90" loc="803:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_CLK16_OFF" ref="0x40c110a8" loc="55:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ISC41" ref="0x40671c98" loc="746:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="_XOPEN_" ref="0x403e06c8" loc="288:/usr/include/math.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="TWGCE" ref="0x40661270" loc="691:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="CSB1" ref="0x40677e40" loc="905:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="MUX4" ref="0x406932b8" loc="1094:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ATM128_POWER_EXT_STANDBY" ref="0x406b1df8" loc="123:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128hardware.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="DOR0" ref="0x40680c60" loc="1034:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="PB7" ref="0x406905f8" loc="1131:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ATM128_WAVE8_PWM_FAST" ref="0x40c0f4f0" loc="77:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="TOIE1" ref="0x4066d2b8" loc="784:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:8" name="DEFAULT_CHANNEL_SIZE" ref="0x40462048" loc="40:/opt/tinyos-2.1.0/tos/lib/tossim/sim_log.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ATM128_DDRE" ref="0x4064a430" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PING1" ref="0x406a91d8" loc="1298:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:32" name="LEDS_LED5" ref="0x408624d0" loc="38:/opt/tinyos-2.1.0/tos/types/Leds.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ATM128_COMPARE_CLEAR" ref="0x40c0fcd0" loc="84:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="TWS3" ref="0x40661b40" loc="698:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="SRL1" ref="0x40660270" loc="704:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:116" name="ATM128_TWCR" ref="0x40656c88" loc="250:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="CS31" ref="0x40675768" loc="923:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="PINA3" ref="0x40691e90" loc="1125:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="PINB5" ref="0x4068e578" loc="1153:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="PINC7" ref="0x406a0c68" loc="1181:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="CPOL" ref="0x40685b68" loc="977:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="SPE" ref="0x40685628" loc="974:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="PA3" ref="0x40692258" loc="1105:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:17" name="ATM128_ADC_DIFF_ADC11_1x" ref="0x406adeb0" loc="67:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="COM1A0" ref="0x406799b0" loc="881:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:115" name="ATM128_TWDR" ref="0x40656a78" loc="247:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="INT4" ref="0x4066f268" loc="762:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:130" name="ATM128_OCR3CL" ref="0x40668448" loc="273:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:135" name="ATM128_OCR3AH" ref="0x40667350" loc="284:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="ISC20" ref="0x40672830" loc="733:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="PINF4" ref="0x406971d8" loc="1274:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="shaSuccess" ref="0x4064dc00" loc="40:sha1.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="WGM10" ref="0x40678498" loc="887:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="ATM128_ADC_SNGL_ADC6" ref="0x406ae628" loc="56:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="XMM1" ref="0x40660ed8" loc="713:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="COMC0" ref="0x40679270" loc="875:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="NOISE_QUANTIZE_INTERVAL" ref="0x404ec820" loc="47:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PB1" ref="0x4068f038" loc="1137:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="PC3" ref="0x4068d6f8" loc="1165:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="_ISpunct" ref="0x403ec7c0" loc="60:/usr/include/ctype.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="WDP2" ref="0x40687f10" loc="955:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="PD5" ref="0x4069fe18" loc="1193:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="PE7" ref="0x4069c588" loc="1221:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:152" name="ATM128_UBRR1H" ref="0x406666b0" loc="307:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="COM01" ref="0x4067c8d0" loc="846:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:52" name="ATM128_MCUSR" ref="0x40659570" loc="172:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="TICIE3" ref="0x4066c658" loc="799:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="WDRF" ref="0x4067d010" loc="828:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="WGM0" ref="0x4067d8d8" loc="835:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="RWWSRE" ref="0x406703f0" loc="752:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="UDRIE" ref="0x4067f740" loc="1042:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="INT7" ref="0x40670ce8" loc="759:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="FE0" ref="0x40680aa0" loc="1033:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:16384" name="_ISprint" ref="0x403ee838" loc="56:/usr/include/ctype.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:8" name="UINT_LEN" ref="0x4083ba20" loc="13:crypto.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="ATM128_CLK16_DIVIDE_1024" ref="0x40c11cd0" loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="SRW11" ref="0x40660988" loc="708:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:25" name="ATM128_PINA" ref="0x4065db90" loc="105:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="USBS1" ref="0x40683568" loc="995:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PIND1" ref="0x4069c200" loc="1217:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="PINE3" ref="0x4069a908" loc="1245:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="TWSTA" ref="0x40664ce0" loc="677:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="TWIE" ref="0x40662428" loc="681:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:44" name="ATM128_TCNT1" ref="0x4065a230" loc="149:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_ADC_SNGL_ADC0" ref="0x406af9b8" loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_ADC_PRESCALE_2" ref="0x406c0f00" loc="96:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="DDA7" ref="0x40692938" loc="1111:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:31" name="CHANNEL_GND" ref="0x406ba348" loc="53:/opt/tinyos-2.1.0/tos/platforms/micaz/sim/platform_hardware.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="ISC60" ref="0x40671740" loc="743:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="REFS1" ref="0x40694d50" loc="1091:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:10" name="ATM128_ADC_DIFF_ADC00_200x" ref="0x406aeee0" loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="RXCIE0" ref="0x40696288" loc="1061:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="ATM128_ADC_PRESCALE_128" ref="0x406bfdc0" loc="103:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:23" name="ATM128_ADC_DIFF_ADC71_1x" ref="0x406acc40" loc="73:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:122" name="ATM128_TCCR1C" ref="0x40669578" loc="258:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="OCDR3" ref="0x40687478" loc="947:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PB2" ref="0x40690e68" loc="1136:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="UPM01" ref="0x40683e80" loc="1002:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:41" name="ATM128_OCR1BH" ref="0x4065b990" loc="141:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="PC4" ref="0x4068d548" loc="1164:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="PD6" ref="0x4069fc68" loc="1192:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="_POSIX_" ref="0x403e0848" loc="289:/usr/include/math.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PF1" ref="0x40699a58" loc="1257:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="TOV2" ref="0x4066d9d8" loc="790:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="PG3" ref="0x40697c68" loc="1282:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="UCSZ11" ref="0x40683738" loc="996:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="INTF4" ref="0x4066e0a8" loc="772:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:13" name="ATM128_SPCR" ref="0x4065e220" loc="69:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="XDIV4" ref="0x406737e0" loc="720:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="TXC" ref="0x40682b00" loc="1011:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="TWEN" ref="0x40662268" loc="680:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:48" name="ATM128_ASSR" ref="0x4065acc0" loc="160:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_WAVE16_NORMAL" ref="0x40c2db68" loc="203:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ATM128_POWER_SAVE" ref="0x406b0058" loc="124:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128hardware.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="__codecvt_error" ref="0x403f9470" loc="210:/usr/include/libio.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="DDB1" ref="0x4068fe38" loc="1147:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="DDC3" ref="0x406a0550" loc="1175:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="DDD5" ref="0x4069ec20" loc="1203:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="DDE7" ref="0x4069b390" loc="1231:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="OCF1C" ref="0x4066bac0" loc="812:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="FOC3C" ref="0x40674438" loc="934:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PD0" ref="0x4069e6d0" loc="1198:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PE2" ref="0x4069cdf8" loc="1226:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="OCIE1B" ref="0x4066d0f0" loc="783:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="SPR1" ref="0x40685ee8" loc="979:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="PF4" ref="0x40699548" loc="1254:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:33" name="ATM128_WDTCR" ref="0x4065c460" loc="119:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="RXEN0" ref="0x406967f0" loc="1064:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="CHANNEL_THERMISTOR" ref="0x406bbbc8" loc="50:/opt/tinyos-2.1.0/tos/platforms/micaz/sim/platform_hardware.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_CLK16_NORMAL" ref="0x40c112f8" loc="56:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="UMSEL" ref="0x406842b8" loc="983:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="COM20" ref="0x4067b8f8" loc="857:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="XMBK" ref="0x40660b58" loc="711:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="RXC1" ref="0x40681728" loc="1020:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="ICF3" ref="0x4066b1e0" loc="807:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:57" name="ATM128_EIMSK" ref="0x40658230" loc="188:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:10" name="ENOMEM" ref="0x405783f0" loc="51:/opt/tinyos-2.1.0/tos/types/TinyError.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:27" name="ATM128_PORTA" ref="0x4065c010" loc="111:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="TWS6" ref="0x40661600" loc="695:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="CS22" ref="0x4067bc80" loc="859:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="CS10" ref="0x40676ca8" loc="915:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="ICNC3" ref="0x40676e80" loc="918:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ACIS0" ref="0x40695d20" loc="1078:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="PINA6" ref="0x40691938" loc="1122:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:12" name="VALUE_K" ref="0x4083a250" loc="20:crypto.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:120" name="ATM128_OCR1C" ref="0x40656ea8" loc="253:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:13" name="ATM128_ADC_DIFF_ADC32_10x" ref="0x406ad5d0" loc="63:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:106" name="ATM128_EICRA" ref="0x40657ba8" loc="226:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="__codecvt_partial" ref="0x403f92a0" loc="209:/usr/include/libio.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="ACI" ref="0x40695610" loc="1074:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="UDRE" ref="0x40682cc0" loc="1012:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="PA6" ref="0x40693d28" loc="1102:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:69" name="SERIAL_PROTO_PACKET_NOACK" ref="0x4060b660" loc="94:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="CHANNEL_BATTERY" ref="0x406bbe98" loc="51:/opt/tinyos-2.1.0/tos/platforms/micaz/sim/platform_hardware.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="DDA2" ref="0x40691218" loc="1116:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="DDB4" ref="0x4068f8f8" loc="1144:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="DDC6" ref="0x406a0010" loc="1172:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ISC11" ref="0x406729f8" loc="734:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="PINF7" ref="0x40698c68" loc="1271:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ATM128_WAVE16_PWM_10BIT" ref="0x40c2b230" loc="206:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="DDF3" ref="0x40698550" loc="1265:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_ADC_PRESCALE_2b" ref="0x406bf138" loc="97:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="XDIVEN" ref="0x40673288" loc="717:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="FOCA" ref="0x40675af8" loc="927:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="WGM01" ref="0x4067cc60" loc="848:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="WGM13" ref="0x406765a0" loc="911:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="COMB1" ref="0x4067acd0" loc="872:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:11" name="ELAST" ref="0x40578798" loc="53:/opt/tinyos-2.1.0/tos/types/TinyError.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="UPE" ref="0x406811e8" loc="1015:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="IVSEL" ref="0x4066a890" loc="822:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:27" name="ATM128_ADC_DIFF_ADC32_1x" ref="0x406ab5b0" loc="77:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ACIC" ref="0x40695990" loc="1076:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:11" name="ATM128_UCSR0A" ref="0x4065fd68" loc="63:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:157" name="ATM128_UCSR1C" ref="0x40665238" loc="322:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ATM128_CLK16_DIVIDE_64" ref="0x40c117d0" loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="TSM" ref="0x40686470" loc="960:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PUD" ref="0x406869a8" loc="963:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="DORD" ref="0x406857e8" loc="975:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="ADIF" ref="0x40694460" loc="1084:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_ADC_START_CONVERSION_OFF" ref="0x406bea98" loc="118:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="TXB8" ref="0x4067e1f8" loc="1048:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:108" name="ATM128_XMCRB" ref="0x40657dc8" loc="229:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="COM3B0" ref="0x40678be8" loc="893:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="JTRF" ref="0x4066add0" loc="827:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:16" name="ATM128_PIND" ref="0x4065e850" loc="78:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="LEDS_LED0" ref="0x4083f630" loc="33:/opt/tinyos-2.1.0/tos/types/Leds.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PINB0" ref="0x4068ee60" loc="1158:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="OCF2" ref="0x4066d818" loc="789:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="COM0" ref="0x4067dc58" loc="837:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PINC2" ref="0x4069f568" loc="1186:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="PIND4" ref="0x4069dc80" loc="1214:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="UCSZ0" ref="0x40684b88" loc="988:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="PINE6" ref="0x4069a3b0" loc="1242:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ATM128_TIMER_COMPARE_CLEAR" ref="0x40c2fe60" loc="179:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="SPMIE" ref="0x40670058" loc="750:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="OCDR1" ref="0x40687808" loc="949:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ATM128_ADC_SNGL_ADC3" ref="0x406ae010" loc="53:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PSR0" ref="0x40686b68" loc="964:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="WCOL" ref="0x406850e0" loc="969:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="DDD0" ref="0x4069d550" loc="1208:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="DDE2" ref="0x4069bc50" loc="1236:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ATM128_WAVE16_PWM_9BIT" ref="0x40c2b010" loc="205:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="OCIE3A" ref="0x4066c828" loc="800:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="_ISOC_" ref="0x403e09d0" loc="290:/usr/include/math.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ISC51" ref="0x40671908" loc="744:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="U2X0" ref="0x4067f010" loc="1036:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:113" name="ATM128_TWSR" ref="0x40656658" loc="241:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="MUX2" ref="0x40693638" loc="1096:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="OCDR6" ref="0x40674f00" loc="944:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="TXB80" ref="0x40696f18" loc="1068:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="PB5" ref="0x40690958" loc="1133:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="PC7" ref="0x4068d038" loc="1161:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:20" name="ATM128_DDRC" ref="0x4065d120" loc="90:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:99" name="ATM128_PING" ref="0x40657120" loc="213:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:8" name="LEDS_LED3" ref="0x4083feb8" loc="36:/opt/tinyos-2.1.0/tos/types/Leds.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="TXCIE" ref="0x4067f578" loc="1041:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PINA1" ref="0x40690270" loc="1127:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="__codecvt_ok" ref="0x403f90b8" loc="208:/usr/include/libio.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="TWPS1" ref="0x40661d08" loc="699:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="PINB3" ref="0x4068e908" loc="1155:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="PINC5" ref="0x4069f010" loc="1183:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="PIND7" ref="0x4069d728" loc="1211:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="UCSZ02" ref="0x40696b88" loc="1066:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PA1" ref="0x406925b8" loc="1107:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="ATM128_CLK8_DIVIDE_256" ref="0x40c129c0" loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="WGMA0" ref="0x40679600" loc="877:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="WGMB2" ref="0x40677ac0" loc="903:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="INTF7" ref="0x4066fb40" loc="769:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="TWA2" ref="0x40662cf8" loc="688:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="CHANNEL_RSSI" ref="0x406bb8d8" loc="49:/opt/tinyos-2.1.0/tos/platforms/micaz/sim/platform_hardware.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ATM128_ADC_PRESCALE_8" ref="0x406bf558" loc="99:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="TCR0UB" ref="0x4067a768" loc="867:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="COM1B0" ref="0x40679d50" loc="883:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="INT2" ref="0x4066f5e8" loc="764:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:133" name="ATM128_OCR3BH" ref="0x40668cb0" loc="279:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="ISC30" ref="0x406724a0" loc="731:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ITIMER_PROF" ref="0x404e3230" loc="103:/usr/include/sys/time.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PINF2" ref="0x40697568" loc="1276:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="PING4" ref="0x406aac68" loc="1295:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:8" name="ATM128_ADC_PRESCALE" ref="0x406be010" loc="107:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="WGM20" ref="0x4067b568" loc="855:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="WGM32" ref="0x406753e8" loc="921:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:28" name="ATM128_ADC_DIFF_ADC42_1x" ref="0x406ab7e0" loc="78:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="ATM128_ADC_SNGL_ADC4" ref="0x406ae218" loc="54:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:8" name="ATM128_WAVE16_PWM_CAPTURE_LOW" ref="0x40c2bdb0" loc="211:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="CS1" ref="0x4067c1c0" loc="840:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:42" name="ATM128_OCR1AL" ref="0x4065bdc8" loc="145:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="TWINT" ref="0x40664958" loc="675:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="ATM128_CLK16_DIVIDE_256" ref="0x40c11a48" loc="59:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:32" name="ATM128_SFIOR" ref="0x4065c240" loc="116:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="TOS_SERIAL_CC1000_ID" ref="0x4060c8b8" loc="85:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="ATM128_ADC" ref="0x4064aa58" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="_IScntrl" ref="0x403ec010" loc="59:/usr/include/ctype.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="FOC1B" ref="0x406747d8" loc="938:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="MPCM" ref="0x40681558" loc="1017:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PC1" ref="0x4068da58" loc="1167:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="WDP0" ref="0x406862b0" loc="957:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="PD3" ref="0x4069e1c0" loc="1195:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="PE5" ref="0x4069c8e8" loc="1223:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="PF7" ref="0x40699038" loc="1251:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="ATM128_WAVE16_PWM_FAST_10BIT" ref="0x40c2bb50" loc="210:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ADPS1" ref="0x406949b0" loc="1087:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="TWA5" ref="0x406627b8" loc="685:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="TICIE1" ref="0x4066ed38" loc="781:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="EXTRF" ref="0x4067d398" loc="830:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="UPM1" ref="0x40684478" loc="984:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="UCSZ" ref="0x4067fc80" loc="1045:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="ATM128_POWER_STANDBY" ref="0x406b02b8" loc="125:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128hardware.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="BORF" ref="0x4067d1d0" loc="829:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:138" name="ATM128_TCCR3B" ref="0x40667bc8" loc="292:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="RXB81" ref="0x4067eea0" loc="1057:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:18" name="ATM128_PORTD" ref="0x4065ec80" loc="84:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PINE1" ref="0x4069ac98" loc="1247:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="CS01" ref="0x4067b010" loc="850:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PGERS" ref="0x40670950" loc="755:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="__codecvt_noconv" ref="0x403f9660" loc="211:/usr/include/libio.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="UDRIE1" ref="0x4067e778" loc="1053:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="ADEN" ref="0x40695ef0" loc="1081:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="ATM128_ADMUX" ref="0x4065f4e0" loc="51:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4096" name="_ISxdigit" ref="0x403e58b0" loc="54:/usr/include/ctype.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="DDA5" ref="0x40692cb8" loc="1113:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:34" name="TOS_AM_GROUP" ref="0x4060fb48" loc="27:/opt/tinyos-2.1.0/tos/types/AM.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="DDB7" ref="0x4068f3b8" loc="1141:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="ISC70" ref="0x406713b0" loc="741:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="DDF6" ref="0x40698010" loc="1262:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:137" name="ATM128_TCNT3H" ref="0x406679a0" loc="289:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="AVR_CLOCK_OFF" ref="0x40c106e0" loc="67:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:68" name="SERIAL_PROTO_PACKET_ACK" ref="0x4060b3d0" loc="93:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:47" name="ATM128_TCCR1A" ref="0x4065aab0" loc="157:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:63" name="ATM128_SREG" ref="0x40658aa0" loc="202:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="UPM11" ref="0x406831d8" loc="993:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:121" name="ATM128_OCR1CH" ref="0x40669350" loc="255:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:512" name="_ISlower" ref="0x403e6168" loc="51:/usr/include/ctype.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_ADC_START_CONVERSION_ON" ref="0x406bed00" loc="119:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="TOS_SERIAL_ACTIVE_MESSAGE_ID" ref="0x4060c658" loc="84:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:101" name="ATM128_PORTG" ref="0x40657550" loc="219:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="OCF3B" ref="0x4066b570" loc="809:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="SM1" ref="0x4066a368" loc="819:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PG1" ref="0x406aa010" loc="1284:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="TOV0" ref="0x4066c478" loc="796:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:9" name="ATM128_UBRR0L" ref="0x4065f918" loc="57:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="INTF2" ref="0x4066e438" loc="774:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ECANCEL" ref="0x404a7708" loc="44:/opt/tinyos-2.1.0/tos/types/TinyError.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="COM3A1" ref="0x40678678" loc="890:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:15" name="ATM128_SPDR" ref="0x4065e640" loc="75:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="XDIV2" ref="0x40673b70" loc="722:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="ATM128_ADC_VREF_2_56" ref="0x406af010" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="ATM128_CLK8_DIVIDE_64" ref="0x40c124e0" loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="DOR" ref="0x40681038" loc="1014:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="UPE0" ref="0x40680e20" loc="1035:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:19" name="ATM128_ADC_DIFF_ADC31_1x" ref="0x406ac380" loc="69:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:128" name="NOISE_HASHTABLE_SIZE" ref="0x404eb550" loc="51:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:132" name="ATM128_OCR3B" ref="0x40668880" loc="277:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="U2X" ref="0x40681398" loc="1016:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_TIMER_COMPARE_TOGGLE" ref="0x40c2fc20" loc="178:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ATM128_ADC_VREF_RSVD" ref="0x406b0d20" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="DDF0" ref="0x40698a90" loc="1268:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="DDG2" ref="0x406aa710" loc="1290:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:8" name="ATM128_ADC_DIFF_ADC00_10x" ref="0x406aea68" loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="MPCM0" ref="0x4067f1d8" loc="1037:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="SRW" ref="0x4066be30" loc="816:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="ACD" ref="0x406950f0" loc="1071:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ATM128_CLK16_DIVIDE_8" ref="0x40c11560" loc="57:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="DDC1" ref="0x406a08d0" loc="1177:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="DDD3" ref="0x4069d010" loc="1205:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="DDE5" ref="0x4069b710" loc="1233:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="OCF1A" ref="0x4066dd60" loc="792:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="FOC3A" ref="0x406740a8" loc="932:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PE0" ref="0x4069b1c0" loc="1228:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PF2" ref="0x406998a8" loc="1256:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:52" name="ATM128_MCUCSR" ref="0x40659788" loc="173:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="USBS" ref="0x406847f8" loc="986:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="PG4" ref="0x40697ab8" loc="1281:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:9" name="ATM128_WAVE16_PWM_COMPARE_LOW" ref="0x40c2a030" loc="212:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:38" name="ATM128_ICR1L" ref="0x4065b130" loc="135:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:11" name="ENOACK" ref="0x405785c0" loc="52:/opt/tinyos-2.1.0/tos/types/TinyError.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="CSB2" ref="0x40677c80" loc="904:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:150" name="SIM_LOG_OUTPUT_COUNT" ref="0x4046c808" loc="56:/opt/tinyos-2.1.0/tos/lib/tossim/sim_log.c">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="SPI2X" ref="0x406852a8" loc="970:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="ATM128_CLK16_EXTERNAL_FALL" ref="0x40c10010" loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:126" name="HDLC_FLAG_BYTE" ref="0x4060c010" loc="77:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="CPHA" ref="0x40685d28" loc="978:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:20" name="CPELEMENT_LEN" ref="0x4083a058" loc="17:crypto.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="ICF1" ref="0x4066db98" loc="791:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="DOR1" ref="0x40681e20" loc="1024:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:97" name="ATM128_DDRF" ref="0x40658cc0" loc="207:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="TOIE2" ref="0x4066eb68" loc="780:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PINF0" ref="0x406978f8" loc="1278:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PING2" ref="0x406a9010" loc="1297:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:64" name="LEDS_LED6" ref="0x408627a8" loc="39:/opt/tinyos-2.1.0/tos/types/Leds.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_WAVE8_PWM" ref="0x40c0f100" loc="75:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="TWS4" ref="0x40661980" loc="697:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="SRL2" ref="0x406600b0" loc="703:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="ERETRY" ref="0x404a7e30" loc="48:/opt/tinyos-2.1.0/tos/types/TinyError.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="CS20" ref="0x4067a038" loc="861:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="ICNC1" ref="0x40676210" loc="909:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:42" name="ATM128_OCR1A" ref="0x4065bbb0" loc="144:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="CS32" ref="0x406755a8" loc="922:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="PINA4" ref="0x40691cc8" loc="1124:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="PINB6" ref="0x4068e3b0" loc="1152:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="PA4" ref="0x406920a8" loc="1104:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="DDA0" ref="0x40691598" loc="1118:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="DDB2" ref="0x4068fc78" loc="1146:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="COM1A1" ref="0x406797e0" loc="880:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="DDC4" ref="0x406a0390" loc="1174:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="DDD6" ref="0x4069ea60" loc="1202:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="INT5" ref="0x4066f0a8" loc="761:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:256" name="_ISupper" ref="0x403e7980" loc="50:/usr/include/ctype.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="ISC21" ref="0x40672668" loc="732:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="PINF5" ref="0x40697010" loc="1273:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="TWSTO" ref="0x40664ea8" loc="678:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="WGM11" ref="0x406782d0" loc="886:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="XMM2" ref="0x40660d18" loc="712:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="ATM128_ADC_SNGL_ADC7" ref="0x406ae830" loc="57:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="COMC1" ref="0x406790a8" loc="874:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PSR321" ref="0x40686d38" loc="965:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:124" name="ATM128_ETIFR" ref="0x40669798" loc="261:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:37" name="ATM128_TCCR2" ref="0x4065ccc0" loc="131:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="UDRE0" ref="0x406808f0" loc="1032:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:155" name="ATM128_UCSR1A" ref="0x40666d28" loc="316:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="WGM1" ref="0x4067de18" loc="838:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="SPIE" ref="0x40685478" loc="973:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="COM3C0" ref="0x40677010" loc="895:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="FE1" ref="0x40681c60" loc="1023:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:22" name="ATM128_PINB" ref="0x4065d550" loc="96:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="SRW00" ref="0x406607c0" loc="707:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="OCF0" ref="0x4066c2b8" loc="795:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="FOC2" ref="0x4067b3a0" loc="854:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PINC0" ref="0x4069f8f8" loc="1188:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="PIND2" ref="0x4069c038" loc="1216:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="PINE4" ref="0x4069a740" loc="1244:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_ADC_VREF_OFF" ref="0x406b08b8" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="FE" ref="0x40682e68" loc="1013:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_WAVE8_NORMAL" ref="0x40c10ea8" loc="74:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="ACO" ref="0x40695460" loc="1073:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_ADC_LEFT_ADJUST" ref="0x406af638" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="AVR_CLOCK_ON" ref="0x40c108f0" loc="68:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_TIMER_COMPARE_NORMAL" ref="0x40c2f9d8" loc="177:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:-115" name="NOISE_MIN_QUANTIZE" ref="0x404ec5a8" loc="46:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="MSTR" ref="0x406859a8" loc="976:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:29" name="ATM128_ADC_DIFF_ADC52_1x" ref="0x406aba10" loc="79:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:36" name="ATM128_TCNT2" ref="0x4065caa0" loc="128:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_ADC_SNGL_ADC1" ref="0x406afbc0" loc="51:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:111" name="NOISE_NUM_VALUES" ref="0x404ebbf0" loc="53:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="DDE0" ref="0x4069a010" loc="1238:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="ISC61" ref="0x40671578" loc="742:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="RXCIE1" ref="0x4067e3d8" loc="1051:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="INTF0" ref="0x4066e7c8" loc="776:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="PORF" ref="0x4067d558" loc="831:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="RXB8" ref="0x4067e038" loc="1047:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_ADC_VREF_AVCC" ref="0x406b0b18" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="OCDR4" ref="0x406872b0" loc="946:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="PB3" ref="0x40690cb8" loc="1135:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="PC5" ref="0x4068d398" loc="1163:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="PD7" ref="0x4069fab8" loc="1191:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="TOS_SERIAL_802_15_4_ID" ref="0x4060cb28" loc="86:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2048" name="_ISdigit" ref="0x403e50f8" loc="53:/usr/include/ctype.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="OCR0UB" ref="0x4067a598" loc="866:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="ATM128_ADCH" ref="0x4064ae58" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="TOV3" ref="0x4066b730" loc="810:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="UCSZ00" ref="0x406825c0" loc="1006:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="UCSZ12" ref="0x4067ecd8" loc="1056:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:44" name="ATM128_TCNT1L" ref="0x4065a448" loc="150:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="UMSEL0" ref="0x40683cb8" loc="1001:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="INTF5" ref="0x4066fed0" loc="771:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="TWA0" ref="0x406610a8" loc="690:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="TXC0" ref="0x40680728" loc="1031:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:104" name="ATM128_SPMCR" ref="0x40657770" loc="222:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_WAVE16_PWM_8BIT" ref="0x40c2dd80" loc="204:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="COM1C0" ref="0x40678108" loc="885:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="SUCCESS" ref="0x404a71a8" loc="41:/opt/tinyos-2.1.0/tos/types/TinyError.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="IVCE" ref="0x4066aa50" loc="823:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="ESIZE" ref="0x404a7530" loc="43:/opt/tinyos-2.1.0/tos/types/TinyError.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="XDIV5" ref="0x40673618" loc="719:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="INT0" ref="0x4066f968" loc="766:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:131" name="ATM128_OCR3CH" ref="0x40668660" loc="274:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="WGM30" ref="0x406773a0" loc="897:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_COMPARE_TOGGLE" ref="0x40c0fac8" loc="83:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:11" name="AM_TIME_SERIAL_MSG" ref="0x4062e7c0" loc="14:TimeSerial.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_ADC_INT_FLAG_ON" ref="0x406bd9d0" loc="131:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="TXCIE0" ref="0x40696458" loc="1062:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:65535" name="AM_BROADCAST_ADDR" ref="0x4060f808" loc="15:/opt/tinyos-2.1.0/tos/types/AM.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:22" name="ATM128_ADC_DIFF_ADC61_1x" ref="0x406aca10" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="FAIL" ref="0x404a7368" loc="42:/opt/tinyos-2.1.0/tos/types/TinyError.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PD1" ref="0x4069e520" loc="1197:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="OCIE1C" ref="0x4066b010" loc="804:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="PE3" ref="0x4069cc48" loc="1225:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="PF5" ref="0x40699398" loc="1253:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:8" name="_ISalnum" ref="0x403eb010" loc="61:/usr/include/ctype.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="ATM128_ADCSRA" ref="0x4065f2c0" loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="RXEN1" ref="0x4067e940" loc="1054:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:34" name="ATM128_OCDR" ref="0x4065c670" loc="122:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="COM21" ref="0x4067b730" loc="856:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:9" name="EALREADY" ref="0x40578220" loc="50:/opt/tinyos-2.1.0/tos/types/TinyError.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:128" name="UINT_MSB" ref="0x4083bc08" loc="14:crypto.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:20" name="ATM128_ADC_DIFF_ADC41_1x" ref="0x406ac5b0" loc="70:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:31" name="ATM128_ADC_SNGL_GND" ref="0x406abe10" loc="81:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ACIS1" ref="0x40695b58" loc="1077:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:24" name="ATM128_PORTB" ref="0x4065d980" loc="102:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="TWS7" ref="0x40661440" loc="694:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="CS11" ref="0x40676ae8" loc="914:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="PINA7" ref="0x40691770" loc="1121:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:114" name="ATM128_TWAR" ref="0x40656868" loc="244:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:58" name="ATM128_EICRB" ref="0x40658450" loc="191:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="PA7" ref="0x40693b78" loc="1101:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:54" name="ATM128_TIFR" ref="0x40659bb8" loc="179:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:128" name="ATM128_ICR3" ref="0x40669bd0" loc="267:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="ATM128_ADC_PRESCALE_64" ref="0x406bfba0" loc="102:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="DDA3" ref="0x40691058" loc="1115:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="DDB5" ref="0x4068f738" loc="1143:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="DDC7" ref="0x4068ddd8" loc="1171:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ISC00" ref="0x40671010" loc="737:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="DDF4" ref="0x40698390" loc="1264:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="FOCB" ref="0x40675cb8" loc="928:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ATM128_CLK8_OFF" ref="0x40c15b40" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="TOS_AM_ADDRESS" ref="0x4060fd78" loc="28:/opt/tinyos-2.1.0/tos/types/AM.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="COMA0" ref="0x4067ab08" loc="871:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:11" name="ATM128_WAVE16_PWM_COMPARE_HIGH" ref="0x40c2a500" loc="214:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="FOC" ref="0x4067d718" loc="834:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="UCPOL0" ref="0x40682790" loc="1007:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="TXEN0" ref="0x406969b8" loc="1065:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:10" name="ATM128_UCSR0B" ref="0x4065fb40" loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:153" name="ATM128_UBRR1L" ref="0x406668d8" loc="310:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:14" name="ATM128_SPSR" ref="0x4065e430" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="RXC" ref="0x40682950" loc="1010:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="ATM128_POWER_DOWN" ref="0x406b04f8" loc="126:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128hardware.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="MUX0" ref="0x406939b8" loc="1098:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ITIMER_REAL" ref="0x404e4d30" loc="96:/usr/include/sys/time.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:4" name="RXEN" ref="0x4067f900" loc="1043:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="COM3B1" ref="0x40678a18" loc="892:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="XDIV0" ref="0x40673f00" loc="724:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="ATM128_PINE" ref="0x4064a220" loc="30:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:26" name="ATM128_DDRA" ref="0x4065dda0" loc="108:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="LEDS_LED1" ref="0x4083f908" loc="34:/opt/tinyos-2.1.0/tos/types/Leds.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="TCN0UB" ref="0x4067a3c8" loc="865:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="PINB1" ref="0x4068ec98" loc="1157:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="COM1" ref="0x4067da98" loc="836:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="PINC3" ref="0x4069f3a0" loc="1185:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="UCSZ1" ref="0x406849c0" loc="987:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:5" name="PIND5" ref="0x4069dab8" loc="1213:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="PINE7" ref="0x4069a1e8" loc="1241:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="TWEA" ref="0x40664b18" loc="676:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:12" name="ATM128_UDR0" ref="0x4065e010" loc="66:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="DDG0" ref="0x406aaa90" loc="1292:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:6" name="RWWSB" ref="0x40670220" loc="751:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="TRUE" ref="0x40445740" loc="68:/opt/tinyos-2.1.0/tos/lib/tossim/tos.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="DDD1" ref="0x4069d390" loc="1207:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:20" name="NOISE_HISTORY" ref="0x404eb058" loc="49:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="DDE3" ref="0x4069ba90" loc="1235:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:35" name="ATM128_OCR2" ref="0x4065c880" loc="125:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:7" name="IDRD" ref="0x40674b70" loc="942:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:104" name="ATM128_SPMCSR" ref="0x40657988" loc="223:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:97" name="CONSTANT_M" ref="0x4083b838" loc="12:crypto.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="OCIE3B" ref="0x4066c9f8" loc="801:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:8192" name="_ISspace" ref="0x403ee088" loc="55:/usr/include/ctype.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="ISC40" ref="0x40671e60" loc="747:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="U2X1" ref="0x406801d0" loc="1026:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="CSB0" ref="0x40676038" loc="906:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="UCPOL" ref="0x40684d50" loc="989:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:3" name="MUX3" ref="0x40693478" loc="1095:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128_sim.h">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:255" name="NO_TASK" ref="0x4063f0a8" loc="48:/opt/tinyos-2.1.0/tos/lib/tossim/SimSchedulerBasicP.nc">
            <component-ref qname="SimSchedulerBasicP"/>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="NUM_TASKS" ref="0x4062dec0" loc="47:/opt/tinyos-2.1.0/tos/lib/tossim/SimSchedulerBasicP.nc">
            <component-ref qname="SimSchedulerBasicP"/>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:0" name="startDone" ref="0x40bbf620" loc="59:/opt/tinyos-2.1.0/tos/lib/tossim/SerialActiveMessageC.nc">
            <component-ref qname="SerialActiveMessageC"/>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:1" name="stopDone" ref="0x40bc0c88" loc="60:/opt/tinyos-2.1.0/tos/lib/tossim/SerialActiveMessageC.nc">
            <component-ref qname="SerialActiveMessageC"/>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:2" name="MINDT" ref="0x40c50ef8" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
            <component-ref qname="Atm128AlarmAsyncP"/>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
        <constant cst="I:230" name="MAXT" ref="0x40c4f0f0" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
            <component-ref qname="Atm128AlarmAsyncP"/>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
    </constants>
    <functions>
    </functions>
    <typedefs>
        <typedef name="intptr_t" ref="0x401c5ea8" loc="126:/usr/include/stdint.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="intptr_t" ref="0x401c5ea8"/></typename>
            </type-int>
        </typedef>
        <typedef name="serial_packet_t" ref="0x40619628" loc="123:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_packet" ref="0x40619010"/>
                <typename><typedef-ref name="serial_packet_t" ref="0x40619628"/></typename>
            </type-tag>
        </typedef>
        <typedef name="Atm128_TCCR3B_t" ref="0x40c288c8" loc="238:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c28010"/>
                <typename><typedef-ref name="Atm128_TCCR3B_t" ref="0x40c288c8"/></typename>
            </type-tag>
        </typedef>
        <typedef name="pthread_spinlock_t" ref="0x403049d0" loc="201:/usr/include/bits/pthreadtypes.h">
            <type-qualified volatile="">
                <typename><typedef-ref name="pthread_spinlock_t" ref="0x403049d0"/></typename>
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </type-qualified>
        </typedef>
        <typedef name="wchar_t" ref="0x4002e6d8" loc="326:/usr/lib/gcc/i486-linux-gnu/4.3.3/include/stddef.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="wchar_t" ref="0x4002e6d8"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128Admux_t" ref="0x406c0b78" loc="90:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x406c08f0"/>
                <typename><typedef-ref name="Atm128Admux_t" ref="0x406c0b78"/></typename>
            </type-tag>
        </typedef>
        <typedef name="ushort" ref="0x402ea738" loc="152:/usr/include/sys/types.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="ushort" ref="0x402ea738"/></typename>
            </type-int>
        </typedef>
        <typedef name="tossim_footer_t" ref="0x4060d048" loc="16:/opt/tinyos-2.1.0/tos/lib/tossim/TossimRadioMsg.h">
            <type-tag size="I:2" alignment="I:1"><nx_struct-ref name="tossim_footer" ref="0x4060ec78"/>
                <typename><typedef-ref name="tossim_footer_t" ref="0x4060d048"/></typename>
            </type-tag>
        </typedef>
        <typedef name="_G_uint32_t" ref="0x403fcd78" loc="56:/usr/include/_G_config.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="_G_uint32_t" ref="0x403fcd78"/></typename>
            </type-int>
        </typedef>
        <typedef name="__int64_t" ref="0x402db920" loc="47:/usr/include/bits/types.h">
            <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="__int64_t" ref="0x402db920"/></typename>
            </type-int>
        </typedef>
        <typedef name="__int16_t" ref="0x402db010" loc="39:/usr/include/bits/types.h">
            <type-int cname="short" size="I:2" alignment="I:2">
                <typename><typedef-ref name="__int16_t" ref="0x402db010"/></typename>
            </type-int>
        </typedef>
        <typedef name="serial_header_t" ref="0x40608d90" loc="118:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0x40608330"/>
                <typename><typedef-ref name="serial_header_t" ref="0x40608d90"/></typename>
            </type-tag>
        </typedef>
        <typedef name="TMilli" ref="0x40872340" loc="29:/opt/tinyos-2.1.0/tos/lib/timer/Timer.h">
            <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x40872178"/>
                <typename><typedef-ref name="TMilli" ref="0x40872340"/></typename>
            </type-tag>
        </typedef>
        <typedef name="_G_int16_t" ref="0x403fc380" loc="53:/usr/include/_G_config.h">
            <type-int cname="short" size="I:2" alignment="I:2">
                <typename><typedef-ref name="_G_int16_t" ref="0x403fc380"/></typename>
            </type-int>
        </typedef>
        <typedef name="__u_char" ref="0x402dc2c0" loc="31:/usr/include/bits/types.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="__u_char" ref="0x402dc2c0"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_TCNT0_t" ref="0x40c0c830" loc="102:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_TCNT0_t" ref="0x40c0c830"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_OCR1BL_t" ref="0x40c24388" loc="269:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_OCR1BL_t" ref="0x40c24388"/></typename>
            </type-int>
        </typedef>
        <typedef name="__intptr_t" ref="0x402e47a8" loc="189:/usr/include/bits/types.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__intptr_t" ref="0x402e47a8"/></typename>
            </type-int>
        </typedef>
        <typedef name="__qaddr_t" ref="0x402e4360" loc="185:/usr/include/bits/types.h">
            <type-pointer size="I:4" alignment="I:4">
                <type-int cname="long long" size="I:8" alignment="I:8">
                    <typename><typedef-ref name="__quad_t" ref="0x402dbe20"/></typename>
                </type-int>
                <typename><typedef-ref name="__qaddr_t" ref="0x402e4360"/></typename>
            </type-pointer>
        </typedef>
        <typedef name="Atm128_OCR2_t" ref="0x40c0b2c0" loc="107:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_OCR2_t" ref="0x40c0b2c0"/></typename>
            </type-int>
        </typedef>
        <typedef name="fd_set" ref="0x402f0108" loc="78:/usr/include/sys/select.h">
            <type-tag size="I:128" alignment="I:4"><struct-ref ref="0x402f2ef8"/>
                <typename><typedef-ref name="fd_set" ref="0x402f0108"/></typename>
            </type-tag>
        </typedef>
        <typedef name="sim_time_t" ref="0x40445c80" loc="43:/opt/tinyos-2.1.0/tos/lib/tossim/sim_tossim.h">
            <documentation loc="24:/opt/tinyos-2.1.0/tos/lib/tossim/sim_tossim.h">
                <short>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.</short>
                <long>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
            </documentation>
            <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="sim_time_t" ref="0x40445c80"/></typename>
            </type-int>
        </typedef>
        <typedef name="__caddr_t" ref="0x402e4588" loc="186:/usr/include/bits/types.h">
            <type-pointer size="I:4" alignment="I:4">
                <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                <typename><typedef-ref name="__caddr_t" ref="0x402e4588"/></typename>
            </type-pointer>
        </typedef>
        <typedef name="NN_UINT" ref="0x409a8588" loc="89:NN.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_UINT" ref="0x409a8588"/></typename>
            </type-int>
        </typedef>
        <typedef name="__time_t" ref="0x402e2970" loc="149:/usr/include/bits/types.h">
            <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__time_t" ref="0x402e2970"/></typename>
            </type-int>
        </typedef>
        <typedef name="__ssize_t" ref="0x402e5e38" loc="180:/usr/include/bits/types.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__ssize_t" ref="0x402e5e38"/></typename>
            </type-int>
        </typedef>
        <typedef name="mode_t" ref="0x402e7570" loc="72:/usr/include/sys/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="mode_t" ref="0x402e7570"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_TCCR1C_t" ref="0x40c27b88" loc="253:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c27630"/>
                <typename><typedef-ref name="Atm128_TCCR1C_t" ref="0x40c27b88"/></typename>
            </type-tag>
        </typedef>
        <typedef name="_IO_lock_t" ref="0x403fb5c8" loc="180:/usr/include/libio.h">
            <type-void size="I:1" alignment="I:1">
                <typename><typedef-ref name="_IO_lock_t" ref="0x403fb5c8"/></typename>
            </type-void>
        </typedef>
        <typedef name="int_least32_t" ref="0x401c2ba8" loc="68:/usr/include/stdint.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="int_least32_t" ref="0x401c2ba8"/></typename>
            </type-int>
        </typedef>
        <typedef name="__builtin_va_list" ref="0x4002a028"  loc="NONE">
            <type-pointer size="I:4" alignment="I:4">
                <type-tag size="V:" alignment="V:"><struct-ref ref="0x40025f48"/></type-tag>
            </type-pointer>
        </typedef>
        <typedef name="__uint32_t" ref="0x402db6b8" loc="42:/usr/include/bits/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__uint32_t" ref="0x402db6b8"/></typename>
            </type-int>
        </typedef>
        <typedef name="TMicro" ref="0x40872bc0" loc="31:/opt/tinyos-2.1.0/tos/lib/timer/Timer.h">
            <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x408729f8"/>
                <typename><typedef-ref name="TMicro" ref="0x40872bc0"/></typename>
            </type-tag>
        </typedef>
        <typedef name="MidElement2" ref="0x408394b8" loc="35:crypto.h">
            <type-tag size="I:78" alignment="I:1"><struct-ref name="MidElement2" ref="0x408390d0"/>
                <typename><typedef-ref name="MidElement2" ref="0x408394b8"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__fsfilcnt_t" ref="0x402e5950" loc="177:/usr/include/bits/types.h">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__fsfilcnt_t" ref="0x402e5950"/></typename>
            </type-int>
        </typedef>
        <typedef name="nlink_t" ref="0x402e77c0" loc="77:/usr/include/sys/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="nlink_t" ref="0x402e77c0"/></typename>
            </type-int>
        </typedef>
        <typedef name="clock_t" ref="0x4057cbf0" loc="61:/usr/include/time.h">
            <documentation loc="24:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.c">
                <short>&#10; Implementation of all of the Hash-Based Learning primitives and utility&#10; functions.</short>
                <long>&#10; Implementation of all of the Hash-Based Learning primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
            </documentation>
            <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="clock_t" ref="0x4057cbf0"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_OCR1BH_t" ref="0x40c24100" loc="268:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_OCR1BH_t" ref="0x40c24100"/></typename>
            </type-int>
        </typedef>
        <typedef name="pthread_condattr_t" ref="0x403010d0" loc="136:/usr/include/bits/pthreadtypes.h">
            <type-tag size="I:4" alignment="I:4"><union-ref ref="0x402fde90"/>
                <typename><typedef-ref name="pthread_condattr_t" ref="0x403010d0"/></typename>
            </type-tag>
        </typedef>
        <typedef name="heap_t" ref="0x4049f3b8" loc="54:/opt/tinyos-2.1.0/tos/lib/tossim/heap.h">
            <documentation loc="42:/opt/tinyos-2.1.0/tos/lib/tossim/heap.h">
                <short>&#10; </short>
                <long>&#10; @author Philip Levis&#10;</long>
            </documentation>
            <type-tag size="I:12" alignment="I:4"><struct-ref name="heap" ref="0x404a0dd0"/>
                <typename><typedef-ref name="heap_t" ref="0x4049f3b8"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__gid_t" ref="0x402e07f8" loc="136:/usr/include/bits/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__gid_t" ref="0x402e07f8"/></typename>
            </type-int>
        </typedef>
        <typedef name="nxle_uint16_t" ref="0x402b0018" loc="400:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nxle_uint16_t">
                <typename><typedef-ref name="nxle_uint16_t" ref="0x402b0018"/></typename>
            </type-int>
        </typedef>
        <typedef name="sim_log_channel_t" ref="0x4046c188" loc="53:/opt/tinyos-2.1.0/tos/lib/tossim/sim_log.c">
            <type-tag size="I:16" alignment="I:4"><struct-ref name="sim_log_channel" ref="0x40462958"/>
                <typename><typedef-ref name="sim_log_channel_t" ref="0x4046c188"/></typename>
            </type-tag>
        </typedef>
        <typedef name="u_int" ref="0x402e8108" loc="37:/usr/include/sys/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="u_int" ref="0x402e8108"/></typename>
            </type-int>
        </typedef>
        <typedef name="pthread_once_t" ref="0x40301578" loc="144:/usr/include/bits/pthreadtypes.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="pthread_once_t" ref="0x40301578"/></typename>
            </type-int>
        </typedef>
        <typedef name="uint" ref="0x402ea930" loc="153:/usr/include/sys/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="uint" ref="0x402ea930"/></typename>
            </type-int>
        </typedef>
        <typedef name="am_group_t" ref="0x4060f268" loc="11:/opt/tinyos-2.1.0/tos/types/AM.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="am_group_t" ref="0x4060f268"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_TCCR3C_t" ref="0x40c27eb8" loc="256:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c27630"/>
                <typename><typedef-ref name="Atm128_TCCR3C_t" ref="0x40c27eb8"/></typename>
            </type-tag>
        </typedef>
        <typedef name="uint_least8_t" ref="0x401c30f0" loc="77:/usr/include/stdint.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint_least8_t" ref="0x401c30f0"/></typename>
            </type-int>
        </typedef>
        <typedef name="__fsid_t" ref="0x402e3d38" loc="144:/usr/include/bits/types.h">
            <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x402e3b70"/>
                <typename><typedef-ref name="__fsid_t" ref="0x402e3d38"/></typename>
            </type-tag>
        </typedef>
        <typedef name="Atm128_TCNT1H_t" ref="0x40c26188" loc="260:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_TCNT1H_t" ref="0x40c26188"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_TCNT3L_t" ref="0x40c26920" loc="263:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_TCNT3L_t" ref="0x40c26920"/></typename>
            </type-int>
        </typedef>
        <typedef name="uint_fast32_t" ref="0x401c59d8" loc="111:/usr/include/stdint.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="uint_fast32_t" ref="0x401c59d8"/></typename>
            </type-int>
        </typedef>
        <typedef name="Element" ref="0x4083ae98" loc="31:crypto.h">
            <type-tag size="I:26" alignment="I:1"><struct-ref name="Element" ref="0x4083a858"/>
                <typename><typedef-ref name="Element" ref="0x4083ae98"/></typename>
            </type-tag>
        </typedef>
        <typedef name="int_least64_t" ref="0x401c2e28" loc="73:/usr/include/stdint.h">
            <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="int_least64_t" ref="0x401c2e28"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_ETIFR_t" ref="0x40c4ad38" loc="315:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c4ab10"/>
                <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x40c4ad38"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__pid_t" ref="0x402e3838" loc="143:/usr/include/bits/types.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__pid_t" ref="0x402e3838"/></typename>
            </type-int>
        </typedef>
        <typedef name="__u_int" ref="0x402dc718" loc="33:/usr/include/bits/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__u_int" ref="0x402dc718"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_TCNT2_t" ref="0x40c0b048" loc="106:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_TCNT2_t" ref="0x40c0b048"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_OCR1AL_t" ref="0x40c26e40" loc="267:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_OCR1AL_t" ref="0x40c26e40"/></typename>
            </type-int>
        </typedef>
        <typedef name="sim_event_t" ref="0x4044adf8" loc="43:/opt/tinyos-2.1.0/tos/lib/tossim/sim_event_queue.h">
            <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x4044ab90"/>
                <typename><typedef-ref name="sim_event_t" ref="0x4044adf8"/></typename>
            </type-tag>
        </typedef>
        <typedef name="error_t" ref="0x40630010" loc="56:/opt/tinyos-2.1.0/tos/types/TinyError.h">
            <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
                <short>&#10; </short>
                <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
            </documentation>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x40630010"/></typename>
            </type-int>
        </typedef>
        <typedef name="NN_DIGIT" ref="0x409a8048" loc="85:NN.h">
            <documentation loc="26:NN.h">
                <short>&#10; NN.h&#10;&#10; Author: An Liu&#10; Date: 09/29/2006&#10; Modified by: Panos Kampanakis&#10; Date: 01/31/2007&#10;</short>
            </documentation>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x409a8048"/></typename>
            </type-int>
        </typedef>
        <typedef name="__sig_atomic_t" ref="0x402efde8" loc="24:/usr/include/bits/sigset.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__sig_atomic_t" ref="0x402efde8"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_SFIOR_t" ref="0x40c2f618" loc="169:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c2f3f0"/>
                <typename><typedef-ref name="Atm128_SFIOR_t" ref="0x40c2f618"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__daddr_t" ref="0x402e10c8" loc="153:/usr/include/bits/types.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__daddr_t" ref="0x402e10c8"/></typename>
            </type-int>
        </typedef>
        <typedef name="__ino_t" ref="0x402e0a48" loc="137:/usr/include/bits/types.h">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__ino_t" ref="0x402e0a48"/></typename>
            </type-int>
        </typedef>
        <typedef name="_G_uint16_t" ref="0x403fca18" loc="55:/usr/include/_G_config.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="_G_uint16_t" ref="0x403fca18"/></typename>
            </type-int>
        </typedef>
        <typedef name="int_least8_t" ref="0x401c2728" loc="66:/usr/include/stdint.h">
            <type-int cname="signed char" size="I:1" alignment="I:1">
                <typename><typedef-ref name="int_least8_t" ref="0x401c2728"/></typename>
            </type-int>
        </typedef>
        <typedef name="FILE" ref="0x403f63a8" loc="49:/usr/include/stdio.h">
            <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x403f6168"/>
                <typename><typedef-ref name="FILE" ref="0x403f63a8"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__compar_fn_t" ref="0x403296e0" loc="670:/usr/include/stdlib.h">
            <type-pointer size="I:4" alignment="I:4">
                <type-function size="I:1" alignment="I:1">
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                    <function-parameters>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-qualified const="">
                                <type-void size="I:1" alignment="I:1"></type-void>
                            </type-qualified>
                        </type-pointer>
                        <type-pointer size="I:4" alignment="I:4">
                            <type-qualified const="">
                                <type-void size="I:1" alignment="I:1"></type-void>
                            </type-qualified>
                        </type-pointer>
                    </function-parameters>
                </type-function>
                <typename><typedef-ref name="__compar_fn_t" ref="0x403296e0"/></typename>
            </type-pointer>
        </typedef>
        <typedef name="Atm128_ADCL_t" ref="0x406bb500" loc="152:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_ADCL_t" ref="0x406bb500"/></typename>
            </type-int>
        </typedef>
        <typedef name="__mode_t" ref="0x402e0f18" loc="139:/usr/include/bits/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__mode_t" ref="0x402e0f18"/></typename>
            </type-int>
        </typedef>
        <typedef name="radio_stats_t" ref="0x40608128" loc="110:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <type-tag size="I:18" alignment="I:2"><struct-ref name="radio_stats" ref="0x4060bb00"/>
                <typename><typedef-ref name="radio_stats_t" ref="0x40608128"/></typename>
            </type-tag>
        </typedef>
        <typedef name="clockid_t" ref="0x402ecee8" loc="93:/usr/include/time.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="clockid_t" ref="0x402ecee8"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_ICR1H_t" ref="0x40c23a90" loc="282:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_ICR1H_t" ref="0x40c23a90"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_ICR3L_t" ref="0x40c22290" loc="285:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_ICR3L_t" ref="0x40c22290"/></typename>
            </type-int>
        </typedef>
        <typedef name="gid_t" ref="0x402e7330" loc="67:/usr/include/sys/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="gid_t" ref="0x402e7330"/></typename>
            </type-int>
        </typedef>
        <typedef name="fsid_t" ref="0x402e8a30" loc="41:/usr/include/sys/types.h">
            <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x402e3b70"/>
                <typename><typedef-ref name="fsid_t" ref="0x402e8a30"/></typename>
            </type-tag>
        </typedef>
        <typedef name="sim_packet_t" ref="0x405f6330" loc="51:/opt/tinyos-2.1.0/tos/lib/tossim/sim_packet.h">
            <documentation loc="24:/opt/tinyos-2.1.0/tos/lib/tossim/sim_packet.h">
                <short>&#10;&#10; TOSSIM packet abstract data type, so C++ code can call into nesC&#10; code that does the native-to-network type translation.</short>
                <long>&#10;&#10; TOSSIM packet abstract data type, so C++ code can call into nesC&#10; code that does the native-to-network type translation.&#10;&#10; @author Philip Levis&#10; @date   Jan 2 2006&#10;</long>
            </documentation>
            <type-tag size="I:0" alignment="I:1"><struct-ref name="sim_packet" ref="0x405f6148"/>
                <typename><typedef-ref name="sim_packet_t" ref="0x405f6330"/></typename>
            </type-tag>
        </typedef>
        <typedef name="Atm128Adcsra_t" ref="0x406bb010" loc="149:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x406bcbc0"/>
                <typename><typedef-ref name="Atm128Adcsra_t" ref="0x406bb010"/></typename>
            </type-tag>
        </typedef>
        <typedef name="int8_t" ref="0x401c0468" loc="37:/usr/include/stdint.h">
            <type-int cname="signed char" size="I:1" alignment="I:1">
                <typename><typedef-ref name="int8_t" ref="0x401c0468"/></typename>
            </type-int>
        </typedef>
        <typedef name="sim_log_output_t" ref="0x40462740" loc="46:/opt/tinyos-2.1.0/tos/lib/tossim/sim_log.c">
            <type-tag size="I:8" alignment="I:4"><struct-ref name="sim_log_output" ref="0x40462258"/>
                <typename><typedef-ref name="sim_log_output_t" ref="0x40462740"/></typename>
            </type-tag>
        </typedef>
        <typedef name="suseconds_t" ref="0x402f2658" loc="49:/usr/include/sys/select.h">
            <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="suseconds_t" ref="0x402f2658"/></typename>
            </type-int>
        </typedef>
        <typedef name="sigset_t" ref="0x402ed848" loc="38:/usr/include/sys/select.h">
            <type-tag size="I:128" alignment="I:4"><struct-ref ref="0x402ed408"/>
                <typename><typedef-ref name="sigset_t" ref="0x402ed848"/></typename>
            </type-tag>
        </typedef>
        <typedef name="T32khz" ref="0x40872780" loc="30:/opt/tinyos-2.1.0/tos/lib/timer/Timer.h">
            <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x408725b8"/>
                <typename><typedef-ref name="T32khz" ref="0x40872780"/></typename>
            </type-tag>
        </typedef>
        <typedef name="u_short" ref="0x402e4ec0" loc="36:/usr/include/sys/types.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="u_short" ref="0x402e4ec0"/></typename>
            </type-int>
        </typedef>
        <typedef name="tossim_header_t" ref="0x4060ea70" loc="12:/opt/tinyos-2.1.0/tos/lib/tossim/TossimRadioMsg.h">
            <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="tossim_header" ref="0x4060e010"/>
                <typename><typedef-ref name="tossim_header_t" ref="0x4060ea70"/></typename>
            </type-tag>
        </typedef>
        <typedef name="ptrdiff_t" ref="0x4002e270" loc="152:/usr/lib/gcc/i486-linux-gnu/4.3.3/include/stddef.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="ptrdiff_t" ref="0x4002e270"/></typename>
            </type-int>
        </typedef>
        <typedef name="blkcnt_t" ref="0x402f7e80" loc="235:/usr/include/sys/types.h">
            <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="blkcnt_t" ref="0x402f7e80"/></typename>
            </type-int>
        </typedef>
        <typedef name="uint32_t" ref="0x401c2230" loc="52:/usr/include/stdint.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="uint32_t" ref="0x401c2230"/></typename>
            </type-int>
        </typedef>
        <typedef name="nxle_uint64_t" ref="0x402b0968" loc="402:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:1" network="nxle_uint64_t">
                <typename><typedef-ref name="nxle_uint64_t" ref="0x402b0968"/></typename>
            </type-int>
        </typedef>
        <typedef name="nx_uint8_t" ref="0x402a9728" loc="389:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                <typename><typedef-ref name="nx_uint8_t" ref="0x402a9728"/></typename>
            </type-int>
        </typedef>
        <typedef name="uintptr_t" ref="0x401c60e8" loc="129:/usr/include/stdint.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="uintptr_t" ref="0x401c60e8"/></typename>
            </type-int>
        </typedef>
        <typedef name="caddr_t" ref="0x402ec758" loc="117:/usr/include/sys/types.h">
            <type-pointer size="I:4" alignment="I:4">
                <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                <typename><typedef-ref name="caddr_t" ref="0x402ec758"/></typename>
            </type-pointer>
        </typedef>
        <typedef name="__u_long" ref="0x402dc958" loc="34:/usr/include/bits/types.h">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__u_long" ref="0x402dc958"/></typename>
            </type-int>
        </typedef>
        <typedef name="uint_fast64_t" ref="0x401c5c78" loc="113:/usr/include/stdint.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="uint_fast64_t" ref="0x401c5c78"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_TCNT3H_t" ref="0x40c26698" loc="262:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_TCNT3H_t" ref="0x40c26698"/></typename>
            </type-int>
        </typedef>
        <typedef name="__uint16_t" ref="0x402db260" loc="40:/usr/include/bits/types.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="__uint16_t" ref="0x402db260"/></typename>
            </type-int>
        </typedef>
        <typedef name="u_char" ref="0x402e4c70" loc="35:/usr/include/sys/types.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="u_char" ref="0x402e4c70"/></typename>
            </type-int>
        </typedef>
        <typedef name="mcu_power_t" ref="0x406b37d0" loc="114:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128hardware.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="mcu_power_t" ref="0x406b37d0"/></typename>
            </type-int>
        </typedef>
        <typedef name="int_fast16_t" ref="0x401c3e08" loc="97:/usr/include/stdint.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="int_fast16_t" ref="0x401c3e08"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_OCR1AH_t" ref="0x40c26bb8" loc="266:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_OCR1AH_t" ref="0x40c26bb8"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_OCR1CL_t" ref="0x40c24898" loc="271:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_OCR1CL_t" ref="0x40c24898"/></typename>
            </type-int>
        </typedef>
        <typedef name="fpos_t" ref="0x4041b048" loc="91:/usr/include/stdio.h">
            <type-tag size="I:12" alignment="I:4"><struct-ref ref="0x403f4750"/>
                <typename><typedef-ref name="fpos_t" ref="0x4041b048"/></typename>
            </type-tag>
        </typedef>
        <typedef name="Atm128_TCCR1B_t" ref="0x40c28580" loc="235:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c28010"/>
                <typename><typedef-ref name="Atm128_TCCR1B_t" ref="0x40c28580"/></typename>
            </type-tag>
        </typedef>
        <typedef name="div_t" ref="0x402d1b40" loc="102:/usr/include/stdlib.h">
            <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x402d1918"/>
                <typename><typedef-ref name="div_t" ref="0x402d1b40"/></typename>
            </type-tag>
        </typedef>
        <typedef name="ExtElement2" ref="0x40839ab8" loc="39:crypto.h">
            <type-tag size="I:156" alignment="I:1"><struct-ref name="ExtElement2" ref="0x408396a8"/>
                <typename><typedef-ref name="ExtElement2" ref="0x40839ab8"/></typename>
            </type-tag>
        </typedef>
        <typedef name="sim_gain_noise_t" ref="0x40538e30" loc="6:/opt/tinyos-2.1.0/tos/lib/tossim/sim_gain.c">
            <type-tag size="I:16" alignment="I:4"><struct-ref name="sim_gain_noise" ref="0x405389a8"/>
                <typename><typedef-ref name="sim_gain_noise_t" ref="0x40538e30"/></typename>
            </type-tag>
        </typedef>
        <typedef name="size_t" ref="0x4002e4a8" loc="214:/usr/lib/gcc/i486-linux-gnu/4.3.3/include/stddef.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="size_t" ref="0x4002e4a8"/></typename>
            </type-int>
        </typedef>
        <typedef name="__uint8_t" ref="0x402dcdb0" loc="38:/usr/include/bits/types.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="__uint8_t" ref="0x402dcdb0"/></typename>
            </type-int>
        </typedef>
        <typedef name="__sigset_t" ref="0x402ed5d0" loc="32:/usr/include/bits/sigset.h">
            <type-tag size="I:128" alignment="I:4"><struct-ref ref="0x402ed408"/>
                <typename><typedef-ref name="__sigset_t" ref="0x402ed5d0"/></typename>
            </type-tag>
        </typedef>
        <typedef name="Atm128_TCCR0_t" ref="0x40c0c5b0" loc="101:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c0ee40"/>
                <typename><typedef-ref name="Atm128_TCCR0_t" ref="0x40c0c5b0"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__loff_t" ref="0x402e40e0" loc="184:/usr/include/bits/types.h">
            <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="__loff_t" ref="0x402e40e0"/></typename>
            </type-int>
        </typedef>
        <typedef name="__ino64_t" ref="0x402e0cd8" loc="138:/usr/include/bits/types.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="__ino64_t" ref="0x402e0cd8"/></typename>
            </type-int>
        </typedef>
        <typedef name="nx_am_id_t" ref="0x405ff728" loc="6:/opt/tinyos-2.1.0/tos/types/AM.h">
            <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/tossim/platform_message.h">
                <short>&#10; Defining the platform-independently named packet structures to be the&#10; tossim structures.</short>
                <long>&#10; Defining the platform-independently named packet structures to be the&#10; tossim structures.&#10;&#10; @author Philip Levis&#10; @date   Dec 2 2005&#10; Revision:  $Revision: 1.4 $&#10;</long>
            </documentation>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                <typename><typedef-ref name="nx_am_id_t" ref="0x405ff728"/></typename>
            </type-int>
        </typedef>
        <typedef name="message_header_t" ref="0x406183e8" loc="44:/opt/tinyos-2.1.0/tos/lib/tossim/platform_message.h">
            <type-tag size="I:7" alignment="I:1"><union-ref name="message_header" ref="0x40619e00"/>
                <typename><typedef-ref name="message_header_t" ref="0x406183e8"/></typename>
            </type-tag>
        </typedef>
        <typedef name="gain_entry_t" ref="0x4052fd00" loc="49:/opt/tinyos-2.1.0/tos/lib/tossim/sim_gain.h">
            <documentation loc="24:/opt/tinyos-2.1.0/tos/lib/tossim/sim_gain.h">
                <short>&#10; The C functions that allow TOSSIM-side code to access the SimMoteP&#10; component.</short>
                <long>&#10; The C functions that allow TOSSIM-side code to access the SimMoteP&#10; component.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
            </documentation>
            <type-tag size="I:16" alignment="I:4"><struct-ref name="gain_entry" ref="0x4052f6c0"/>
                <typename><typedef-ref name="gain_entry_t" ref="0x4052fd00"/></typename>
            </type-tag>
        </typedef>
        <typedef name="am_addr_t" ref="0x4060f4c8" loc="12:/opt/tinyos-2.1.0/tos/types/AM.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="am_addr_t" ref="0x4060f4c8"/></typename>
            </type-int>
        </typedef>
        <typedef name="nx_int32_t" ref="0x402a7e50" loc="387:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="int" size="I:4" alignment="I:1" network="nx_int32_t">
                <typename><typedef-ref name="nx_int32_t" ref="0x402a7e50"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_ADCH_t" ref="0x406bb288" loc="151:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128Adc.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_ADCH_t" ref="0x406bb288"/></typename>
            </type-int>
        </typedef>
        <typedef name="uint_least16_t" ref="0x401c3468" loc="78:/usr/include/stdint.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint_least16_t" ref="0x401c3468"/></typename>
            </type-int>
        </typedef>
        <typedef name="__io_close_fn" ref="0x40407dd0" loc="384:/usr/include/libio.h">
            <type-function size="I:1" alignment="I:1">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                <function-parameters>
                    <type-pointer size="I:4" alignment="I:4">
                        <type-void size="I:1" alignment="I:1"></type-void>
                    </type-pointer>
                </function-parameters>
                <typename><typedef-ref name="__io_close_fn" ref="0x40407dd0"/></typename>
            </type-function>
        </typedef>
        <typedef name="uint8_t" ref="0x401c0d68" loc="49:/usr/include/stdint.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x401c0d68"/></typename>
            </type-int>
        </typedef>
        <typedef name="time_t" ref="0x402ecc20" loc="77:/usr/include/time.h">
            <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="time_t" ref="0x402ecc20"/></typename>
            </type-int>
        </typedef>
        <typedef name="nxle_int8_t" ref="0x402ad918" loc="395:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="signed char" size="I:1" alignment="I:1" network="nxle_int8_t">
                <typename><typedef-ref name="nxle_int8_t" ref="0x402ad918"/></typename>
            </type-int>
        </typedef>
        <typedef name="_IO_FILE" ref="0x40409098" loc="341:/usr/include/libio.h">
            <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x403f6168"/>
                <typename><typedef-ref name="_IO_FILE" ref="0x40409098"/></typename>
            </type-tag>
        </typedef>
        <typedef name="pthread_attr_t" ref="0x402f6d40" loc="57:/usr/include/bits/pthreadtypes.h">
            <type-tag size="I:36" alignment="I:4"><union-ref ref="0x402f6b18"/>
                <typename><typedef-ref name="pthread_attr_t" ref="0x402f6d40"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__io_seek_fn" ref="0x40407868" loc="381:/usr/include/libio.h">
            <type-function size="I:1" alignment="I:1">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                <function-parameters>
                    <type-pointer size="I:4" alignment="I:4">
                        <type-void size="I:1" alignment="I:1"></type-void>
                    </type-pointer>
                    <type-pointer size="I:4" alignment="I:4">
                        <type-int cname="long long" size="I:8" alignment="I:8">
                            <typename><typedef-ref name="__off64_t" ref="0x402e3628"/></typename>
                        </type-int>
                    </type-pointer>
                    <type-int cname="int" size="I:4" alignment="I:4"></type-int>
                </function-parameters>
                <typename><typedef-ref name="__io_seek_fn" ref="0x40407868"/></typename>
            </type-function>
        </typedef>
        <typedef name="pid_t" ref="0x402e7e38" loc="100:/usr/include/sys/types.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="pid_t" ref="0x402e7e38"/></typename>
            </type-int>
        </typedef>
        <typedef name="timer_t" ref="0x402ea180" loc="105:/usr/include/time.h">
            <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
                <typename><typedef-ref name="timer_t" ref="0x402ea180"/></typename>
            </type-pointer>
        </typedef>
        <typedef name="pthread_rwlockattr_t" ref="0x40304740" loc="195:/usr/include/bits/pthreadtypes.h">
            <type-tag size="I:8" alignment="I:4"><union-ref ref="0x40304518"/>
                <typename><typedef-ref name="pthread_rwlockattr_t" ref="0x40304740"/></typename>
            </type-tag>
        </typedef>
        <typedef name="Atm128_OCR0_t" ref="0x40c0caa8" loc="103:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_OCR0_t" ref="0x40c0caa8"/></typename>
            </type-int>
        </typedef>
        <typedef name="__uint64_t" ref="0x402dbbb0" loc="48:/usr/include/bits/types.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="__uint64_t" ref="0x402dbbb0"/></typename>
            </type-int>
        </typedef>
        <typedef name="__dev_t" ref="0x402e0398" loc="134:/usr/include/bits/types.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="__dev_t" ref="0x402e0398"/></typename>
            </type-int>
        </typedef>
        <typedef name="nxle_int32_t" ref="0x402ab258" loc="397:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="int" size="I:4" alignment="I:1" network="nxle_int32_t">
                <typename><typedef-ref name="nxle_int32_t" ref="0x402ab258"/></typename>
            </type-int>
        </typedef>
        <typedef name="BigInt" ref="0x4082ebc0" loc="71:crypto.h">
            <type-array elements="I:19" size="I:19" alignment="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                </type-int>
                <typename><typedef-ref name="BigInt" ref="0x4082ebc0"/></typename>
            </type-array>
        </typedef>
        <typedef name="va_list" ref="0x4045c400" loc="105:/usr/lib/gcc/i486-linux-gnu/4.3.3/include/stdarg.h">
            <documentation loc="24:/opt/tinyos-2.1.0/tos/lib/tossim/sim_log.h">
                <short>&#10; The TOSSIM logging system.</short>
                <long>&#10; The TOSSIM logging system. Unlike in TinyOS 1.x, this logging&#10; system supports an arbitrary number of channels, denoted by&#10; a string identifier. A channel can be connected to any number&#10; of outputs, and a debug statement can be associated with any&#10; number of channels.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
            </documentation>
            <type-pointer size="I:4" alignment="I:4">
                <type-tag size="V:" alignment="V:"><struct-ref ref="0x40025f48"/></type-tag>
                <typename><typedef-ref name="va_list" ref="0x4045c400"/></typename>
            </type-pointer>
        </typedef>
        <typedef name="__off_t" ref="0x402e33a8" loc="141:/usr/include/bits/types.h">
            <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__off_t" ref="0x402e33a8"/></typename>
            </type-int>
        </typedef>
        <typedef name="int_fast8_t" ref="0x401c3be0" loc="91:/usr/include/stdint.h">
            <type-int cname="signed char" size="I:1" alignment="I:1">
                <typename><typedef-ref name="int_fast8_t" ref="0x401c3be0"/></typename>
            </type-int>
        </typedef>
        <typedef name="__blkcnt_t" ref="0x402e1e98" loc="169:/usr/include/bits/types.h">
            <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__blkcnt_t" ref="0x402e1e98"/></typename>
            </type-int>
        </typedef>
        <typedef name="tossim_metadata_t" ref="0x4060d968" loc="22:/opt/tinyos-2.1.0/tos/lib/tossim/TossimRadioMsg.h">
            <type-tag size="I:4" alignment="I:1"><nx_struct-ref name="tossim_metadata" ref="0x4060d260"/>
                <typename><typedef-ref name="tossim_metadata_t" ref="0x4060d968"/></typename>
            </type-tag>
        </typedef>
        <typedef name="am_id_t" ref="0x4060f010" loc="10:/opt/tinyos-2.1.0/tos/types/AM.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="am_id_t" ref="0x4060f010"/></typename>
            </type-int>
        </typedef>
        <typedef name="intmax_t" ref="0x401c6348" loc="139:/usr/include/stdint.h">
            <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="intmax_t" ref="0x401c6348"/></typename>
            </type-int>
        </typedef>
        <typedef name="Point" ref="0x40838128" loc="44:crypto.h">
            <type-tag size="I:52" alignment="I:1"><struct-ref name="Point" ref="0x40839c70"/>
                <typename><typedef-ref name="Point" ref="0x40838128"/></typename>
            </type-tag>
        </typedef>
        <typedef name="Atm128TimerCtrlCapture_t" ref="0x40c28238" loc="232:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c28010"/>
                <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x40c28238"/></typename>
            </type-tag>
        </typedef>
        <typedef name="Atm128_TCCR2_t" ref="0x40c0cdb0" loc="105:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c0ee40"/>
                <typename><typedef-ref name="Atm128_TCCR2_t" ref="0x40c0cdb0"/></typename>
            </type-tag>
        </typedef>
        <typedef name="serial_metadata_t" ref="0x40619bf0" loc="127:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <type-tag size="I:1" alignment="I:1"><nx_struct-ref name="serial_metadata" ref="0x40619840"/>
                <typename><typedef-ref name="serial_metadata_t" ref="0x40619bf0"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__fsblkcnt_t" ref="0x402e53f8" loc="173:/usr/include/bits/types.h">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__fsblkcnt_t" ref="0x402e53f8"/></typename>
            </type-int>
        </typedef>
        <typedef name="uint16_t" ref="0x401c2010" loc="50:/usr/include/stdint.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401c2010"/></typename>
            </type-int>
        </typedef>
        <typedef name="_G_fpos_t" ref="0x403f4978" loc="26:/usr/include/_G_config.h">
            <type-tag size="I:12" alignment="I:4"><struct-ref ref="0x403f4750"/>
                <typename><typedef-ref name="_G_fpos_t" ref="0x403f4978"/></typename>
            </type-tag>
        </typedef>
        <typedef name="u_int8_t" ref="0x402eac98" loc="201:/usr/include/sys/types.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="u_int8_t" ref="0x402eac98"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_TCNT1L_t" ref="0x40c26410" loc="261:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_TCNT1L_t" ref="0x40c26410"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_OCR3CH_t" ref="0x40c23578" loc="278:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_OCR3CH_t" ref="0x40c23578"/></typename>
            </type-int>
        </typedef>
        <typedef name="nx_am_group_t" ref="0x405ffac8" loc="7:/opt/tinyos-2.1.0/tos/types/AM.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
                <typename><typedef-ref name="nx_am_group_t" ref="0x405ffac8"/></typename>
            </type-int>
        </typedef>
        <typedef name="__timer_t" ref="0x402e19c0" loc="161:/usr/include/bits/types.h">
            <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
                <typename><typedef-ref name="__timer_t" ref="0x402e19c0"/></typename>
            </type-pointer>
        </typedef>
        <typedef name="message_metadata_t" ref="0x40617790" loc="52:/opt/tinyos-2.1.0/tos/lib/tossim/platform_message.h">
            <type-tag size="I:4" alignment="I:1"><union-ref name="message_metadata" ref="0x40618c18"/>
                <typename><typedef-ref name="message_metadata_t" ref="0x40617790"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__io_write_fn" ref="0x40408f08" loc="372:/usr/include/libio.h">
            <type-function size="I:1" alignment="I:1">
                <type-int cname="int" size="I:4" alignment="I:4">
                    <typename><typedef-ref name="__ssize_t" ref="0x402e5e38"/></typename>
                </type-int>
                <function-parameters>
                    <type-pointer size="I:4" alignment="I:4">
                        <type-void size="I:1" alignment="I:1"></type-void>
                    </type-pointer>
                    <type-pointer size="I:4" alignment="I:4">
                        <type-qualified const="">
                            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                        </type-qualified>
                    </type-pointer>
                    <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                        <typename><typedef-ref name="size_t" ref="0x4002e4a8"/></typename>
                    </type-int>
                </function-parameters>
                <typename><typedef-ref name="__io_write_fn" ref="0x40408f08"/></typename>
            </type-function>
        </typedef>
        <typedef name="fd_mask" ref="0x402f0378" loc="85:/usr/include/sys/select.h">
            <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="fd_mask" ref="0x402f0378"/></typename>
            </type-int>
        </typedef>
        <typedef name="nx_uint32_t" ref="0x402ad030" loc="391:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
                <typename><typedef-ref name="nx_uint32_t" ref="0x402ad030"/></typename>
            </type-int>
        </typedef>
        <typedef name="hashtable_t" ref="0x4045c998" loc="10:/opt/tinyos-2.1.0/tos/lib/tossim/hashtable.h">
            <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0x4045c730"/>
                <typename><typedef-ref name="hashtable_t" ref="0x4045c998"/></typename>
            </type-tag>
        </typedef>
        <typedef name="dev_t" ref="0x402e7108" loc="62:/usr/include/sys/types.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="dev_t" ref="0x402e7108"/></typename>
            </type-int>
        </typedef>
        <typedef name="__u_quad_t" ref="0x402e00d0" loc="57:/usr/include/bits/types.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="__u_quad_t" ref="0x402e00d0"/></typename>
            </type-int>
        </typedef>
        <typedef name="__swblk_t" ref="0x402e1310" loc="154:/usr/include/bits/types.h">
            <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__swblk_t" ref="0x402e1310"/></typename>
            </type-int>
        </typedef>
        <typedef name="u_int32_t" ref="0x402ef360" loc="203:/usr/include/sys/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="u_int32_t" ref="0x402ef360"/></typename>
            </type-int>
        </typedef>
        <typedef name="fsfilcnt_t" ref="0x402f6400" loc="243:/usr/include/sys/types.h">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="fsfilcnt_t" ref="0x402f6400"/></typename>
            </type-int>
        </typedef>
        <typedef name="uint_fast8_t" ref="0x401c5538" loc="104:/usr/include/stdint.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint_fast8_t" ref="0x401c5538"/></typename>
            </type-int>
        </typedef>
        <typedef name="__rlim64_t" ref="0x402e2508" loc="147:/usr/include/bits/types.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="__rlim64_t" ref="0x402e2508"/></typename>
            </type-int>
        </typedef>
        <typedef name="__key_t" ref="0x402e1520" loc="155:/usr/include/bits/types.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__key_t" ref="0x402e1520"/></typename>
            </type-int>
        </typedef>
        <typedef name="__useconds_t" ref="0x402e2bd8" loc="150:/usr/include/bits/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__useconds_t" ref="0x402e2bd8"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128Assr_t" ref="0x40c34428" loc="121:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c34200"/>
                <typename><typedef-ref name="Atm128Assr_t" ref="0x40c34428"/></typename>
            </type-tag>
        </typedef>
        <typedef name="Atm128_OCR3BL_t" ref="0x40c232f0" loc="277:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_OCR3BL_t" ref="0x40c232f0"/></typename>
            </type-int>
        </typedef>
        <typedef name="__io_read_fn" ref="0x40408558" loc="364:/usr/include/libio.h">
            <type-function size="I:1" alignment="I:1">
                <type-int cname="int" size="I:4" alignment="I:4">
                    <typename><typedef-ref name="__ssize_t" ref="0x402e5e38"/></typename>
                </type-int>
                <function-parameters>
                    <type-pointer size="I:4" alignment="I:4">
                        <type-void size="I:1" alignment="I:1"></type-void>
                    </type-pointer>
                    <type-pointer size="I:4" alignment="I:4">
                        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                    </type-pointer>
                    <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                        <typename><typedef-ref name="size_t" ref="0x4002e4a8"/></typename>
                    </type-int>
                </function-parameters>
                <typename><typedef-ref name="__io_read_fn" ref="0x40408558"/></typename>
            </type-function>
        </typedef>
        <typedef name="nx_int16_t" ref="0x402a79f8" loc="386:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="short" size="I:2" alignment="I:1" network="nx_int16_t">
                <typename><typedef-ref name="nx_int16_t" ref="0x402a79f8"/></typename>
            </type-int>
        </typedef>
        <typedef name="__gwchar_t" ref="0x401c69c0" loc="35:/usr/include/inttypes.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__gwchar_t" ref="0x401c69c0"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_ICR1L_t" ref="0x40c23d10" loc="283:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_ICR1L_t" ref="0x40c23d10"/></typename>
            </type-int>
        </typedef>
        <typedef name="NN_UINT2" ref="0x409a87e0" loc="90:NN.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="NN_UINT2" ref="0x409a87e0"/></typename>
            </type-int>
        </typedef>
        <typedef name="register_t" ref="0x402efa00" loc="206:/usr/include/sys/types.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="register_t" ref="0x402efa00"/></typename>
            </type-int>
        </typedef>
        <typedef name="pthread_barrierattr_t" ref="0x403027b0" loc="216:/usr/include/bits/pthreadtypes.h">
            <type-tag size="I:4" alignment="I:4"><union-ref ref="0x40302588"/>
                <typename><typedef-ref name="pthread_barrierattr_t" ref="0x403027b0"/></typename>
            </type-tag>
        </typedef>
        <typedef name="Atm128_ETIMSK_t" ref="0x40c21810" loc="300:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c215e8"/>
                <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x40c21810"/></typename>
            </type-tag>
        </typedef>
        <typedef name="time_msg" ref="0x4062e430" loc="11:TimeSerial.h">
            <documentation loc="1:PairingTestC.nc">
                <short>&#10; Author: Xiaokang Xiong (xkxiong@cityu.edu.hk)&#10; Date: Sep, 2009&#10;</short>
            </documentation>
            <type-tag size="I:18" alignment="I:1"><nx_struct-ref name="time_serial_msg" ref="0x4002f8b0"/>
                <typename><typedef-ref name="time_msg" ref="0x4062e430"/></typename>
            </type-tag>
        </typedef>
        <typedef name="Atm128TimerControl_t" ref="0x40c0c0c8" loc="99:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <documentation loc="11:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
                <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
                <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
            </documentation>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c0ee40"/>
                <typename><typedef-ref name="Atm128TimerControl_t" ref="0x40c0c0c8"/></typename>
            </type-tag>
        </typedef>
        <typedef name="ssize_t" ref="0x402ec2b8" loc="110:/usr/include/sys/types.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="ssize_t" ref="0x402ec2b8"/></typename>
            </type-int>
        </typedef>
        <typedef name="__quad_t" ref="0x402dbe20" loc="56:/usr/include/bits/types.h">
            <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="__quad_t" ref="0x402dbe20"/></typename>
            </type-int>
        </typedef>
        <typedef name="int32_t" ref="0x401c08e8" loc="39:/usr/include/stdint.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="int32_t" ref="0x401c08e8"/></typename>
            </type-int>
        </typedef>
        <typedef name="uint64_t" ref="0x401c24a0" loc="59:/usr/include/stdint.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="uint64_t" ref="0x401c24a0"/></typename>
            </type-int>
        </typedef>
        <typedef name="u_long" ref="0x402e8348" loc="38:/usr/include/sys/types.h">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="u_long" ref="0x402e8348"/></typename>
            </type-int>
        </typedef>
        <typedef name="__nesc_atomic_t" ref="0x406a3010" loc="88:/opt/tinyos-2.1.0/tos/chips/atm128/sim/atm128hardware.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="__nesc_atomic_t" ref="0x406a3010"/></typename>
            </type-int>
        </typedef>
        <typedef name="_LIB_VERSION_TYPE" ref="0x403e0c38" loc="291:/usr/include/math.h">
            <type-tag size="I:4" alignment="I:4"><enum-ref ref="0x403e01d8"/>
                <typename><typedef-ref name="_LIB_VERSION_TYPE" ref="0x403e0c38"/></typename>
            </type-tag>
        </typedef>
        <typedef name="nxle_int64_t" ref="0x402ab6d8" loc="398:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="long long" size="I:8" alignment="I:1" network="nxle_int64_t">
                <typename><typedef-ref name="nxle_int64_t" ref="0x402ab6d8"/></typename>
            </type-int>
        </typedef>
        <typedef name="nxle_int16_t" ref="0x402add98" loc="396:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="short" size="I:2" alignment="I:1" network="nxle_int16_t">
                <typename><typedef-ref name="nxle_int16_t" ref="0x402add98"/></typename>
            </type-int>
        </typedef>
        <typedef name="pthread_t" ref="0x402f6688" loc="50:/usr/include/bits/pthreadtypes.h">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="pthread_t" ref="0x402f6688"/></typename>
            </type-int>
        </typedef>
        <typedef name="__blksize_t" ref="0x402e1c28" loc="164:/usr/include/bits/types.h">
            <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__blksize_t" ref="0x402e1c28"/></typename>
            </type-int>
        </typedef>
        <typedef name="imaxdiv_t" ref="0x401cc128" loc="292:/usr/include/inttypes.h">
            <type-tag size="I:16" alignment="I:4"><struct-ref ref="0x401c6ee0"/>
                <typename><typedef-ref name="imaxdiv_t" ref="0x401cc128"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__nlink_t" ref="0x402e3178" loc="140:/usr/include/bits/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__nlink_t" ref="0x402e3178"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_TCCR1A_t" ref="0x40c2d4b0" loc="196:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c2ef28"/>
                <typename><typedef-ref name="Atm128_TCCR1A_t" ref="0x40c2d4b0"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__id_t" ref="0x402e2730" loc="148:/usr/include/bits/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__id_t" ref="0x402e2730"/></typename>
            </type-int>
        </typedef>
        <typedef name="uint_least32_t" ref="0x401c36c0" loc="79:/usr/include/stdint.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="uint_least32_t" ref="0x401c36c0"/></typename>
            </type-int>
        </typedef>
        <typedef name="__mbstate_t" ref="0x403f42d8" loc="90:/usr/include/wchar.h">
            <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x403f40b0"/>
                <typename><typedef-ref name="__mbstate_t" ref="0x403f42d8"/></typename>
            </type-tag>
        </typedef>
        <typedef name="message_footer_t" ref="0x406189f0" loc="48:/opt/tinyos-2.1.0/tos/lib/tossim/platform_message.h">
            <type-tag size="I:2" alignment="I:1"><union-ref name="message_footer" ref="0x406185f8"/>
                <typename><typedef-ref name="message_footer_t" ref="0x406189f0"/></typename>
            </type-tag>
        </typedef>
        <typedef name="Atm128_OCR3BH_t" ref="0x40c23068" loc="276:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_OCR3BH_t" ref="0x40c23068"/></typename>
            </type-int>
        </typedef>
        <typedef name="__blkcnt64_t" ref="0x402e5160" loc="170:/usr/include/bits/types.h">
            <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="__blkcnt64_t" ref="0x402e5160"/></typename>
            </type-int>
        </typedef>
        <typedef name="fsblkcnt_t" ref="0x402f6170" loc="239:/usr/include/sys/types.h">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="fsblkcnt_t" ref="0x402f6170"/></typename>
            </type-int>
        </typedef>
        <typedef name="NN_DOUBLE_DIGIT" ref="0x409a8340" loc="86:NN.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="NN_DOUBLE_DIGIT" ref="0x409a8340"/></typename>
            </type-int>
        </typedef>
        <typedef name="off_t" ref="0x402e7c10" loc="88:/usr/include/sys/types.h">
            <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="off_t" ref="0x402e7c10"/></typename>
            </type-int>
        </typedef>
        <typedef name="__u_short" ref="0x402dc508" loc="32:/usr/include/bits/types.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="__u_short" ref="0x402dc508"/></typename>
            </type-int>
        </typedef>
        <typedef name="nx_int64_t" ref="0x402a92d0" loc="388:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="long long" size="I:8" alignment="I:1" network="nx_int64_t">
                <typename><typedef-ref name="nx_int64_t" ref="0x402a92d0"/></typename>
            </type-int>
        </typedef>
        <typedef name="quad_t" ref="0x402e8588" loc="39:/usr/include/sys/types.h">
            <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="quad_t" ref="0x402e8588"/></typename>
            </type-int>
        </typedef>
        <typedef name="__suseconds_t" ref="0x402e2e48" loc="151:/usr/include/bits/types.h">
            <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__suseconds_t" ref="0x402e2e48"/></typename>
            </type-int>
        </typedef>
        <typedef name="pthread_barrier_t" ref="0x403020d0" loc="210:/usr/include/bits/pthreadtypes.h">
            <type-tag size="I:20" alignment="I:4"><union-ref ref="0x40304e90"/>
                <typename><typedef-ref name="pthread_barrier_t" ref="0x403020d0"/></typename>
            </type-tag>
        </typedef>
        <typedef name="UInt" ref="0x4082e590" loc="65:crypto.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128TimerCtrlClock_t" ref="0x40c27858" loc="250:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c27630"/>
                <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x40c27858"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__int8_t" ref="0x402dcb88" loc="37:/usr/include/bits/types.h">
            <type-int cname="signed char" size="I:1" alignment="I:1">
                <typename><typedef-ref name="__int8_t" ref="0x402dcb88"/></typename>
            </type-int>
        </typedef>
        <typedef name="_G_fpos64_t" ref="0x403fc048" loc="31:/usr/include/_G_config.h">
            <type-tag size="I:16" alignment="I:4"><struct-ref ref="0x403f4df8"/>
                <typename><typedef-ref name="_G_fpos64_t" ref="0x403fc048"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__clockid_t" ref="0x402e1768" loc="158:/usr/include/bits/types.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__clockid_t" ref="0x402e1768"/></typename>
            </type-int>
        </typedef>
        <typedef name="uint_fast16_t" ref="0x401c5788" loc="110:/usr/include/stdint.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="uint_fast16_t" ref="0x401c5788"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_OCR3AL_t" ref="0x40c24db8" loc="275:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_OCR3AL_t" ref="0x40c24db8"/></typename>
            </type-int>
        </typedef>
        <typedef name="uintmax_t" ref="0x401c65e0" loc="141:/usr/include/stdint.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="uintmax_t" ref="0x401c65e0"/></typename>
            </type-int>
        </typedef>
        <typedef name="nx_am_addr_t" ref="0x405ffd60" loc="8:/opt/tinyos-2.1.0/tos/types/AM.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
                <typename><typedef-ref name="nx_am_addr_t" ref="0x405ffd60"/></typename>
            </type-int>
        </typedef>
        <typedef name="__clock_t" ref="0x402e2010" loc="145:/usr/include/bits/types.h">
            <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__clock_t" ref="0x402e2010"/></typename>
            </type-int>
        </typedef>
        <typedef name="nx_uint16_t" ref="0x402a9ba0" loc="390:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
                <typename><typedef-ref name="nx_uint16_t" ref="0x402a9ba0"/></typename>
            </type-int>
        </typedef>
        <typedef name="__rlim_t" ref="0x402e2270" loc="146:/usr/include/bits/types.h">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__rlim_t" ref="0x402e2270"/></typename>
            </type-int>
        </typedef>
        <typedef name="u_quad_t" ref="0x402e87f0" loc="40:/usr/include/sys/types.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="u_quad_t" ref="0x402e87f0"/></typename>
            </type-int>
        </typedef>
        <typedef name="int_fast32_t" ref="0x401c5048" loc="98:/usr/include/stdint.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="int_fast32_t" ref="0x401c5048"/></typename>
            </type-int>
        </typedef>
        <typedef name="int_least16_t" ref="0x401c2978" loc="67:/usr/include/stdint.h">
            <type-int cname="short" size="I:2" alignment="I:2">
                <typename><typedef-ref name="int_least16_t" ref="0x401c2978"/></typename>
            </type-int>
        </typedef>
        <typedef name="ldiv_t" ref="0x402d0298" loc="110:/usr/include/stdlib.h">
            <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x402d1ee0"/>
                <typename><typedef-ref name="ldiv_t" ref="0x402d0298"/></typename>
            </type-tag>
        </typedef>
        <typedef name="u_int64_t" ref="0x402ef6b0" loc="204:/usr/include/sys/types.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="u_int64_t" ref="0x402ef6b0"/></typename>
            </type-int>
        </typedef>
        <typedef name="u_int16_t" ref="0x402ef010" loc="202:/usr/include/sys/types.h">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="u_int16_t" ref="0x402ef010"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_TIFR_t" ref="0x40c302f0" loc="154:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c300c8"/>
                <typename><typedef-ref name="Atm128_TIFR_t" ref="0x40c302f0"/></typename>
            </type-tag>
        </typedef>
        <typedef name="SHA1Context" ref="0x4083b4c8" loc="65:sha1.h">
            <documentation loc="1:crypto.h">
                <short>&#10; Authors: Xiaokang Xiong (xkxiong@cityu.edu.hk), Duncan S.Wong (duncan@cityu.edu.hk)&#10; Date: Sep, 2008&#10;</short>
            </documentation>
            <type-tag size="I:104" alignment="I:4"><struct-ref name="SHA1Context" ref="0x40821450"/>
                <typename><typedef-ref name="SHA1Context" ref="0x4083b4c8"/></typename>
            </type-tag>
        </typedef>
        <typedef name="Atm128_TCCR3A_t" ref="0x40c2d7f8" loc="199:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c2ef28"/>
                <typename><typedef-ref name="Atm128_TCCR3A_t" ref="0x40c2d7f8"/></typename>
            </type-tag>
        </typedef>
        <typedef name="uint_least64_t" ref="0x401c3968" loc="84:/usr/include/stdint.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="uint_least64_t" ref="0x401c3968"/></typename>
            </type-int>
        </typedef>
        <typedef name="__int32_t" ref="0x402db488" loc="41:/usr/include/bits/types.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__int32_t" ref="0x402db488"/></typename>
            </type-int>
        </typedef>
        <typedef name="_G_int32_t" ref="0x403fc6b8" loc="54:/usr/include/_G_config.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="_G_int32_t" ref="0x403fc6b8"/></typename>
            </type-int>
        </typedef>
        <typedef name="pthread_rwlock_t" ref="0x40304048" loc="189:/usr/include/bits/pthreadtypes.h">
            <type-tag size="I:32" alignment="I:4"><union-ref ref="0x402ffd98"/>
                <typename><typedef-ref name="pthread_rwlock_t" ref="0x40304048"/></typename>
            </type-tag>
        </typedef>
        <typedef name="CpElement" ref="0x4082e8c0" loc="67:crypto.h">
            <type-array elements="I:20" size="I:20" alignment="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                    <typename><typedef-ref name="UInt" ref="0x4082e590"/></typename>
                </type-int>
                <typename><typedef-ref name="CpElement" ref="0x4082e8c0"/></typename>
            </type-array>
        </typedef>
        <typedef name="__fd_mask" ref="0x402f2890" loc="55:/usr/include/sys/select.h">
            <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__fd_mask" ref="0x402f2890"/></typename>
            </type-int>
        </typedef>
        <typedef name="bool" ref="0x40445298" loc="57:/opt/tinyos-2.1.0/tos/lib/tossim/tos.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="bool" ref="0x40445298"/></typename>
            </type-int>
        </typedef>
        <typedef name="Point_proj" ref="0x408388f8" loc="50:crypto.h">
            <type-tag size="I:78" alignment="I:1"><struct-ref name="Point_proj" ref="0x40838310"/>
                <typename><typedef-ref name="Point_proj" ref="0x408388f8"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__fsblkcnt64_t" ref="0x402e56b8" loc="174:/usr/include/bits/types.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="__fsblkcnt64_t" ref="0x402e56b8"/></typename>
            </type-int>
        </typedef>
        <typedef name="sim_noise_hash_t" ref="0x404eaa40" loc="63:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h">
            <documentation loc="24:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h">
                <short>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.</short>
                <long>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
            </documentation>
            <type-tag size="I:480" alignment="I:4"><struct-ref name="sim_noise_hash_t" ref="0x404ebe28"/>
                <typename><typedef-ref name="sim_noise_hash_t" ref="0x404eaa40"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__FILE" ref="0x403f6648" loc="65:/usr/include/stdio.h">
            <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x403f6168"/>
                <typename><typedef-ref name="__FILE" ref="0x403f6648"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__gnuc_va_list" ref="0x403fb118" loc="43:/usr/lib/gcc/i486-linux-gnu/4.3.3/include/stdarg.h">
            <type-pointer size="I:4" alignment="I:4">
                <type-tag size="V:" alignment="V:"><struct-ref ref="0x40025f48"/></type-tag>
                <typename><typedef-ref name="__gnuc_va_list" ref="0x403fb118"/></typename>
            </type-pointer>
        </typedef>
        <typedef name="nxle_uint8_t" ref="0x402abb58" loc="399:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nxle_uint8_t">
                <typename><typedef-ref name="nxle_uint8_t" ref="0x402abb58"/></typename>
            </type-int>
        </typedef>
        <typedef name="__off64_t" ref="0x402e3628" loc="142:/usr/include/bits/types.h">
            <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="__off64_t" ref="0x402e3628"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_ICR3H_t" ref="0x40c22010" loc="284:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_ICR3H_t" ref="0x40c22010"/></typename>
            </type-int>
        </typedef>
        <typedef name="__fsfilcnt64_t" ref="0x402e5c10" loc="178:/usr/include/bits/types.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="__fsfilcnt64_t" ref="0x402e5c10"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_OCR3AH_t" ref="0x40c24b30" loc="274:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_OCR3AH_t" ref="0x40c24b30"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_OCR3CL_t" ref="0x40c23800" loc="279:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_OCR3CL_t" ref="0x40c23800"/></typename>
            </type-int>
        </typedef>
        <typedef name="int64_t" ref="0x401c0b28" loc="44:/usr/include/stdint.h">
            <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="int64_t" ref="0x401c0b28"/></typename>
            </type-int>
        </typedef>
        <typedef name="int16_t" ref="0x401c06f8" loc="38:/usr/include/stdint.h">
            <type-int cname="short" size="I:2" alignment="I:2">
                <typename><typedef-ref name="int16_t" ref="0x401c06f8"/></typename>
            </type-int>
        </typedef>
        <typedef name="ulong" ref="0x402ea510" loc="151:/usr/include/sys/types.h">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="ulong" ref="0x402ea510"/></typename>
            </type-int>
        </typedef>
        <typedef name="int_fast64_t" ref="0x401c52c0" loc="100:/usr/include/stdint.h">
            <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="int_fast64_t" ref="0x401c52c0"/></typename>
            </type-int>
        </typedef>
        <typedef name="uid_t" ref="0x402e79e8" loc="82:/usr/include/sys/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="uid_t" ref="0x402e79e8"/></typename>
            </type-int>
        </typedef>
        <typedef name="message_t" ref="0x40615778" loc="19:/opt/tinyos-2.1.0/tos/types/message.h">
            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40617970"/>
                <typename><typedef-ref name="message_t" ref="0x40615778"/></typename>
            </type-tag>
        </typedef>
        <typedef name="nx_uint64_t" ref="0x402ad4a8" loc="392:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:1" network="nx_uint64_t">
                <typename><typedef-ref name="nx_uint64_t" ref="0x402ad4a8"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128_TIMSK_t" ref="0x40c33b78" loc="137:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c33950"/>
                <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x40c33b78"/></typename>
            </type-tag>
        </typedef>
        <typedef name="loff_t" ref="0x402e8c70" loc="46:/usr/include/sys/types.h">
            <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="loff_t" ref="0x402e8c70"/></typename>
            </type-int>
        </typedef>
        <typedef name="__socklen_t" ref="0x402e4a10" loc="192:/usr/include/bits/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__socklen_t" ref="0x402e4a10"/></typename>
            </type-int>
        </typedef>
        <typedef name="node_t" ref="0x404a6960" loc="54:/opt/tinyos-2.1.0/tos/lib/tossim/heap.c">
            <type-tag size="I:12" alignment="I:4"><struct-ref name="node" ref="0x404a64f8"/>
                <typename><typedef-ref name="node_t" ref="0x404a6960"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__uid_t" ref="0x402e05c8" loc="135:/usr/include/bits/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__uid_t" ref="0x402e05c8"/></typename>
            </type-int>
        </typedef>
        <typedef name="nx_int8_t" ref="0x402a75a0" loc="385:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="signed char" size="I:1" alignment="I:1" network="nx_int8_t">
                <typename><typedef-ref name="nx_int8_t" ref="0x402a75a0"/></typename>
            </type-int>
        </typedef>
        <typedef name="sim_noise_node_t" ref="0x404f5048" loc="75:/opt/tinyos-2.1.0/tos/lib/tossim/sim_noise.h">
            <type-tag size="I:68" alignment="I:4"><struct-ref name="sim_noise_node_t" ref="0x404ead28"/>
                <typename><typedef-ref name="sim_noise_node_t" ref="0x404f5048"/></typename>
            </type-tag>
        </typedef>
        <typedef name="id_t" ref="0x402ec068" loc="105:/usr/include/sys/types.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="id_t" ref="0x402ec068"/></typename>
            </type-int>
        </typedef>
        <typedef name="pthread_mutex_t" ref="0x402f9bd0" loc="104:/usr/include/bits/pthreadtypes.h">
            <type-tag size="I:24" alignment="I:4"><union-ref ref="0x402f9948"/>
                <typename><typedef-ref name="pthread_mutex_t" ref="0x402f9bd0"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__itimer_which_t" ref="0x404e3a78" loc="122:/usr/include/sys/time.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="__itimer_which_t" ref="0x404e3a78"/></typename>
            </type-int>
        </typedef>
        <typedef name="pthread_cond_t" ref="0x402fd9f8" loc="130:/usr/include/bits/pthreadtypes.h">
            <type-tag size="I:48" alignment="I:4"><union-ref ref="0x402fd770"/>
                <typename><typedef-ref name="pthread_cond_t" ref="0x402fd9f8"/></typename>
            </type-tag>
        </typedef>
        <typedef name="pthread_key_t" ref="0x40301330" loc="140:/usr/include/bits/pthreadtypes.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="pthread_key_t" ref="0x40301330"/></typename>
            </type-int>
        </typedef>
        <typedef name="ino_t" ref="0x402e8e98" loc="50:/usr/include/sys/types.h">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="ino_t" ref="0x402e8e98"/></typename>
            </type-int>
        </typedef>
        <typedef name="daddr_t" ref="0x402ec508" loc="116:/usr/include/sys/types.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="daddr_t" ref="0x402ec508"/></typename>
            </type-int>
        </typedef>
        <typedef name="__timezone_ptr_t" ref="0x404daac8" loc="63:/usr/include/sys/time.h">
            <documentation loc="24:/opt/tinyos-2.1.0/tos/lib/tossim/sim_mote.h">
                <short>&#10; The C functions that allow TOSSIM-side code to access the SimMoteP&#10; component.</short>
                <long>&#10; The C functions that allow TOSSIM-side code to access the SimMoteP&#10; component.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
            </documentation>
            <type-qualified __restrict="">
                <typename><typedef-ref name="__timezone_ptr_t" ref="0x404daac8"/></typename>
                <type-pointer size="I:4" alignment="I:4">
                    <type-tag size="I:8" alignment="I:4"><struct-ref name="timezone" ref="0x404da458"/></type-tag>
                </type-pointer>
            </type-qualified>
        </typedef>
        <typedef name="nxle_uint32_t" ref="0x402b04c0" loc="401:/usr/lib/ncc/nesc_nx.h">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nxle_uint32_t">
                <typename><typedef-ref name="nxle_uint32_t" ref="0x402b04c0"/></typename>
            </type-int>
        </typedef>
        <typedef name="key_t" ref="0x402ec980" loc="123:/usr/include/sys/types.h">
            <type-int cname="int" size="I:4" alignment="I:4">
                <typename><typedef-ref name="key_t" ref="0x402ec980"/></typename>
            </type-int>
        </typedef>
        <typedef name="pthread_mutexattr_t" ref="0x402fe328" loc="110:/usr/include/bits/pthreadtypes.h">
            <type-tag size="I:4" alignment="I:4"><union-ref ref="0x402fe100"/>
                <typename><typedef-ref name="pthread_mutexattr_t" ref="0x402fe328"/></typename>
            </type-tag>
        </typedef>
        <typedef name="__pthread_slist_t" ref="0x402fa4c0" loc="70:/usr/include/bits/pthreadtypes.h">
            <type-tag size="I:4" alignment="I:4"><struct-ref name="__pthread_internal_slist" ref="0x402fa010"/>
                <typename><typedef-ref name="__pthread_slist_t" ref="0x402fa4c0"/></typename>
            </type-tag>
        </typedef>
        <typedef name="uart_id_t" ref="0x4060dbf8" loc="72:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
            <documentation loc="60:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
                <short>&#10; </short>
                <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
            </documentation>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uart_id_t" ref="0x4060dbf8"/></typename>
            </type-int>
        </typedef>
        <typedef name="Atm128TimerCtrlCompare_t" ref="0x40c2d168" loc="193:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40c2ef28"/>
                <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x40c2d168"/></typename>
            </type-tag>
        </typedef>
        <typedef name="Atm128_OCR1CH_t" ref="0x40c24610" loc="270:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Timer.h">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="Atm128_OCR1CH_t" ref="0x40c24610"/></typename>
            </type-int>
        </typedef>
        <typedef name="__nesc_sillytask_stopDone" ref="0x40bbf010" loc="60:/opt/tinyos-2.1.0/tos/lib/tossim/SerialActiveMessageC.nc">
            <component-ref qname="SerialActiveMessageC"/>
            <type-array elements="I:1" size="I:4" alignment="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </type-array>
        </typedef>
        <typedef name="__nesc_sillytask_startDone" ref="0x40bbf928" loc="59:/opt/tinyos-2.1.0/tos/lib/tossim/SerialActiveMessageC.nc">
            <component-ref qname="SerialActiveMessageC"/>
            <type-array elements="I:0" size="I:0" alignment="I:4">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </type-array>
        </typedef>
    </typedefs>
</nesc>
